// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPPLYUSER(db *gorm.DB, opts ...gen.DOOption) aPPLYUSER {
	_aPPLYUSER := aPPLYUSER{}

	_aPPLYUSER.aPPLYUSERDo.UseDB(db, opts...)
	_aPPLYUSER.aPPLYUSERDo.UseModel(&model.APPLYUSER{})

	tableName := _aPPLYUSER.aPPLYUSERDo.TableName()
	_aPPLYUSER.ALL = field.NewAsterisk(tableName)
	_aPPLYUSER.ACYEAR = field.NewString(tableName, "AC_YEAR")
	_aPPLYUSER.ACTERM = field.NewString(tableName, "AC_TERM")
	_aPPLYUSER.DEGREE = field.NewString(tableName, "DEGREE")
	_aPPLYUSER.SECTION = field.NewString(tableName, "SECTION")
	_aPPLYUSER.COURSECODE = field.NewString(tableName, "COURSE_CODE")
	_aPPLYUSER.STUDENTID = field.NewString(tableName, "STUDENT_ID")
	_aPPLYUSER.CLASSDATE = field.NewString(tableName, "CLASS_DATE")
	_aPPLYUSER.ACTERMNAME = field.NewString(tableName, "AC_TERM_NAME")
	_aPPLYUSER.DEGREENAME = field.NewString(tableName, "DEGREE_NAME")
	_aPPLYUSER.COURSENAME = field.NewString(tableName, "COURSE_NAME")
	_aPPLYUSER.DATETABLE = field.NewString(tableName, "DATETABLE")
	_aPPLYUSER.TIMETABLE = field.NewString(tableName, "TIMETABLE")
	_aPPLYUSER.STARTTIME = field.NewString(tableName, "START_TIME")
	_aPPLYUSER.ENDTIME = field.NewString(tableName, "END_TIME")
	_aPPLYUSER.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_aPPLYUSER.KIOSKNO = field.NewString(tableName, "KIOSK_NO")
	_aPPLYUSER.SEATNO = field.NewString(tableName, "SEAT_NO")
	_aPPLYUSER.STUDENTNAME = field.NewString(tableName, "STUDENT_NAME")
	_aPPLYUSER.PHOTOURL = field.NewString(tableName, "PHOTO_URL")
	_aPPLYUSER.POSITIONCODE = field.NewString(tableName, "POSITION_CODE")
	_aPPLYUSER.POSITIONNAME = field.NewString(tableName, "POSITION_NAME")
	_aPPLYUSER.STATUSCODE = field.NewString(tableName, "STATUS_CODE")
	_aPPLYUSER.STATUSNAME = field.NewString(tableName, "STATUS_NAME")
	_aPPLYUSER.ABSENCEGB = field.NewString(tableName, "ABSENCE_GB")
	_aPPLYUSER.ABSENCEDATE = field.NewString(tableName, "ABSENCE_DATE")
	_aPPLYUSER.INSERTDATE = field.NewString(tableName, "INSERT_DATE")
	_aPPLYUSER.UPDATEDATE = field.NewString(tableName, "UPDATE_DATE")
	_aPPLYUSER.BIGO = field.NewString(tableName, "BIGO")

	_aPPLYUSER.fillFieldMap()

	return _aPPLYUSER
}

type aPPLYUSER struct {
	aPPLYUSERDo

	ALL          field.Asterisk
	ACYEAR       field.String
	ACTERM       field.String
	DEGREE       field.String
	SECTION      field.String
	COURSECODE   field.String
	STUDENTID    field.String
	CLASSDATE    field.String
	ACTERMNAME   field.String
	DEGREENAME   field.String
	COURSENAME   field.String
	DATETABLE    field.String
	TIMETABLE    field.String
	STARTTIME    field.String
	ENDTIME      field.String
	ROOMNAME     field.String
	KIOSKNO      field.String
	SEATNO       field.String
	STUDENTNAME  field.String
	PHOTOURL     field.String
	POSITIONCODE field.String
	POSITIONNAME field.String
	STATUSCODE   field.String
	STATUSNAME   field.String
	ABSENCEGB    field.String
	ABSENCEDATE  field.String
	INSERTDATE   field.String
	UPDATEDATE   field.String
	BIGO         field.String

	fieldMap map[string]field.Expr
}

func (a aPPLYUSER) Table(newTableName string) *aPPLYUSER {
	a.aPPLYUSERDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPLYUSER) As(alias string) *aPPLYUSER {
	a.aPPLYUSERDo.DO = *(a.aPPLYUSERDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPLYUSER) updateTableName(table string) *aPPLYUSER {
	a.ALL = field.NewAsterisk(table)
	a.ACYEAR = field.NewString(table, "AC_YEAR")
	a.ACTERM = field.NewString(table, "AC_TERM")
	a.DEGREE = field.NewString(table, "DEGREE")
	a.SECTION = field.NewString(table, "SECTION")
	a.COURSECODE = field.NewString(table, "COURSE_CODE")
	a.STUDENTID = field.NewString(table, "STUDENT_ID")
	a.CLASSDATE = field.NewString(table, "CLASS_DATE")
	a.ACTERMNAME = field.NewString(table, "AC_TERM_NAME")
	a.DEGREENAME = field.NewString(table, "DEGREE_NAME")
	a.COURSENAME = field.NewString(table, "COURSE_NAME")
	a.DATETABLE = field.NewString(table, "DATETABLE")
	a.TIMETABLE = field.NewString(table, "TIMETABLE")
	a.STARTTIME = field.NewString(table, "START_TIME")
	a.ENDTIME = field.NewString(table, "END_TIME")
	a.ROOMNAME = field.NewString(table, "ROOM_NAME")
	a.KIOSKNO = field.NewString(table, "KIOSK_NO")
	a.SEATNO = field.NewString(table, "SEAT_NO")
	a.STUDENTNAME = field.NewString(table, "STUDENT_NAME")
	a.PHOTOURL = field.NewString(table, "PHOTO_URL")
	a.POSITIONCODE = field.NewString(table, "POSITION_CODE")
	a.POSITIONNAME = field.NewString(table, "POSITION_NAME")
	a.STATUSCODE = field.NewString(table, "STATUS_CODE")
	a.STATUSNAME = field.NewString(table, "STATUS_NAME")
	a.ABSENCEGB = field.NewString(table, "ABSENCE_GB")
	a.ABSENCEDATE = field.NewString(table, "ABSENCE_DATE")
	a.INSERTDATE = field.NewString(table, "INSERT_DATE")
	a.UPDATEDATE = field.NewString(table, "UPDATE_DATE")
	a.BIGO = field.NewString(table, "BIGO")

	a.fillFieldMap()

	return a
}

func (a *aPPLYUSER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPLYUSER) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 28)
	a.fieldMap["AC_YEAR"] = a.ACYEAR
	a.fieldMap["AC_TERM"] = a.ACTERM
	a.fieldMap["DEGREE"] = a.DEGREE
	a.fieldMap["SECTION"] = a.SECTION
	a.fieldMap["COURSE_CODE"] = a.COURSECODE
	a.fieldMap["STUDENT_ID"] = a.STUDENTID
	a.fieldMap["CLASS_DATE"] = a.CLASSDATE
	a.fieldMap["AC_TERM_NAME"] = a.ACTERMNAME
	a.fieldMap["DEGREE_NAME"] = a.DEGREENAME
	a.fieldMap["COURSE_NAME"] = a.COURSENAME
	a.fieldMap["DATETABLE"] = a.DATETABLE
	a.fieldMap["TIMETABLE"] = a.TIMETABLE
	a.fieldMap["START_TIME"] = a.STARTTIME
	a.fieldMap["END_TIME"] = a.ENDTIME
	a.fieldMap["ROOM_NAME"] = a.ROOMNAME
	a.fieldMap["KIOSK_NO"] = a.KIOSKNO
	a.fieldMap["SEAT_NO"] = a.SEATNO
	a.fieldMap["STUDENT_NAME"] = a.STUDENTNAME
	a.fieldMap["PHOTO_URL"] = a.PHOTOURL
	a.fieldMap["POSITION_CODE"] = a.POSITIONCODE
	a.fieldMap["POSITION_NAME"] = a.POSITIONNAME
	a.fieldMap["STATUS_CODE"] = a.STATUSCODE
	a.fieldMap["STATUS_NAME"] = a.STATUSNAME
	a.fieldMap["ABSENCE_GB"] = a.ABSENCEGB
	a.fieldMap["ABSENCE_DATE"] = a.ABSENCEDATE
	a.fieldMap["INSERT_DATE"] = a.INSERTDATE
	a.fieldMap["UPDATE_DATE"] = a.UPDATEDATE
	a.fieldMap["BIGO"] = a.BIGO
}

func (a aPPLYUSER) clone(db *gorm.DB) aPPLYUSER {
	a.aPPLYUSERDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPLYUSER) replaceDB(db *gorm.DB) aPPLYUSER {
	a.aPPLYUSERDo.ReplaceDB(db)
	return a
}

type aPPLYUSERDo struct{ gen.DO }

type IAPPLYUSERDo interface {
	gen.SubQuery
	Debug() IAPPLYUSERDo
	WithContext(ctx context.Context) IAPPLYUSERDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPPLYUSERDo
	WriteDB() IAPPLYUSERDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPPLYUSERDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPPLYUSERDo
	Not(conds ...gen.Condition) IAPPLYUSERDo
	Or(conds ...gen.Condition) IAPPLYUSERDo
	Select(conds ...field.Expr) IAPPLYUSERDo
	Where(conds ...gen.Condition) IAPPLYUSERDo
	Order(conds ...field.Expr) IAPPLYUSERDo
	Distinct(cols ...field.Expr) IAPPLYUSERDo
	Omit(cols ...field.Expr) IAPPLYUSERDo
	Join(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo
	Group(cols ...field.Expr) IAPPLYUSERDo
	Having(conds ...gen.Condition) IAPPLYUSERDo
	Limit(limit int) IAPPLYUSERDo
	Offset(offset int) IAPPLYUSERDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYUSERDo
	Unscoped() IAPPLYUSERDo
	Create(values ...*model.APPLYUSER) error
	CreateInBatches(values []*model.APPLYUSER, batchSize int) error
	Save(values ...*model.APPLYUSER) error
	First() (*model.APPLYUSER, error)
	Take() (*model.APPLYUSER, error)
	Last() (*model.APPLYUSER, error)
	Find() ([]*model.APPLYUSER, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYUSER, err error)
	FindInBatches(result *[]*model.APPLYUSER, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APPLYUSER) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPPLYUSERDo
	Assign(attrs ...field.AssignExpr) IAPPLYUSERDo
	Joins(fields ...field.RelationField) IAPPLYUSERDo
	Preload(fields ...field.RelationField) IAPPLYUSERDo
	FirstOrInit() (*model.APPLYUSER, error)
	FirstOrCreate() (*model.APPLYUSER, error)
	FindByPage(offset int, limit int) (result []*model.APPLYUSER, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPPLYUSERDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPPLYUSERDo) Debug() IAPPLYUSERDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPLYUSERDo) WithContext(ctx context.Context) IAPPLYUSERDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPLYUSERDo) ReadDB() IAPPLYUSERDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPLYUSERDo) WriteDB() IAPPLYUSERDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPLYUSERDo) Session(config *gorm.Session) IAPPLYUSERDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPLYUSERDo) Clauses(conds ...clause.Expression) IAPPLYUSERDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPLYUSERDo) Returning(value interface{}, columns ...string) IAPPLYUSERDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPLYUSERDo) Not(conds ...gen.Condition) IAPPLYUSERDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPLYUSERDo) Or(conds ...gen.Condition) IAPPLYUSERDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPLYUSERDo) Select(conds ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPLYUSERDo) Where(conds ...gen.Condition) IAPPLYUSERDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPLYUSERDo) Order(conds ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPLYUSERDo) Distinct(cols ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPLYUSERDo) Omit(cols ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPLYUSERDo) Join(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPLYUSERDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPLYUSERDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPLYUSERDo) Group(cols ...field.Expr) IAPPLYUSERDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPLYUSERDo) Having(conds ...gen.Condition) IAPPLYUSERDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPLYUSERDo) Limit(limit int) IAPPLYUSERDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPLYUSERDo) Offset(offset int) IAPPLYUSERDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPLYUSERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYUSERDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPLYUSERDo) Unscoped() IAPPLYUSERDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPLYUSERDo) Create(values ...*model.APPLYUSER) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPLYUSERDo) CreateInBatches(values []*model.APPLYUSER, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPLYUSERDo) Save(values ...*model.APPLYUSER) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPLYUSERDo) First() (*model.APPLYUSER, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYUSER), nil
	}
}

func (a aPPLYUSERDo) Take() (*model.APPLYUSER, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYUSER), nil
	}
}

func (a aPPLYUSERDo) Last() (*model.APPLYUSER, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYUSER), nil
	}
}

func (a aPPLYUSERDo) Find() ([]*model.APPLYUSER, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPLYUSER), err
}

func (a aPPLYUSERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYUSER, err error) {
	buf := make([]*model.APPLYUSER, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPLYUSERDo) FindInBatches(result *[]*model.APPLYUSER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPLYUSERDo) Attrs(attrs ...field.AssignExpr) IAPPLYUSERDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPLYUSERDo) Assign(attrs ...field.AssignExpr) IAPPLYUSERDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPLYUSERDo) Joins(fields ...field.RelationField) IAPPLYUSERDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPLYUSERDo) Preload(fields ...field.RelationField) IAPPLYUSERDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPLYUSERDo) FirstOrInit() (*model.APPLYUSER, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYUSER), nil
	}
}

func (a aPPLYUSERDo) FirstOrCreate() (*model.APPLYUSER, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYUSER), nil
	}
}

func (a aPPLYUSERDo) FindByPage(offset int, limit int) (result []*model.APPLYUSER, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPLYUSERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPLYUSERDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPLYUSERDo) Delete(models ...*model.APPLYUSER) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPLYUSERDo) withDO(do gen.Dao) *aPPLYUSERDo {
	a.DO = *do.(*gen.DO)
	return a
}
