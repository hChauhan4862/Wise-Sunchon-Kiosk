// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatReconf(db *gorm.DB, opts ...gen.DOOption) seatReconf {
	_seatReconf := seatReconf{}

	_seatReconf.seatReconfDo.UseDB(db, opts...)
	_seatReconf.seatReconfDo.UseModel(&model.SeatReconf{})

	tableName := _seatReconf.seatReconfDo.TableName()
	_seatReconf.ALL = field.NewAsterisk(tableName)
	_seatReconf.KioskNo = field.NewInt64(tableName, "kiosk_no")
	_seatReconf.ReconfigYn = field.NewString(tableName, "reconfig_yn")

	_seatReconf.fillFieldMap()

	return _seatReconf
}

type seatReconf struct {
	seatReconfDo

	ALL        field.Asterisk
	KioskNo    field.Int64
	ReconfigYn field.String

	fieldMap map[string]field.Expr
}

func (s seatReconf) Table(newTableName string) *seatReconf {
	s.seatReconfDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatReconf) As(alias string) *seatReconf {
	s.seatReconfDo.DO = *(s.seatReconfDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatReconf) updateTableName(table string) *seatReconf {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "kiosk_no")
	s.ReconfigYn = field.NewString(table, "reconfig_yn")

	s.fillFieldMap()

	return s
}

func (s *seatReconf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatReconf) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["kiosk_no"] = s.KioskNo
	s.fieldMap["reconfig_yn"] = s.ReconfigYn
}

func (s seatReconf) clone(db *gorm.DB) seatReconf {
	s.seatReconfDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatReconf) replaceDB(db *gorm.DB) seatReconf {
	s.seatReconfDo.ReplaceDB(db)
	return s
}

type seatReconfDo struct{ gen.DO }

type ISeatReconfDo interface {
	gen.SubQuery
	Debug() ISeatReconfDo
	WithContext(ctx context.Context) ISeatReconfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatReconfDo
	WriteDB() ISeatReconfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatReconfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatReconfDo
	Not(conds ...gen.Condition) ISeatReconfDo
	Or(conds ...gen.Condition) ISeatReconfDo
	Select(conds ...field.Expr) ISeatReconfDo
	Where(conds ...gen.Condition) ISeatReconfDo
	Order(conds ...field.Expr) ISeatReconfDo
	Distinct(cols ...field.Expr) ISeatReconfDo
	Omit(cols ...field.Expr) ISeatReconfDo
	Join(table schema.Tabler, on ...field.Expr) ISeatReconfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatReconfDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatReconfDo
	Group(cols ...field.Expr) ISeatReconfDo
	Having(conds ...gen.Condition) ISeatReconfDo
	Limit(limit int) ISeatReconfDo
	Offset(offset int) ISeatReconfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatReconfDo
	Unscoped() ISeatReconfDo
	Create(values ...*model.SeatReconf) error
	CreateInBatches(values []*model.SeatReconf, batchSize int) error
	Save(values ...*model.SeatReconf) error
	First() (*model.SeatReconf, error)
	Take() (*model.SeatReconf, error)
	Last() (*model.SeatReconf, error)
	Find() ([]*model.SeatReconf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatReconf, err error)
	FindInBatches(result *[]*model.SeatReconf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatReconf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatReconfDo
	Assign(attrs ...field.AssignExpr) ISeatReconfDo
	Joins(fields ...field.RelationField) ISeatReconfDo
	Preload(fields ...field.RelationField) ISeatReconfDo
	FirstOrInit() (*model.SeatReconf, error)
	FirstOrCreate() (*model.SeatReconf, error)
	FindByPage(offset int, limit int) (result []*model.SeatReconf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatReconfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatReconfDo) Debug() ISeatReconfDo {
	return s.withDO(s.DO.Debug())
}

func (s seatReconfDo) WithContext(ctx context.Context) ISeatReconfDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatReconfDo) ReadDB() ISeatReconfDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatReconfDo) WriteDB() ISeatReconfDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatReconfDo) Session(config *gorm.Session) ISeatReconfDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatReconfDo) Clauses(conds ...clause.Expression) ISeatReconfDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatReconfDo) Returning(value interface{}, columns ...string) ISeatReconfDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatReconfDo) Not(conds ...gen.Condition) ISeatReconfDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatReconfDo) Or(conds ...gen.Condition) ISeatReconfDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatReconfDo) Select(conds ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatReconfDo) Where(conds ...gen.Condition) ISeatReconfDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatReconfDo) Order(conds ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatReconfDo) Distinct(cols ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatReconfDo) Omit(cols ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatReconfDo) Join(table schema.Tabler, on ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatReconfDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatReconfDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatReconfDo) Group(cols ...field.Expr) ISeatReconfDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatReconfDo) Having(conds ...gen.Condition) ISeatReconfDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatReconfDo) Limit(limit int) ISeatReconfDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatReconfDo) Offset(offset int) ISeatReconfDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatReconfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatReconfDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatReconfDo) Unscoped() ISeatReconfDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatReconfDo) Create(values ...*model.SeatReconf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatReconfDo) CreateInBatches(values []*model.SeatReconf, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatReconfDo) Save(values ...*model.SeatReconf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatReconfDo) First() (*model.SeatReconf, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReconf), nil
	}
}

func (s seatReconfDo) Take() (*model.SeatReconf, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReconf), nil
	}
}

func (s seatReconfDo) Last() (*model.SeatReconf, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReconf), nil
	}
}

func (s seatReconfDo) Find() ([]*model.SeatReconf, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatReconf), err
}

func (s seatReconfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatReconf, err error) {
	buf := make([]*model.SeatReconf, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatReconfDo) FindInBatches(result *[]*model.SeatReconf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatReconfDo) Attrs(attrs ...field.AssignExpr) ISeatReconfDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatReconfDo) Assign(attrs ...field.AssignExpr) ISeatReconfDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatReconfDo) Joins(fields ...field.RelationField) ISeatReconfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatReconfDo) Preload(fields ...field.RelationField) ISeatReconfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatReconfDo) FirstOrInit() (*model.SeatReconf, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReconf), nil
	}
}

func (s seatReconfDo) FirstOrCreate() (*model.SeatReconf, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReconf), nil
	}
}

func (s seatReconfDo) FindByPage(offset int, limit int) (result []*model.SeatReconf, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatReconfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatReconfDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatReconfDo) Delete(models ...*model.SeatReconf) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatReconfDo) withDO(do gen.Dao) *seatReconfDo {
	s.DO = *do.(*gen.DO)
	return s
}
