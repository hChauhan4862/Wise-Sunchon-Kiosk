// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseRroom(db *gorm.DB, opts ...gen.DOOption) wiseRroom {
	_wiseRroom := wiseRroom{}

	_wiseRroom.wiseRroomDo.UseDB(db, opts...)
	_wiseRroom.wiseRroomDo.UseModel(&model.WiseRroom{})

	tableName := _wiseRroom.wiseRroomDo.TableName()
	_wiseRroom.ALL = field.NewAsterisk(tableName)
	_wiseRroom.RroomNo = field.NewInt64(tableName, "rroom_no")
	_wiseRroom.RroomName = field.NewString(tableName, "rroom_name")
	_wiseRroom.RroomGubun = field.NewString(tableName, "rroom_gubun")
	_wiseRroom.RroomType = field.NewInt64(tableName, "rroom_type")
	_wiseRroom.UseYn = field.NewString(tableName, "use_yn")
	_wiseRroom.BlockYn = field.NewString(tableName, "block_yn")
	_wiseRroom.BlockDay = field.NewInt64(tableName, "block_day")
	_wiseRroom.Bigo = field.NewString(tableName, "bigo")

	_wiseRroom.fillFieldMap()

	return _wiseRroom
}

type wiseRroom struct {
	wiseRroomDo

	ALL        field.Asterisk
	RroomNo    field.Int64
	RroomName  field.String
	RroomGubun field.String
	RroomType  field.Int64
	UseYn      field.String
	BlockYn    field.String
	BlockDay   field.Int64
	Bigo       field.String

	fieldMap map[string]field.Expr
}

func (w wiseRroom) Table(newTableName string) *wiseRroom {
	w.wiseRroomDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseRroom) As(alias string) *wiseRroom {
	w.wiseRroomDo.DO = *(w.wiseRroomDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseRroom) updateTableName(table string) *wiseRroom {
	w.ALL = field.NewAsterisk(table)
	w.RroomNo = field.NewInt64(table, "rroom_no")
	w.RroomName = field.NewString(table, "rroom_name")
	w.RroomGubun = field.NewString(table, "rroom_gubun")
	w.RroomType = field.NewInt64(table, "rroom_type")
	w.UseYn = field.NewString(table, "use_yn")
	w.BlockYn = field.NewString(table, "block_yn")
	w.BlockDay = field.NewInt64(table, "block_day")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseRroom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseRroom) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 8)
	w.fieldMap["rroom_no"] = w.RroomNo
	w.fieldMap["rroom_name"] = w.RroomName
	w.fieldMap["rroom_gubun"] = w.RroomGubun
	w.fieldMap["rroom_type"] = w.RroomType
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["block_yn"] = w.BlockYn
	w.fieldMap["block_day"] = w.BlockDay
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseRroom) clone(db *gorm.DB) wiseRroom {
	w.wiseRroomDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseRroom) replaceDB(db *gorm.DB) wiseRroom {
	w.wiseRroomDo.ReplaceDB(db)
	return w
}

type wiseRroomDo struct{ gen.DO }

type IWiseRroomDo interface {
	gen.SubQuery
	Debug() IWiseRroomDo
	WithContext(ctx context.Context) IWiseRroomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseRroomDo
	WriteDB() IWiseRroomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseRroomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseRroomDo
	Not(conds ...gen.Condition) IWiseRroomDo
	Or(conds ...gen.Condition) IWiseRroomDo
	Select(conds ...field.Expr) IWiseRroomDo
	Where(conds ...gen.Condition) IWiseRroomDo
	Order(conds ...field.Expr) IWiseRroomDo
	Distinct(cols ...field.Expr) IWiseRroomDo
	Omit(cols ...field.Expr) IWiseRroomDo
	Join(table schema.Tabler, on ...field.Expr) IWiseRroomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomDo
	Group(cols ...field.Expr) IWiseRroomDo
	Having(conds ...gen.Condition) IWiseRroomDo
	Limit(limit int) IWiseRroomDo
	Offset(offset int) IWiseRroomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomDo
	Unscoped() IWiseRroomDo
	Create(values ...*model.WiseRroom) error
	CreateInBatches(values []*model.WiseRroom, batchSize int) error
	Save(values ...*model.WiseRroom) error
	First() (*model.WiseRroom, error)
	Take() (*model.WiseRroom, error)
	Last() (*model.WiseRroom, error)
	Find() ([]*model.WiseRroom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroom, err error)
	FindInBatches(result *[]*model.WiseRroom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseRroom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseRroomDo
	Assign(attrs ...field.AssignExpr) IWiseRroomDo
	Joins(fields ...field.RelationField) IWiseRroomDo
	Preload(fields ...field.RelationField) IWiseRroomDo
	FirstOrInit() (*model.WiseRroom, error)
	FirstOrCreate() (*model.WiseRroom, error)
	FindByPage(offset int, limit int) (result []*model.WiseRroom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseRroomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseRroomDo) Debug() IWiseRroomDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseRroomDo) WithContext(ctx context.Context) IWiseRroomDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseRroomDo) ReadDB() IWiseRroomDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseRroomDo) WriteDB() IWiseRroomDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseRroomDo) Session(config *gorm.Session) IWiseRroomDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseRroomDo) Clauses(conds ...clause.Expression) IWiseRroomDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseRroomDo) Returning(value interface{}, columns ...string) IWiseRroomDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseRroomDo) Not(conds ...gen.Condition) IWiseRroomDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseRroomDo) Or(conds ...gen.Condition) IWiseRroomDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseRroomDo) Select(conds ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseRroomDo) Where(conds ...gen.Condition) IWiseRroomDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseRroomDo) Order(conds ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseRroomDo) Distinct(cols ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseRroomDo) Omit(cols ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseRroomDo) Join(table schema.Tabler, on ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseRroomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseRroomDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseRroomDo) Group(cols ...field.Expr) IWiseRroomDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseRroomDo) Having(conds ...gen.Condition) IWiseRroomDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseRroomDo) Limit(limit int) IWiseRroomDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseRroomDo) Offset(offset int) IWiseRroomDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseRroomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseRroomDo) Unscoped() IWiseRroomDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseRroomDo) Create(values ...*model.WiseRroom) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseRroomDo) CreateInBatches(values []*model.WiseRroom, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseRroomDo) Save(values ...*model.WiseRroom) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseRroomDo) First() (*model.WiseRroom, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroom), nil
	}
}

func (w wiseRroomDo) Take() (*model.WiseRroom, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroom), nil
	}
}

func (w wiseRroomDo) Last() (*model.WiseRroom, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroom), nil
	}
}

func (w wiseRroomDo) Find() ([]*model.WiseRroom, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseRroom), err
}

func (w wiseRroomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroom, err error) {
	buf := make([]*model.WiseRroom, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseRroomDo) FindInBatches(result *[]*model.WiseRroom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseRroomDo) Attrs(attrs ...field.AssignExpr) IWiseRroomDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseRroomDo) Assign(attrs ...field.AssignExpr) IWiseRroomDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseRroomDo) Joins(fields ...field.RelationField) IWiseRroomDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseRroomDo) Preload(fields ...field.RelationField) IWiseRroomDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseRroomDo) FirstOrInit() (*model.WiseRroom, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroom), nil
	}
}

func (w wiseRroomDo) FirstOrCreate() (*model.WiseRroom, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroom), nil
	}
}

func (w wiseRroomDo) FindByPage(offset int, limit int) (result []*model.WiseRroom, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseRroomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseRroomDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseRroomDo) Delete(models ...*model.WiseRroom) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseRroomDo) withDO(do gen.Dao) *wiseRroomDo {
	w.DO = *do.(*gen.DO)
	return w
}
