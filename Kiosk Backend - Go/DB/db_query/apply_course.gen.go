// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPPLYCOURSE(db *gorm.DB, opts ...gen.DOOption) aPPLYCOURSE {
	_aPPLYCOURSE := aPPLYCOURSE{}

	_aPPLYCOURSE.aPPLYCOURSEDo.UseDB(db, opts...)
	_aPPLYCOURSE.aPPLYCOURSEDo.UseModel(&model.APPLYCOURSE{})

	tableName := _aPPLYCOURSE.aPPLYCOURSEDo.TableName()
	_aPPLYCOURSE.ALL = field.NewAsterisk(tableName)
	_aPPLYCOURSE.SEQID = field.NewInt64(tableName, "SEQ_ID")
	_aPPLYCOURSE.ACYEAR = field.NewString(tableName, "AC_YEAR")
	_aPPLYCOURSE.ACTERM = field.NewString(tableName, "AC_TERM")
	_aPPLYCOURSE.DEGREE = field.NewString(tableName, "DEGREE")
	_aPPLYCOURSE.SECTION = field.NewString(tableName, "SECTION")
	_aPPLYCOURSE.COURSECODE = field.NewString(tableName, "COURSE_CODE")
	_aPPLYCOURSE.CLASSDATE = field.NewString(tableName, "CLASS_DATE")
	_aPPLYCOURSE.COURSENAME = field.NewString(tableName, "COURSE_NAME")
	_aPPLYCOURSE.ACTERMNAME = field.NewString(tableName, "AC_TERM_NAME")
	_aPPLYCOURSE.DEGREENAME = field.NewString(tableName, "DEGREE_NAME")
	_aPPLYCOURSE.TIMETABLE = field.NewString(tableName, "TIMETABLE")
	_aPPLYCOURSE.STARTTIME = field.NewString(tableName, "START_TIME")
	_aPPLYCOURSE.ENDTIME = field.NewString(tableName, "END_TIME")
	_aPPLYCOURSE.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_aPPLYCOURSE.INSERTDATE = field.NewString(tableName, "INSERT_DATE")
	_aPPLYCOURSE.UPDATEDATE = field.NewString(tableName, "UPDATE_DATE")
	_aPPLYCOURSE.BIGO = field.NewString(tableName, "BIGO")

	_aPPLYCOURSE.fillFieldMap()

	return _aPPLYCOURSE
}

type aPPLYCOURSE struct {
	aPPLYCOURSEDo

	ALL        field.Asterisk
	SEQID      field.Int64
	ACYEAR     field.String
	ACTERM     field.String
	DEGREE     field.String
	SECTION    field.String
	COURSECODE field.String
	CLASSDATE  field.String
	COURSENAME field.String
	ACTERMNAME field.String
	DEGREENAME field.String
	TIMETABLE  field.String
	STARTTIME  field.String
	ENDTIME    field.String
	ROOMNAME   field.String
	INSERTDATE field.String
	UPDATEDATE field.String
	BIGO       field.String

	fieldMap map[string]field.Expr
}

func (a aPPLYCOURSE) Table(newTableName string) *aPPLYCOURSE {
	a.aPPLYCOURSEDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPLYCOURSE) As(alias string) *aPPLYCOURSE {
	a.aPPLYCOURSEDo.DO = *(a.aPPLYCOURSEDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPLYCOURSE) updateTableName(table string) *aPPLYCOURSE {
	a.ALL = field.NewAsterisk(table)
	a.SEQID = field.NewInt64(table, "SEQ_ID")
	a.ACYEAR = field.NewString(table, "AC_YEAR")
	a.ACTERM = field.NewString(table, "AC_TERM")
	a.DEGREE = field.NewString(table, "DEGREE")
	a.SECTION = field.NewString(table, "SECTION")
	a.COURSECODE = field.NewString(table, "COURSE_CODE")
	a.CLASSDATE = field.NewString(table, "CLASS_DATE")
	a.COURSENAME = field.NewString(table, "COURSE_NAME")
	a.ACTERMNAME = field.NewString(table, "AC_TERM_NAME")
	a.DEGREENAME = field.NewString(table, "DEGREE_NAME")
	a.TIMETABLE = field.NewString(table, "TIMETABLE")
	a.STARTTIME = field.NewString(table, "START_TIME")
	a.ENDTIME = field.NewString(table, "END_TIME")
	a.ROOMNAME = field.NewString(table, "ROOM_NAME")
	a.INSERTDATE = field.NewString(table, "INSERT_DATE")
	a.UPDATEDATE = field.NewString(table, "UPDATE_DATE")
	a.BIGO = field.NewString(table, "BIGO")

	a.fillFieldMap()

	return a
}

func (a *aPPLYCOURSE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPLYCOURSE) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["SEQ_ID"] = a.SEQID
	a.fieldMap["AC_YEAR"] = a.ACYEAR
	a.fieldMap["AC_TERM"] = a.ACTERM
	a.fieldMap["DEGREE"] = a.DEGREE
	a.fieldMap["SECTION"] = a.SECTION
	a.fieldMap["COURSE_CODE"] = a.COURSECODE
	a.fieldMap["CLASS_DATE"] = a.CLASSDATE
	a.fieldMap["COURSE_NAME"] = a.COURSENAME
	a.fieldMap["AC_TERM_NAME"] = a.ACTERMNAME
	a.fieldMap["DEGREE_NAME"] = a.DEGREENAME
	a.fieldMap["TIMETABLE"] = a.TIMETABLE
	a.fieldMap["START_TIME"] = a.STARTTIME
	a.fieldMap["END_TIME"] = a.ENDTIME
	a.fieldMap["ROOM_NAME"] = a.ROOMNAME
	a.fieldMap["INSERT_DATE"] = a.INSERTDATE
	a.fieldMap["UPDATE_DATE"] = a.UPDATEDATE
	a.fieldMap["BIGO"] = a.BIGO
}

func (a aPPLYCOURSE) clone(db *gorm.DB) aPPLYCOURSE {
	a.aPPLYCOURSEDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPLYCOURSE) replaceDB(db *gorm.DB) aPPLYCOURSE {
	a.aPPLYCOURSEDo.ReplaceDB(db)
	return a
}

type aPPLYCOURSEDo struct{ gen.DO }

type IAPPLYCOURSEDo interface {
	gen.SubQuery
	Debug() IAPPLYCOURSEDo
	WithContext(ctx context.Context) IAPPLYCOURSEDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPPLYCOURSEDo
	WriteDB() IAPPLYCOURSEDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPPLYCOURSEDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPPLYCOURSEDo
	Not(conds ...gen.Condition) IAPPLYCOURSEDo
	Or(conds ...gen.Condition) IAPPLYCOURSEDo
	Select(conds ...field.Expr) IAPPLYCOURSEDo
	Where(conds ...gen.Condition) IAPPLYCOURSEDo
	Order(conds ...field.Expr) IAPPLYCOURSEDo
	Distinct(cols ...field.Expr) IAPPLYCOURSEDo
	Omit(cols ...field.Expr) IAPPLYCOURSEDo
	Join(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo
	Group(cols ...field.Expr) IAPPLYCOURSEDo
	Having(conds ...gen.Condition) IAPPLYCOURSEDo
	Limit(limit int) IAPPLYCOURSEDo
	Offset(offset int) IAPPLYCOURSEDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYCOURSEDo
	Unscoped() IAPPLYCOURSEDo
	Create(values ...*model.APPLYCOURSE) error
	CreateInBatches(values []*model.APPLYCOURSE, batchSize int) error
	Save(values ...*model.APPLYCOURSE) error
	First() (*model.APPLYCOURSE, error)
	Take() (*model.APPLYCOURSE, error)
	Last() (*model.APPLYCOURSE, error)
	Find() ([]*model.APPLYCOURSE, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYCOURSE, err error)
	FindInBatches(result *[]*model.APPLYCOURSE, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APPLYCOURSE) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPPLYCOURSEDo
	Assign(attrs ...field.AssignExpr) IAPPLYCOURSEDo
	Joins(fields ...field.RelationField) IAPPLYCOURSEDo
	Preload(fields ...field.RelationField) IAPPLYCOURSEDo
	FirstOrInit() (*model.APPLYCOURSE, error)
	FirstOrCreate() (*model.APPLYCOURSE, error)
	FindByPage(offset int, limit int) (result []*model.APPLYCOURSE, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPPLYCOURSEDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPPLYCOURSEDo) Debug() IAPPLYCOURSEDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPLYCOURSEDo) WithContext(ctx context.Context) IAPPLYCOURSEDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPLYCOURSEDo) ReadDB() IAPPLYCOURSEDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPLYCOURSEDo) WriteDB() IAPPLYCOURSEDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPLYCOURSEDo) Session(config *gorm.Session) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPLYCOURSEDo) Clauses(conds ...clause.Expression) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPLYCOURSEDo) Returning(value interface{}, columns ...string) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPLYCOURSEDo) Not(conds ...gen.Condition) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPLYCOURSEDo) Or(conds ...gen.Condition) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPLYCOURSEDo) Select(conds ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPLYCOURSEDo) Where(conds ...gen.Condition) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPLYCOURSEDo) Order(conds ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPLYCOURSEDo) Distinct(cols ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPLYCOURSEDo) Omit(cols ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPLYCOURSEDo) Join(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPLYCOURSEDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPLYCOURSEDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPLYCOURSEDo) Group(cols ...field.Expr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPLYCOURSEDo) Having(conds ...gen.Condition) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPLYCOURSEDo) Limit(limit int) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPLYCOURSEDo) Offset(offset int) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPLYCOURSEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPLYCOURSEDo) Unscoped() IAPPLYCOURSEDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPLYCOURSEDo) Create(values ...*model.APPLYCOURSE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPLYCOURSEDo) CreateInBatches(values []*model.APPLYCOURSE, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPLYCOURSEDo) Save(values ...*model.APPLYCOURSE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPLYCOURSEDo) First() (*model.APPLYCOURSE, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYCOURSE), nil
	}
}

func (a aPPLYCOURSEDo) Take() (*model.APPLYCOURSE, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYCOURSE), nil
	}
}

func (a aPPLYCOURSEDo) Last() (*model.APPLYCOURSE, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYCOURSE), nil
	}
}

func (a aPPLYCOURSEDo) Find() ([]*model.APPLYCOURSE, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPLYCOURSE), err
}

func (a aPPLYCOURSEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYCOURSE, err error) {
	buf := make([]*model.APPLYCOURSE, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPLYCOURSEDo) FindInBatches(result *[]*model.APPLYCOURSE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPLYCOURSEDo) Attrs(attrs ...field.AssignExpr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPLYCOURSEDo) Assign(attrs ...field.AssignExpr) IAPPLYCOURSEDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPLYCOURSEDo) Joins(fields ...field.RelationField) IAPPLYCOURSEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPLYCOURSEDo) Preload(fields ...field.RelationField) IAPPLYCOURSEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPLYCOURSEDo) FirstOrInit() (*model.APPLYCOURSE, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYCOURSE), nil
	}
}

func (a aPPLYCOURSEDo) FirstOrCreate() (*model.APPLYCOURSE, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYCOURSE), nil
	}
}

func (a aPPLYCOURSEDo) FindByPage(offset int, limit int) (result []*model.APPLYCOURSE, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPLYCOURSEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPLYCOURSEDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPLYCOURSEDo) Delete(models ...*model.APPLYCOURSE) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPLYCOURSEDo) withDO(do gen.Dao) *aPPLYCOURSEDo {
	a.DO = *do.(*gen.DO)
	return a
}
