// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatBookingLog(db *gorm.DB, opts ...gen.DOOption) seatBookingLog {
	_seatBookingLog := seatBookingLog{}

	_seatBookingLog.seatBookingLogDo.UseDB(db, opts...)
	_seatBookingLog.seatBookingLogDo.UseModel(&model.SeatBookingLog{})

	tableName := _seatBookingLog.seatBookingLogDo.TableName()
	_seatBookingLog.ALL = field.NewAsterisk(tableName)
	_seatBookingLog.LOGNO = field.NewInt64(tableName, "LOGNO")
	_seatBookingLog.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_seatBookingLog.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")
	_seatBookingLog.SEATNO = field.NewInt64(tableName, "SEATNO")
	_seatBookingLog.STATUS = field.NewInt64(tableName, "STATUS")
	_seatBookingLog.USESTART = field.NewTime(tableName, "USESTART")
	_seatBookingLog.USEEXPIRE = field.NewTime(tableName, "USEEXPIRE")
	_seatBookingLog.STARTTIME = field.NewTime(tableName, "STARTTIME")
	_seatBookingLog.RETURNTIME = field.NewTime(tableName, "RETURNTIME")
	_seatBookingLog.NEWSEATNO = field.NewInt64(tableName, "NEW_SEATNO")
	_seatBookingLog.EXTENDMIN = field.NewInt64(tableName, "EXTEND_MIN")
	_seatBookingLog.EXTENDCNT = field.NewInt64(tableName, "EXTEND_CNT")
	_seatBookingLog.LOGTIME = field.NewTime(tableName, "LOGTIME")
	_seatBookingLog.ISSUEFROM = field.NewInt64(tableName, "ISSUEFROM")
	_seatBookingLog.ISSUEDETAIL = field.NewString(tableName, "ISSUEDETAIL")
	_seatBookingLog.ISSUETYPENO = field.NewInt64(tableName, "ISSUE_TYPE_NO")

	_seatBookingLog.fillFieldMap()

	return _seatBookingLog
}

type seatBookingLog struct {
	seatBookingLogDo

	ALL         field.Asterisk
	LOGNO       field.Int64
	BSEQNO      field.Int64
	SCHOOLNO    field.String
	SEATNO      field.Int64
	STATUS      field.Int64
	USESTART    field.Time
	USEEXPIRE   field.Time
	STARTTIME   field.Time
	RETURNTIME  field.Time
	NEWSEATNO   field.Int64
	EXTENDMIN   field.Int64
	EXTENDCNT   field.Int64
	LOGTIME     field.Time
	ISSUEFROM   field.Int64
	ISSUEDETAIL field.String
	ISSUETYPENO field.Int64

	fieldMap map[string]field.Expr
}

func (s seatBookingLog) Table(newTableName string) *seatBookingLog {
	s.seatBookingLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatBookingLog) As(alias string) *seatBookingLog {
	s.seatBookingLogDo.DO = *(s.seatBookingLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatBookingLog) updateTableName(table string) *seatBookingLog {
	s.ALL = field.NewAsterisk(table)
	s.LOGNO = field.NewInt64(table, "LOGNO")
	s.BSEQNO = field.NewInt64(table, "BSEQNO")
	s.SCHOOLNO = field.NewString(table, "SCHOOLNO")
	s.SEATNO = field.NewInt64(table, "SEATNO")
	s.STATUS = field.NewInt64(table, "STATUS")
	s.USESTART = field.NewTime(table, "USESTART")
	s.USEEXPIRE = field.NewTime(table, "USEEXPIRE")
	s.STARTTIME = field.NewTime(table, "STARTTIME")
	s.RETURNTIME = field.NewTime(table, "RETURNTIME")
	s.NEWSEATNO = field.NewInt64(table, "NEW_SEATNO")
	s.EXTENDMIN = field.NewInt64(table, "EXTEND_MIN")
	s.EXTENDCNT = field.NewInt64(table, "EXTEND_CNT")
	s.LOGTIME = field.NewTime(table, "LOGTIME")
	s.ISSUEFROM = field.NewInt64(table, "ISSUEFROM")
	s.ISSUEDETAIL = field.NewString(table, "ISSUEDETAIL")
	s.ISSUETYPENO = field.NewInt64(table, "ISSUE_TYPE_NO")

	s.fillFieldMap()

	return s
}

func (s *seatBookingLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatBookingLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["LOGNO"] = s.LOGNO
	s.fieldMap["BSEQNO"] = s.BSEQNO
	s.fieldMap["SCHOOLNO"] = s.SCHOOLNO
	s.fieldMap["SEATNO"] = s.SEATNO
	s.fieldMap["STATUS"] = s.STATUS
	s.fieldMap["USESTART"] = s.USESTART
	s.fieldMap["USEEXPIRE"] = s.USEEXPIRE
	s.fieldMap["STARTTIME"] = s.STARTTIME
	s.fieldMap["RETURNTIME"] = s.RETURNTIME
	s.fieldMap["NEW_SEATNO"] = s.NEWSEATNO
	s.fieldMap["EXTEND_MIN"] = s.EXTENDMIN
	s.fieldMap["EXTEND_CNT"] = s.EXTENDCNT
	s.fieldMap["LOGTIME"] = s.LOGTIME
	s.fieldMap["ISSUEFROM"] = s.ISSUEFROM
	s.fieldMap["ISSUEDETAIL"] = s.ISSUEDETAIL
	s.fieldMap["ISSUE_TYPE_NO"] = s.ISSUETYPENO
}

func (s seatBookingLog) clone(db *gorm.DB) seatBookingLog {
	s.seatBookingLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatBookingLog) replaceDB(db *gorm.DB) seatBookingLog {
	s.seatBookingLogDo.ReplaceDB(db)
	return s
}

type seatBookingLogDo struct{ gen.DO }

type ISeatBookingLogDo interface {
	gen.SubQuery
	Debug() ISeatBookingLogDo
	WithContext(ctx context.Context) ISeatBookingLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatBookingLogDo
	WriteDB() ISeatBookingLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatBookingLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatBookingLogDo
	Not(conds ...gen.Condition) ISeatBookingLogDo
	Or(conds ...gen.Condition) ISeatBookingLogDo
	Select(conds ...field.Expr) ISeatBookingLogDo
	Where(conds ...gen.Condition) ISeatBookingLogDo
	Order(conds ...field.Expr) ISeatBookingLogDo
	Distinct(cols ...field.Expr) ISeatBookingLogDo
	Omit(cols ...field.Expr) ISeatBookingLogDo
	Join(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo
	Group(cols ...field.Expr) ISeatBookingLogDo
	Having(conds ...gen.Condition) ISeatBookingLogDo
	Limit(limit int) ISeatBookingLogDo
	Offset(offset int) ISeatBookingLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatBookingLogDo
	Unscoped() ISeatBookingLogDo
	Create(values ...*model.SeatBookingLog) error
	CreateInBatches(values []*model.SeatBookingLog, batchSize int) error
	Save(values ...*model.SeatBookingLog) error
	First() (*model.SeatBookingLog, error)
	Take() (*model.SeatBookingLog, error)
	Last() (*model.SeatBookingLog, error)
	Find() ([]*model.SeatBookingLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatBookingLog, err error)
	FindInBatches(result *[]*model.SeatBookingLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatBookingLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatBookingLogDo
	Assign(attrs ...field.AssignExpr) ISeatBookingLogDo
	Joins(fields ...field.RelationField) ISeatBookingLogDo
	Preload(fields ...field.RelationField) ISeatBookingLogDo
	FirstOrInit() (*model.SeatBookingLog, error)
	FirstOrCreate() (*model.SeatBookingLog, error)
	FindByPage(offset int, limit int) (result []*model.SeatBookingLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatBookingLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatBookingLogDo) Debug() ISeatBookingLogDo {
	return s.withDO(s.DO.Debug())
}

func (s seatBookingLogDo) WithContext(ctx context.Context) ISeatBookingLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatBookingLogDo) ReadDB() ISeatBookingLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatBookingLogDo) WriteDB() ISeatBookingLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatBookingLogDo) Session(config *gorm.Session) ISeatBookingLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatBookingLogDo) Clauses(conds ...clause.Expression) ISeatBookingLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatBookingLogDo) Returning(value interface{}, columns ...string) ISeatBookingLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatBookingLogDo) Not(conds ...gen.Condition) ISeatBookingLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatBookingLogDo) Or(conds ...gen.Condition) ISeatBookingLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatBookingLogDo) Select(conds ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatBookingLogDo) Where(conds ...gen.Condition) ISeatBookingLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatBookingLogDo) Order(conds ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatBookingLogDo) Distinct(cols ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatBookingLogDo) Omit(cols ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatBookingLogDo) Join(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatBookingLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatBookingLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatBookingLogDo) Group(cols ...field.Expr) ISeatBookingLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatBookingLogDo) Having(conds ...gen.Condition) ISeatBookingLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatBookingLogDo) Limit(limit int) ISeatBookingLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatBookingLogDo) Offset(offset int) ISeatBookingLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatBookingLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatBookingLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatBookingLogDo) Unscoped() ISeatBookingLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatBookingLogDo) Create(values ...*model.SeatBookingLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatBookingLogDo) CreateInBatches(values []*model.SeatBookingLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatBookingLogDo) Save(values ...*model.SeatBookingLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatBookingLogDo) First() (*model.SeatBookingLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookingLog), nil
	}
}

func (s seatBookingLogDo) Take() (*model.SeatBookingLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookingLog), nil
	}
}

func (s seatBookingLogDo) Last() (*model.SeatBookingLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookingLog), nil
	}
}

func (s seatBookingLogDo) Find() ([]*model.SeatBookingLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatBookingLog), err
}

func (s seatBookingLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatBookingLog, err error) {
	buf := make([]*model.SeatBookingLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatBookingLogDo) FindInBatches(result *[]*model.SeatBookingLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatBookingLogDo) Attrs(attrs ...field.AssignExpr) ISeatBookingLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatBookingLogDo) Assign(attrs ...field.AssignExpr) ISeatBookingLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatBookingLogDo) Joins(fields ...field.RelationField) ISeatBookingLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatBookingLogDo) Preload(fields ...field.RelationField) ISeatBookingLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatBookingLogDo) FirstOrInit() (*model.SeatBookingLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookingLog), nil
	}
}

func (s seatBookingLogDo) FirstOrCreate() (*model.SeatBookingLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookingLog), nil
	}
}

func (s seatBookingLogDo) FindByPage(offset int, limit int) (result []*model.SeatBookingLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatBookingLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatBookingLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatBookingLogDo) Delete(models ...*model.SeatBookingLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatBookingLogDo) withDO(do gen.Dao) *seatBookingLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
