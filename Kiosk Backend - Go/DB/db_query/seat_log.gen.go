// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatLog(db *gorm.DB, opts ...gen.DOOption) seatLog {
	_seatLog := seatLog{}

	_seatLog.seatLogDo.UseDB(db, opts...)
	_seatLog.seatLogDo.UseModel(&model.SeatLog{})

	tableName := _seatLog.seatLogDo.TableName()
	_seatLog.ALL = field.NewAsterisk(tableName)
	_seatLog.KioskNo = field.NewInt64(tableName, "kiosk_no")
	_seatLog.RoomNo = field.NewInt64(tableName, "room_no")
	_seatLog.SeatNo = field.NewInt64(tableName, "seat_no")
	_seatLog.UserID = field.NewString(tableName, "user_id")
	_seatLog.StartDate = field.NewString(tableName, "start_date")
	_seatLog.StartTime = field.NewString(tableName, "start_time")
	_seatLog.EndDate = field.NewString(tableName, "end_date")
	_seatLog.EndTime = field.NewString(tableName, "end_time")
	_seatLog.UseYn = field.NewString(tableName, "use_yn")
	_seatLog.ContCnt = field.NewInt64(tableName, "cont_cnt")
	_seatLog.PatType = field.NewString(tableName, "pat_type")
	_seatLog.DeptCode = field.NewString(tableName, "dept_code")
	_seatLog.SeatBigo = field.NewString(tableName, "seat_bigo")
	_seatLog.UserName = field.NewString(tableName, "user_name")

	_seatLog.fillFieldMap()

	return _seatLog
}

type seatLog struct {
	seatLogDo

	ALL       field.Asterisk
	KioskNo   field.Int64
	RoomNo    field.Int64
	SeatNo    field.Int64
	UserID    field.String
	StartDate field.String
	StartTime field.String
	EndDate   field.String
	EndTime   field.String
	UseYn     field.String
	ContCnt   field.Int64
	PatType   field.String
	DeptCode  field.String
	SeatBigo  field.String
	UserName  field.String

	fieldMap map[string]field.Expr
}

func (s seatLog) Table(newTableName string) *seatLog {
	s.seatLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatLog) As(alias string) *seatLog {
	s.seatLogDo.DO = *(s.seatLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatLog) updateTableName(table string) *seatLog {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "kiosk_no")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.UserID = field.NewString(table, "user_id")
	s.StartDate = field.NewString(table, "start_date")
	s.StartTime = field.NewString(table, "start_time")
	s.EndDate = field.NewString(table, "end_date")
	s.EndTime = field.NewString(table, "end_time")
	s.UseYn = field.NewString(table, "use_yn")
	s.ContCnt = field.NewInt64(table, "cont_cnt")
	s.PatType = field.NewString(table, "pat_type")
	s.DeptCode = field.NewString(table, "dept_code")
	s.SeatBigo = field.NewString(table, "seat_bigo")
	s.UserName = field.NewString(table, "user_name")

	s.fillFieldMap()

	return s
}

func (s *seatLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["kiosk_no"] = s.KioskNo
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["start_date"] = s.StartDate
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["end_date"] = s.EndDate
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["use_yn"] = s.UseYn
	s.fieldMap["cont_cnt"] = s.ContCnt
	s.fieldMap["pat_type"] = s.PatType
	s.fieldMap["dept_code"] = s.DeptCode
	s.fieldMap["seat_bigo"] = s.SeatBigo
	s.fieldMap["user_name"] = s.UserName
}

func (s seatLog) clone(db *gorm.DB) seatLog {
	s.seatLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatLog) replaceDB(db *gorm.DB) seatLog {
	s.seatLogDo.ReplaceDB(db)
	return s
}

type seatLogDo struct{ gen.DO }

type ISeatLogDo interface {
	gen.SubQuery
	Debug() ISeatLogDo
	WithContext(ctx context.Context) ISeatLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatLogDo
	WriteDB() ISeatLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatLogDo
	Not(conds ...gen.Condition) ISeatLogDo
	Or(conds ...gen.Condition) ISeatLogDo
	Select(conds ...field.Expr) ISeatLogDo
	Where(conds ...gen.Condition) ISeatLogDo
	Order(conds ...field.Expr) ISeatLogDo
	Distinct(cols ...field.Expr) ISeatLogDo
	Omit(cols ...field.Expr) ISeatLogDo
	Join(table schema.Tabler, on ...field.Expr) ISeatLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatLogDo
	Group(cols ...field.Expr) ISeatLogDo
	Having(conds ...gen.Condition) ISeatLogDo
	Limit(limit int) ISeatLogDo
	Offset(offset int) ISeatLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLogDo
	Unscoped() ISeatLogDo
	Create(values ...*model.SeatLog) error
	CreateInBatches(values []*model.SeatLog, batchSize int) error
	Save(values ...*model.SeatLog) error
	First() (*model.SeatLog, error)
	Take() (*model.SeatLog, error)
	Last() (*model.SeatLog, error)
	Find() ([]*model.SeatLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLog, err error)
	FindInBatches(result *[]*model.SeatLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatLogDo
	Assign(attrs ...field.AssignExpr) ISeatLogDo
	Joins(fields ...field.RelationField) ISeatLogDo
	Preload(fields ...field.RelationField) ISeatLogDo
	FirstOrInit() (*model.SeatLog, error)
	FirstOrCreate() (*model.SeatLog, error)
	FindByPage(offset int, limit int) (result []*model.SeatLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatLogDo) Debug() ISeatLogDo {
	return s.withDO(s.DO.Debug())
}

func (s seatLogDo) WithContext(ctx context.Context) ISeatLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatLogDo) ReadDB() ISeatLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatLogDo) WriteDB() ISeatLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatLogDo) Session(config *gorm.Session) ISeatLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatLogDo) Clauses(conds ...clause.Expression) ISeatLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatLogDo) Returning(value interface{}, columns ...string) ISeatLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatLogDo) Not(conds ...gen.Condition) ISeatLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatLogDo) Or(conds ...gen.Condition) ISeatLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatLogDo) Select(conds ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatLogDo) Where(conds ...gen.Condition) ISeatLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatLogDo) Order(conds ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatLogDo) Distinct(cols ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatLogDo) Omit(cols ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatLogDo) Join(table schema.Tabler, on ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatLogDo) Group(cols ...field.Expr) ISeatLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatLogDo) Having(conds ...gen.Condition) ISeatLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatLogDo) Limit(limit int) ISeatLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatLogDo) Offset(offset int) ISeatLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatLogDo) Unscoped() ISeatLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatLogDo) Create(values ...*model.SeatLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatLogDo) CreateInBatches(values []*model.SeatLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatLogDo) Save(values ...*model.SeatLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatLogDo) First() (*model.SeatLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLog), nil
	}
}

func (s seatLogDo) Take() (*model.SeatLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLog), nil
	}
}

func (s seatLogDo) Last() (*model.SeatLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLog), nil
	}
}

func (s seatLogDo) Find() ([]*model.SeatLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatLog), err
}

func (s seatLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLog, err error) {
	buf := make([]*model.SeatLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatLogDo) FindInBatches(result *[]*model.SeatLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatLogDo) Attrs(attrs ...field.AssignExpr) ISeatLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatLogDo) Assign(attrs ...field.AssignExpr) ISeatLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatLogDo) Joins(fields ...field.RelationField) ISeatLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatLogDo) Preload(fields ...field.RelationField) ISeatLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatLogDo) FirstOrInit() (*model.SeatLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLog), nil
	}
}

func (s seatLogDo) FirstOrCreate() (*model.SeatLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLog), nil
	}
}

func (s seatLogDo) FindByPage(offset int, limit int) (result []*model.SeatLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatLogDo) Delete(models ...*model.SeatLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatLogDo) withDO(do gen.Dao) *seatLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
