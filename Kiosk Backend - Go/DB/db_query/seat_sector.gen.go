// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatSector(db *gorm.DB, opts ...gen.DOOption) seatSector {
	_seatSector := seatSector{}

	_seatSector.seatSectorDo.UseDB(db, opts...)
	_seatSector.seatSectorDo.UseModel(&model.SeatSector{})

	tableName := _seatSector.seatSectorDo.TableName()
	_seatSector.ALL = field.NewAsterisk(tableName)
	_seatSector.SECTORNO = field.NewInt64(tableName, "SECTORNO")
	_seatSector.NAME = field.NewString(tableName, "NAME")
	_seatSector.ENNAME = field.NewString(tableName, "EN_NAME")
	_seatSector.TYPENO = field.NewInt64(tableName, "TYPENO")
	_seatSector.ROOMNO = field.NewInt64(tableName, "ROOMNO")
	_seatSector.FLOORNO = field.NewInt64(tableName, "FLOORNO")
	_seatSector.BOOKINGYN = field.NewString(tableName, "BOOKING_YN")
	_seatSector.ASSIGNYN = field.NewString(tableName, "ASSIGN_YN")
	_seatSector.MOBILEBOOKINGYN = field.NewString(tableName, "MOBILE_BOOKING_YN")
	_seatSector.MOBILEASSIGNYN = field.NewString(tableName, "MOBILE_ASSIGN_YN")
	_seatSector.DAYFROM = field.NewInt64(tableName, "DAY_FROM")
	_seatSector.DAYTO = field.NewInt64(tableName, "DAY_TO")
	_seatSector.USEAPPROVAL = field.NewInt64(tableName, "USE_APPROVAL")
	_seatSector.MEDIABOOKINGYN = field.NewString(tableName, "MEDIA_BOOKING_YN")
	_seatSector.EQUIPBOOKINGYN = field.NewString(tableName, "EQUIP_BOOKING_YN")
	_seatSector.SECTORIMAGE = field.NewString(tableName, "SECTOR_IMAGE")
	_seatSector.SECTORIMAGE2 = field.NewString(tableName, "SECTOR_IMAGE2")

	_seatSector.fillFieldMap()

	return _seatSector
}

type seatSector struct {
	seatSectorDo

	ALL             field.Asterisk
	SECTORNO        field.Int64
	NAME            field.String
	ENNAME          field.String
	TYPENO          field.Int64
	ROOMNO          field.Int64
	FLOORNO         field.Int64
	BOOKINGYN       field.String
	ASSIGNYN        field.String
	MOBILEBOOKINGYN field.String
	MOBILEASSIGNYN  field.String
	DAYFROM         field.Int64
	DAYTO           field.Int64
	USEAPPROVAL     field.Int64
	MEDIABOOKINGYN  field.String
	EQUIPBOOKINGYN  field.String
	SECTORIMAGE     field.String
	SECTORIMAGE2    field.String

	fieldMap map[string]field.Expr
}

func (s seatSector) Table(newTableName string) *seatSector {
	s.seatSectorDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatSector) As(alias string) *seatSector {
	s.seatSectorDo.DO = *(s.seatSectorDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatSector) updateTableName(table string) *seatSector {
	s.ALL = field.NewAsterisk(table)
	s.SECTORNO = field.NewInt64(table, "SECTORNO")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")
	s.TYPENO = field.NewInt64(table, "TYPENO")
	s.ROOMNO = field.NewInt64(table, "ROOMNO")
	s.FLOORNO = field.NewInt64(table, "FLOORNO")
	s.BOOKINGYN = field.NewString(table, "BOOKING_YN")
	s.ASSIGNYN = field.NewString(table, "ASSIGN_YN")
	s.MOBILEBOOKINGYN = field.NewString(table, "MOBILE_BOOKING_YN")
	s.MOBILEASSIGNYN = field.NewString(table, "MOBILE_ASSIGN_YN")
	s.DAYFROM = field.NewInt64(table, "DAY_FROM")
	s.DAYTO = field.NewInt64(table, "DAY_TO")
	s.USEAPPROVAL = field.NewInt64(table, "USE_APPROVAL")
	s.MEDIABOOKINGYN = field.NewString(table, "MEDIA_BOOKING_YN")
	s.EQUIPBOOKINGYN = field.NewString(table, "EQUIP_BOOKING_YN")
	s.SECTORIMAGE = field.NewString(table, "SECTOR_IMAGE")
	s.SECTORIMAGE2 = field.NewString(table, "SECTOR_IMAGE2")

	s.fillFieldMap()

	return s
}

func (s *seatSector) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatSector) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["SECTORNO"] = s.SECTORNO
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
	s.fieldMap["TYPENO"] = s.TYPENO
	s.fieldMap["ROOMNO"] = s.ROOMNO
	s.fieldMap["FLOORNO"] = s.FLOORNO
	s.fieldMap["BOOKING_YN"] = s.BOOKINGYN
	s.fieldMap["ASSIGN_YN"] = s.ASSIGNYN
	s.fieldMap["MOBILE_BOOKING_YN"] = s.MOBILEBOOKINGYN
	s.fieldMap["MOBILE_ASSIGN_YN"] = s.MOBILEASSIGNYN
	s.fieldMap["DAY_FROM"] = s.DAYFROM
	s.fieldMap["DAY_TO"] = s.DAYTO
	s.fieldMap["USE_APPROVAL"] = s.USEAPPROVAL
	s.fieldMap["MEDIA_BOOKING_YN"] = s.MEDIABOOKINGYN
	s.fieldMap["EQUIP_BOOKING_YN"] = s.EQUIPBOOKINGYN
	s.fieldMap["SECTOR_IMAGE"] = s.SECTORIMAGE
	s.fieldMap["SECTOR_IMAGE2"] = s.SECTORIMAGE2
}

func (s seatSector) clone(db *gorm.DB) seatSector {
	s.seatSectorDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatSector) replaceDB(db *gorm.DB) seatSector {
	s.seatSectorDo.ReplaceDB(db)
	return s
}

type seatSectorDo struct{ gen.DO }

type ISeatSectorDo interface {
	gen.SubQuery
	Debug() ISeatSectorDo
	WithContext(ctx context.Context) ISeatSectorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatSectorDo
	WriteDB() ISeatSectorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatSectorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatSectorDo
	Not(conds ...gen.Condition) ISeatSectorDo
	Or(conds ...gen.Condition) ISeatSectorDo
	Select(conds ...field.Expr) ISeatSectorDo
	Where(conds ...gen.Condition) ISeatSectorDo
	Order(conds ...field.Expr) ISeatSectorDo
	Distinct(cols ...field.Expr) ISeatSectorDo
	Omit(cols ...field.Expr) ISeatSectorDo
	Join(table schema.Tabler, on ...field.Expr) ISeatSectorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSectorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatSectorDo
	Group(cols ...field.Expr) ISeatSectorDo
	Having(conds ...gen.Condition) ISeatSectorDo
	Limit(limit int) ISeatSectorDo
	Offset(offset int) ISeatSectorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSectorDo
	Unscoped() ISeatSectorDo
	Create(values ...*model.SeatSector) error
	CreateInBatches(values []*model.SeatSector, batchSize int) error
	Save(values ...*model.SeatSector) error
	First() (*model.SeatSector, error)
	Take() (*model.SeatSector, error)
	Last() (*model.SeatSector, error)
	Find() ([]*model.SeatSector, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSector, err error)
	FindInBatches(result *[]*model.SeatSector, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatSector) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatSectorDo
	Assign(attrs ...field.AssignExpr) ISeatSectorDo
	Joins(fields ...field.RelationField) ISeatSectorDo
	Preload(fields ...field.RelationField) ISeatSectorDo
	FirstOrInit() (*model.SeatSector, error)
	FirstOrCreate() (*model.SeatSector, error)
	FindByPage(offset int, limit int) (result []*model.SeatSector, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatSectorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatSectorDo) Debug() ISeatSectorDo {
	return s.withDO(s.DO.Debug())
}

func (s seatSectorDo) WithContext(ctx context.Context) ISeatSectorDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatSectorDo) ReadDB() ISeatSectorDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatSectorDo) WriteDB() ISeatSectorDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatSectorDo) Session(config *gorm.Session) ISeatSectorDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatSectorDo) Clauses(conds ...clause.Expression) ISeatSectorDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatSectorDo) Returning(value interface{}, columns ...string) ISeatSectorDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatSectorDo) Not(conds ...gen.Condition) ISeatSectorDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatSectorDo) Or(conds ...gen.Condition) ISeatSectorDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatSectorDo) Select(conds ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatSectorDo) Where(conds ...gen.Condition) ISeatSectorDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatSectorDo) Order(conds ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatSectorDo) Distinct(cols ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatSectorDo) Omit(cols ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatSectorDo) Join(table schema.Tabler, on ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatSectorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatSectorDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatSectorDo) Group(cols ...field.Expr) ISeatSectorDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatSectorDo) Having(conds ...gen.Condition) ISeatSectorDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatSectorDo) Limit(limit int) ISeatSectorDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatSectorDo) Offset(offset int) ISeatSectorDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatSectorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSectorDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatSectorDo) Unscoped() ISeatSectorDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatSectorDo) Create(values ...*model.SeatSector) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatSectorDo) CreateInBatches(values []*model.SeatSector, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatSectorDo) Save(values ...*model.SeatSector) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatSectorDo) First() (*model.SeatSector, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSector), nil
	}
}

func (s seatSectorDo) Take() (*model.SeatSector, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSector), nil
	}
}

func (s seatSectorDo) Last() (*model.SeatSector, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSector), nil
	}
}

func (s seatSectorDo) Find() ([]*model.SeatSector, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatSector), err
}

func (s seatSectorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSector, err error) {
	buf := make([]*model.SeatSector, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatSectorDo) FindInBatches(result *[]*model.SeatSector, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatSectorDo) Attrs(attrs ...field.AssignExpr) ISeatSectorDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatSectorDo) Assign(attrs ...field.AssignExpr) ISeatSectorDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatSectorDo) Joins(fields ...field.RelationField) ISeatSectorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatSectorDo) Preload(fields ...field.RelationField) ISeatSectorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatSectorDo) FirstOrInit() (*model.SeatSector, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSector), nil
	}
}

func (s seatSectorDo) FirstOrCreate() (*model.SeatSector, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSector), nil
	}
}

func (s seatSectorDo) FindByPage(offset int, limit int) (result []*model.SeatSector, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatSectorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatSectorDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatSectorDo) Delete(models ...*model.SeatSector) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatSectorDo) withDO(do gen.Dao) *seatSectorDo {
	s.DO = *do.(*gen.DO)
	return s
}
