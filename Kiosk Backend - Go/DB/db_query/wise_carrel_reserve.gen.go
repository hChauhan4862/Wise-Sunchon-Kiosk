// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseCarrelReserve(db *gorm.DB, opts ...gen.DOOption) wiseCarrelReserve {
	_wiseCarrelReserve := wiseCarrelReserve{}

	_wiseCarrelReserve.wiseCarrelReserveDo.UseDB(db, opts...)
	_wiseCarrelReserve.wiseCarrelReserveDo.UseModel(&model.WiseCarrelReserve{})

	tableName := _wiseCarrelReserve.wiseCarrelReserveDo.TableName()
	_wiseCarrelReserve.ALL = field.NewAsterisk(tableName)
	_wiseCarrelReserve.ReserveNo = field.NewInt64(tableName, "reserve_no")
	_wiseCarrelReserve.CarrelNo = field.NewInt64(tableName, "carrel_no")
	_wiseCarrelReserve.ReserveStat = field.NewString(tableName, "reserve_stat")
	_wiseCarrelReserve.UserID = field.NewString(tableName, "user_id")
	_wiseCarrelReserve.UseDate = field.NewString(tableName, "use_date")
	_wiseCarrelReserve.UseTime = field.NewString(tableName, "use_time")
	_wiseCarrelReserve.RegDate = field.NewString(tableName, "reg_date")
	_wiseCarrelReserve.UpdDate = field.NewString(tableName, "upd_date")
	_wiseCarrelReserve.Bigo = field.NewString(tableName, "bigo")

	_wiseCarrelReserve.fillFieldMap()

	return _wiseCarrelReserve
}

type wiseCarrelReserve struct {
	wiseCarrelReserveDo

	ALL         field.Asterisk
	ReserveNo   field.Int64
	CarrelNo    field.Int64
	ReserveStat field.String
	UserID      field.String
	UseDate     field.String
	UseTime     field.String
	RegDate     field.String
	UpdDate     field.String
	Bigo        field.String

	fieldMap map[string]field.Expr
}

func (w wiseCarrelReserve) Table(newTableName string) *wiseCarrelReserve {
	w.wiseCarrelReserveDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseCarrelReserve) As(alias string) *wiseCarrelReserve {
	w.wiseCarrelReserveDo.DO = *(w.wiseCarrelReserveDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseCarrelReserve) updateTableName(table string) *wiseCarrelReserve {
	w.ALL = field.NewAsterisk(table)
	w.ReserveNo = field.NewInt64(table, "reserve_no")
	w.CarrelNo = field.NewInt64(table, "carrel_no")
	w.ReserveStat = field.NewString(table, "reserve_stat")
	w.UserID = field.NewString(table, "user_id")
	w.UseDate = field.NewString(table, "use_date")
	w.UseTime = field.NewString(table, "use_time")
	w.RegDate = field.NewString(table, "reg_date")
	w.UpdDate = field.NewString(table, "upd_date")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseCarrelReserve) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseCarrelReserve) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["reserve_no"] = w.ReserveNo
	w.fieldMap["carrel_no"] = w.CarrelNo
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["use_date"] = w.UseDate
	w.fieldMap["use_time"] = w.UseTime
	w.fieldMap["reg_date"] = w.RegDate
	w.fieldMap["upd_date"] = w.UpdDate
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseCarrelReserve) clone(db *gorm.DB) wiseCarrelReserve {
	w.wiseCarrelReserveDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseCarrelReserve) replaceDB(db *gorm.DB) wiseCarrelReserve {
	w.wiseCarrelReserveDo.ReplaceDB(db)
	return w
}

type wiseCarrelReserveDo struct{ gen.DO }

type IWiseCarrelReserveDo interface {
	gen.SubQuery
	Debug() IWiseCarrelReserveDo
	WithContext(ctx context.Context) IWiseCarrelReserveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseCarrelReserveDo
	WriteDB() IWiseCarrelReserveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseCarrelReserveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseCarrelReserveDo
	Not(conds ...gen.Condition) IWiseCarrelReserveDo
	Or(conds ...gen.Condition) IWiseCarrelReserveDo
	Select(conds ...field.Expr) IWiseCarrelReserveDo
	Where(conds ...gen.Condition) IWiseCarrelReserveDo
	Order(conds ...field.Expr) IWiseCarrelReserveDo
	Distinct(cols ...field.Expr) IWiseCarrelReserveDo
	Omit(cols ...field.Expr) IWiseCarrelReserveDo
	Join(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo
	Group(cols ...field.Expr) IWiseCarrelReserveDo
	Having(conds ...gen.Condition) IWiseCarrelReserveDo
	Limit(limit int) IWiseCarrelReserveDo
	Offset(offset int) IWiseCarrelReserveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelReserveDo
	Unscoped() IWiseCarrelReserveDo
	Create(values ...*model.WiseCarrelReserve) error
	CreateInBatches(values []*model.WiseCarrelReserve, batchSize int) error
	Save(values ...*model.WiseCarrelReserve) error
	First() (*model.WiseCarrelReserve, error)
	Take() (*model.WiseCarrelReserve, error)
	Last() (*model.WiseCarrelReserve, error)
	Find() ([]*model.WiseCarrelReserve, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelReserve, err error)
	FindInBatches(result *[]*model.WiseCarrelReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseCarrelReserve) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseCarrelReserveDo
	Assign(attrs ...field.AssignExpr) IWiseCarrelReserveDo
	Joins(fields ...field.RelationField) IWiseCarrelReserveDo
	Preload(fields ...field.RelationField) IWiseCarrelReserveDo
	FirstOrInit() (*model.WiseCarrelReserve, error)
	FirstOrCreate() (*model.WiseCarrelReserve, error)
	FindByPage(offset int, limit int) (result []*model.WiseCarrelReserve, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseCarrelReserveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseCarrelReserveDo) Debug() IWiseCarrelReserveDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseCarrelReserveDo) WithContext(ctx context.Context) IWiseCarrelReserveDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseCarrelReserveDo) ReadDB() IWiseCarrelReserveDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseCarrelReserveDo) WriteDB() IWiseCarrelReserveDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseCarrelReserveDo) Session(config *gorm.Session) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseCarrelReserveDo) Clauses(conds ...clause.Expression) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseCarrelReserveDo) Returning(value interface{}, columns ...string) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseCarrelReserveDo) Not(conds ...gen.Condition) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseCarrelReserveDo) Or(conds ...gen.Condition) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseCarrelReserveDo) Select(conds ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseCarrelReserveDo) Where(conds ...gen.Condition) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseCarrelReserveDo) Order(conds ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseCarrelReserveDo) Distinct(cols ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseCarrelReserveDo) Omit(cols ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseCarrelReserveDo) Join(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseCarrelReserveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseCarrelReserveDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseCarrelReserveDo) Group(cols ...field.Expr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseCarrelReserveDo) Having(conds ...gen.Condition) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseCarrelReserveDo) Limit(limit int) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseCarrelReserveDo) Offset(offset int) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseCarrelReserveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseCarrelReserveDo) Unscoped() IWiseCarrelReserveDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseCarrelReserveDo) Create(values ...*model.WiseCarrelReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseCarrelReserveDo) CreateInBatches(values []*model.WiseCarrelReserve, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseCarrelReserveDo) Save(values ...*model.WiseCarrelReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseCarrelReserveDo) First() (*model.WiseCarrelReserve, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserve), nil
	}
}

func (w wiseCarrelReserveDo) Take() (*model.WiseCarrelReserve, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserve), nil
	}
}

func (w wiseCarrelReserveDo) Last() (*model.WiseCarrelReserve, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserve), nil
	}
}

func (w wiseCarrelReserveDo) Find() ([]*model.WiseCarrelReserve, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseCarrelReserve), err
}

func (w wiseCarrelReserveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelReserve, err error) {
	buf := make([]*model.WiseCarrelReserve, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseCarrelReserveDo) FindInBatches(result *[]*model.WiseCarrelReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseCarrelReserveDo) Attrs(attrs ...field.AssignExpr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseCarrelReserveDo) Assign(attrs ...field.AssignExpr) IWiseCarrelReserveDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseCarrelReserveDo) Joins(fields ...field.RelationField) IWiseCarrelReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseCarrelReserveDo) Preload(fields ...field.RelationField) IWiseCarrelReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseCarrelReserveDo) FirstOrInit() (*model.WiseCarrelReserve, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserve), nil
	}
}

func (w wiseCarrelReserveDo) FirstOrCreate() (*model.WiseCarrelReserve, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserve), nil
	}
}

func (w wiseCarrelReserveDo) FindByPage(offset int, limit int) (result []*model.WiseCarrelReserve, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseCarrelReserveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseCarrelReserveDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseCarrelReserveDo) Delete(models ...*model.WiseCarrelReserve) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseCarrelReserveDo) withDO(do gen.Dao) *wiseCarrelReserveDo {
	w.DO = *do.(*gen.DO)
	return w
}
