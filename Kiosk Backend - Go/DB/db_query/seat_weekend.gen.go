// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatWeekend(db *gorm.DB, opts ...gen.DOOption) seatWeekend {
	_seatWeekend := seatWeekend{}

	_seatWeekend.seatWeekendDo.UseDB(db, opts...)
	_seatWeekend.seatWeekendDo.UseModel(&model.SeatWeekend{})

	tableName := _seatWeekend.seatWeekendDo.TableName()
	_seatWeekend.ALL = field.NewAsterisk(tableName)
	_seatWeekend.WeekGb = field.NewString(tableName, "week_gb")
	_seatWeekend.RoomNo = field.NewInt64(tableName, "room_no")
	_seatWeekend.UseYn = field.NewString(tableName, "use_yn")
	_seatWeekend.StartTime = field.NewString(tableName, "start_time")
	_seatWeekend.EndTime = field.NewString(tableName, "end_time")
	_seatWeekend.RegDt = field.NewString(tableName, "reg_dt")
	_seatWeekend.UpdDt = field.NewString(tableName, "upd_dt")

	_seatWeekend.fillFieldMap()

	return _seatWeekend
}

type seatWeekend struct {
	seatWeekendDo

	ALL       field.Asterisk
	WeekGb    field.String
	RoomNo    field.Int64
	UseYn     field.String
	StartTime field.String
	EndTime   field.String
	RegDt     field.String
	UpdDt     field.String

	fieldMap map[string]field.Expr
}

func (s seatWeekend) Table(newTableName string) *seatWeekend {
	s.seatWeekendDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatWeekend) As(alias string) *seatWeekend {
	s.seatWeekendDo.DO = *(s.seatWeekendDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatWeekend) updateTableName(table string) *seatWeekend {
	s.ALL = field.NewAsterisk(table)
	s.WeekGb = field.NewString(table, "week_gb")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.UseYn = field.NewString(table, "use_yn")
	s.StartTime = field.NewString(table, "start_time")
	s.EndTime = field.NewString(table, "end_time")
	s.RegDt = field.NewString(table, "reg_dt")
	s.UpdDt = field.NewString(table, "upd_dt")

	s.fillFieldMap()

	return s
}

func (s *seatWeekend) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatWeekend) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["week_gb"] = s.WeekGb
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["use_yn"] = s.UseYn
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["reg_dt"] = s.RegDt
	s.fieldMap["upd_dt"] = s.UpdDt
}

func (s seatWeekend) clone(db *gorm.DB) seatWeekend {
	s.seatWeekendDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatWeekend) replaceDB(db *gorm.DB) seatWeekend {
	s.seatWeekendDo.ReplaceDB(db)
	return s
}

type seatWeekendDo struct{ gen.DO }

type ISeatWeekendDo interface {
	gen.SubQuery
	Debug() ISeatWeekendDo
	WithContext(ctx context.Context) ISeatWeekendDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatWeekendDo
	WriteDB() ISeatWeekendDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatWeekendDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatWeekendDo
	Not(conds ...gen.Condition) ISeatWeekendDo
	Or(conds ...gen.Condition) ISeatWeekendDo
	Select(conds ...field.Expr) ISeatWeekendDo
	Where(conds ...gen.Condition) ISeatWeekendDo
	Order(conds ...field.Expr) ISeatWeekendDo
	Distinct(cols ...field.Expr) ISeatWeekendDo
	Omit(cols ...field.Expr) ISeatWeekendDo
	Join(table schema.Tabler, on ...field.Expr) ISeatWeekendDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatWeekendDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatWeekendDo
	Group(cols ...field.Expr) ISeatWeekendDo
	Having(conds ...gen.Condition) ISeatWeekendDo
	Limit(limit int) ISeatWeekendDo
	Offset(offset int) ISeatWeekendDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatWeekendDo
	Unscoped() ISeatWeekendDo
	Create(values ...*model.SeatWeekend) error
	CreateInBatches(values []*model.SeatWeekend, batchSize int) error
	Save(values ...*model.SeatWeekend) error
	First() (*model.SeatWeekend, error)
	Take() (*model.SeatWeekend, error)
	Last() (*model.SeatWeekend, error)
	Find() ([]*model.SeatWeekend, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatWeekend, err error)
	FindInBatches(result *[]*model.SeatWeekend, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatWeekend) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatWeekendDo
	Assign(attrs ...field.AssignExpr) ISeatWeekendDo
	Joins(fields ...field.RelationField) ISeatWeekendDo
	Preload(fields ...field.RelationField) ISeatWeekendDo
	FirstOrInit() (*model.SeatWeekend, error)
	FirstOrCreate() (*model.SeatWeekend, error)
	FindByPage(offset int, limit int) (result []*model.SeatWeekend, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatWeekendDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatWeekendDo) Debug() ISeatWeekendDo {
	return s.withDO(s.DO.Debug())
}

func (s seatWeekendDo) WithContext(ctx context.Context) ISeatWeekendDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatWeekendDo) ReadDB() ISeatWeekendDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatWeekendDo) WriteDB() ISeatWeekendDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatWeekendDo) Session(config *gorm.Session) ISeatWeekendDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatWeekendDo) Clauses(conds ...clause.Expression) ISeatWeekendDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatWeekendDo) Returning(value interface{}, columns ...string) ISeatWeekendDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatWeekendDo) Not(conds ...gen.Condition) ISeatWeekendDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatWeekendDo) Or(conds ...gen.Condition) ISeatWeekendDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatWeekendDo) Select(conds ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatWeekendDo) Where(conds ...gen.Condition) ISeatWeekendDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatWeekendDo) Order(conds ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatWeekendDo) Distinct(cols ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatWeekendDo) Omit(cols ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatWeekendDo) Join(table schema.Tabler, on ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatWeekendDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatWeekendDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatWeekendDo) Group(cols ...field.Expr) ISeatWeekendDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatWeekendDo) Having(conds ...gen.Condition) ISeatWeekendDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatWeekendDo) Limit(limit int) ISeatWeekendDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatWeekendDo) Offset(offset int) ISeatWeekendDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatWeekendDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatWeekendDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatWeekendDo) Unscoped() ISeatWeekendDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatWeekendDo) Create(values ...*model.SeatWeekend) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatWeekendDo) CreateInBatches(values []*model.SeatWeekend, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatWeekendDo) Save(values ...*model.SeatWeekend) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatWeekendDo) First() (*model.SeatWeekend, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatWeekend), nil
	}
}

func (s seatWeekendDo) Take() (*model.SeatWeekend, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatWeekend), nil
	}
}

func (s seatWeekendDo) Last() (*model.SeatWeekend, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatWeekend), nil
	}
}

func (s seatWeekendDo) Find() ([]*model.SeatWeekend, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatWeekend), err
}

func (s seatWeekendDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatWeekend, err error) {
	buf := make([]*model.SeatWeekend, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatWeekendDo) FindInBatches(result *[]*model.SeatWeekend, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatWeekendDo) Attrs(attrs ...field.AssignExpr) ISeatWeekendDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatWeekendDo) Assign(attrs ...field.AssignExpr) ISeatWeekendDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatWeekendDo) Joins(fields ...field.RelationField) ISeatWeekendDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatWeekendDo) Preload(fields ...field.RelationField) ISeatWeekendDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatWeekendDo) FirstOrInit() (*model.SeatWeekend, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatWeekend), nil
	}
}

func (s seatWeekendDo) FirstOrCreate() (*model.SeatWeekend, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatWeekend), nil
	}
}

func (s seatWeekendDo) FindByPage(offset int, limit int) (result []*model.SeatWeekend, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatWeekendDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatWeekendDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatWeekendDo) Delete(models ...*model.SeatWeekend) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatWeekendDo) withDO(do gen.Dao) *seatWeekendDo {
	s.DO = *do.(*gen.DO)
	return s
}
