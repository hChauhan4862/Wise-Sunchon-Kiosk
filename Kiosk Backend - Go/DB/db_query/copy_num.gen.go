// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newCOPYNUM(db *gorm.DB, opts ...gen.DOOption) cOPYNUM {
	_cOPYNUM := cOPYNUM{}

	_cOPYNUM.cOPYNUMDo.UseDB(db, opts...)
	_cOPYNUM.cOPYNUMDo.UseModel(&model.COPYNUM{})

	tableName := _cOPYNUM.cOPYNUMDo.TableName()
	_cOPYNUM.ALL = field.NewAsterisk(tableName)
	_cOPYNUM.TimeNum = field.NewInt64(tableName, "time_num")

	_cOPYNUM.fillFieldMap()

	return _cOPYNUM
}

type cOPYNUM struct {
	cOPYNUMDo

	ALL     field.Asterisk
	TimeNum field.Int64

	fieldMap map[string]field.Expr
}

func (c cOPYNUM) Table(newTableName string) *cOPYNUM {
	c.cOPYNUMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cOPYNUM) As(alias string) *cOPYNUM {
	c.cOPYNUMDo.DO = *(c.cOPYNUMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cOPYNUM) updateTableName(table string) *cOPYNUM {
	c.ALL = field.NewAsterisk(table)
	c.TimeNum = field.NewInt64(table, "time_num")

	c.fillFieldMap()

	return c
}

func (c *cOPYNUM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cOPYNUM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 1)
	c.fieldMap["time_num"] = c.TimeNum
}

func (c cOPYNUM) clone(db *gorm.DB) cOPYNUM {
	c.cOPYNUMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cOPYNUM) replaceDB(db *gorm.DB) cOPYNUM {
	c.cOPYNUMDo.ReplaceDB(db)
	return c
}

type cOPYNUMDo struct{ gen.DO }

type ICOPYNUMDo interface {
	gen.SubQuery
	Debug() ICOPYNUMDo
	WithContext(ctx context.Context) ICOPYNUMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICOPYNUMDo
	WriteDB() ICOPYNUMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICOPYNUMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICOPYNUMDo
	Not(conds ...gen.Condition) ICOPYNUMDo
	Or(conds ...gen.Condition) ICOPYNUMDo
	Select(conds ...field.Expr) ICOPYNUMDo
	Where(conds ...gen.Condition) ICOPYNUMDo
	Order(conds ...field.Expr) ICOPYNUMDo
	Distinct(cols ...field.Expr) ICOPYNUMDo
	Omit(cols ...field.Expr) ICOPYNUMDo
	Join(table schema.Tabler, on ...field.Expr) ICOPYNUMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICOPYNUMDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICOPYNUMDo
	Group(cols ...field.Expr) ICOPYNUMDo
	Having(conds ...gen.Condition) ICOPYNUMDo
	Limit(limit int) ICOPYNUMDo
	Offset(offset int) ICOPYNUMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICOPYNUMDo
	Unscoped() ICOPYNUMDo
	Create(values ...*model.COPYNUM) error
	CreateInBatches(values []*model.COPYNUM, batchSize int) error
	Save(values ...*model.COPYNUM) error
	First() (*model.COPYNUM, error)
	Take() (*model.COPYNUM, error)
	Last() (*model.COPYNUM, error)
	Find() ([]*model.COPYNUM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COPYNUM, err error)
	FindInBatches(result *[]*model.COPYNUM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.COPYNUM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICOPYNUMDo
	Assign(attrs ...field.AssignExpr) ICOPYNUMDo
	Joins(fields ...field.RelationField) ICOPYNUMDo
	Preload(fields ...field.RelationField) ICOPYNUMDo
	FirstOrInit() (*model.COPYNUM, error)
	FirstOrCreate() (*model.COPYNUM, error)
	FindByPage(offset int, limit int) (result []*model.COPYNUM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICOPYNUMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cOPYNUMDo) Debug() ICOPYNUMDo {
	return c.withDO(c.DO.Debug())
}

func (c cOPYNUMDo) WithContext(ctx context.Context) ICOPYNUMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cOPYNUMDo) ReadDB() ICOPYNUMDo {
	return c.Clauses(dbresolver.Read)
}

func (c cOPYNUMDo) WriteDB() ICOPYNUMDo {
	return c.Clauses(dbresolver.Write)
}

func (c cOPYNUMDo) Session(config *gorm.Session) ICOPYNUMDo {
	return c.withDO(c.DO.Session(config))
}

func (c cOPYNUMDo) Clauses(conds ...clause.Expression) ICOPYNUMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cOPYNUMDo) Returning(value interface{}, columns ...string) ICOPYNUMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cOPYNUMDo) Not(conds ...gen.Condition) ICOPYNUMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cOPYNUMDo) Or(conds ...gen.Condition) ICOPYNUMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cOPYNUMDo) Select(conds ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cOPYNUMDo) Where(conds ...gen.Condition) ICOPYNUMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cOPYNUMDo) Order(conds ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cOPYNUMDo) Distinct(cols ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cOPYNUMDo) Omit(cols ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cOPYNUMDo) Join(table schema.Tabler, on ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cOPYNUMDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cOPYNUMDo) RightJoin(table schema.Tabler, on ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cOPYNUMDo) Group(cols ...field.Expr) ICOPYNUMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cOPYNUMDo) Having(conds ...gen.Condition) ICOPYNUMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cOPYNUMDo) Limit(limit int) ICOPYNUMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cOPYNUMDo) Offset(offset int) ICOPYNUMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cOPYNUMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICOPYNUMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cOPYNUMDo) Unscoped() ICOPYNUMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cOPYNUMDo) Create(values ...*model.COPYNUM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cOPYNUMDo) CreateInBatches(values []*model.COPYNUM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cOPYNUMDo) Save(values ...*model.COPYNUM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cOPYNUMDo) First() (*model.COPYNUM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYNUM), nil
	}
}

func (c cOPYNUMDo) Take() (*model.COPYNUM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYNUM), nil
	}
}

func (c cOPYNUMDo) Last() (*model.COPYNUM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYNUM), nil
	}
}

func (c cOPYNUMDo) Find() ([]*model.COPYNUM, error) {
	result, err := c.DO.Find()
	return result.([]*model.COPYNUM), err
}

func (c cOPYNUMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COPYNUM, err error) {
	buf := make([]*model.COPYNUM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cOPYNUMDo) FindInBatches(result *[]*model.COPYNUM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cOPYNUMDo) Attrs(attrs ...field.AssignExpr) ICOPYNUMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cOPYNUMDo) Assign(attrs ...field.AssignExpr) ICOPYNUMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cOPYNUMDo) Joins(fields ...field.RelationField) ICOPYNUMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cOPYNUMDo) Preload(fields ...field.RelationField) ICOPYNUMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cOPYNUMDo) FirstOrInit() (*model.COPYNUM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYNUM), nil
	}
}

func (c cOPYNUMDo) FirstOrCreate() (*model.COPYNUM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYNUM), nil
	}
}

func (c cOPYNUMDo) FindByPage(offset int, limit int) (result []*model.COPYNUM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cOPYNUMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cOPYNUMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cOPYNUMDo) Delete(models ...*model.COPYNUM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cOPYNUMDo) withDO(do gen.Dao) *cOPYNUMDo {
	c.DO = *do.(*gen.DO)
	return c
}
