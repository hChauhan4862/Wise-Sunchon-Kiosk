// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newUserKey(db *gorm.DB, opts ...gen.DOOption) userKey {
	_userKey := userKey{}

	_userKey.userKeyDo.UseDB(db, opts...)
	_userKey.userKeyDo.UseModel(&model.UserKey{})

	tableName := _userKey.userKeyDo.TableName()
	_userKey.ALL = field.NewAsterisk(tableName)
	_userKey.UserID = field.NewString(tableName, "user_id")
	_userKey.UserKey = field.NewString(tableName, "user_key")
	_userKey.DecodeKey = field.NewString(tableName, "decode_key")

	_userKey.fillFieldMap()

	return _userKey
}

type userKey struct {
	userKeyDo

	ALL       field.Asterisk
	UserID    field.String
	UserKey   field.String
	DecodeKey field.String

	fieldMap map[string]field.Expr
}

func (u userKey) Table(newTableName string) *userKey {
	u.userKeyDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userKey) As(alias string) *userKey {
	u.userKeyDo.DO = *(u.userKeyDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userKey) updateTableName(table string) *userKey {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewString(table, "user_id")
	u.UserKey = field.NewString(table, "user_key")
	u.DecodeKey = field.NewString(table, "decode_key")

	u.fillFieldMap()

	return u
}

func (u *userKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userKey) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["user_key"] = u.UserKey
	u.fieldMap["decode_key"] = u.DecodeKey
}

func (u userKey) clone(db *gorm.DB) userKey {
	u.userKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userKey) replaceDB(db *gorm.DB) userKey {
	u.userKeyDo.ReplaceDB(db)
	return u
}

type userKeyDo struct{ gen.DO }

type IUserKeyDo interface {
	gen.SubQuery
	Debug() IUserKeyDo
	WithContext(ctx context.Context) IUserKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserKeyDo
	WriteDB() IUserKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserKeyDo
	Not(conds ...gen.Condition) IUserKeyDo
	Or(conds ...gen.Condition) IUserKeyDo
	Select(conds ...field.Expr) IUserKeyDo
	Where(conds ...gen.Condition) IUserKeyDo
	Order(conds ...field.Expr) IUserKeyDo
	Distinct(cols ...field.Expr) IUserKeyDo
	Omit(cols ...field.Expr) IUserKeyDo
	Join(table schema.Tabler, on ...field.Expr) IUserKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserKeyDo
	Group(cols ...field.Expr) IUserKeyDo
	Having(conds ...gen.Condition) IUserKeyDo
	Limit(limit int) IUserKeyDo
	Offset(offset int) IUserKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserKeyDo
	Unscoped() IUserKeyDo
	Create(values ...*model.UserKey) error
	CreateInBatches(values []*model.UserKey, batchSize int) error
	Save(values ...*model.UserKey) error
	First() (*model.UserKey, error)
	Take() (*model.UserKey, error)
	Last() (*model.UserKey, error)
	Find() ([]*model.UserKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserKey, err error)
	FindInBatches(result *[]*model.UserKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserKeyDo
	Assign(attrs ...field.AssignExpr) IUserKeyDo
	Joins(fields ...field.RelationField) IUserKeyDo
	Preload(fields ...field.RelationField) IUserKeyDo
	FirstOrInit() (*model.UserKey, error)
	FirstOrCreate() (*model.UserKey, error)
	FindByPage(offset int, limit int) (result []*model.UserKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userKeyDo) Debug() IUserKeyDo {
	return u.withDO(u.DO.Debug())
}

func (u userKeyDo) WithContext(ctx context.Context) IUserKeyDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userKeyDo) ReadDB() IUserKeyDo {
	return u.Clauses(dbresolver.Read)
}

func (u userKeyDo) WriteDB() IUserKeyDo {
	return u.Clauses(dbresolver.Write)
}

func (u userKeyDo) Session(config *gorm.Session) IUserKeyDo {
	return u.withDO(u.DO.Session(config))
}

func (u userKeyDo) Clauses(conds ...clause.Expression) IUserKeyDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userKeyDo) Returning(value interface{}, columns ...string) IUserKeyDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userKeyDo) Not(conds ...gen.Condition) IUserKeyDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userKeyDo) Or(conds ...gen.Condition) IUserKeyDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userKeyDo) Select(conds ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userKeyDo) Where(conds ...gen.Condition) IUserKeyDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userKeyDo) Order(conds ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userKeyDo) Distinct(cols ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userKeyDo) Omit(cols ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userKeyDo) Join(table schema.Tabler, on ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userKeyDo) Group(cols ...field.Expr) IUserKeyDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userKeyDo) Having(conds ...gen.Condition) IUserKeyDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userKeyDo) Limit(limit int) IUserKeyDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userKeyDo) Offset(offset int) IUserKeyDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserKeyDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userKeyDo) Unscoped() IUserKeyDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userKeyDo) Create(values ...*model.UserKey) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userKeyDo) CreateInBatches(values []*model.UserKey, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userKeyDo) Save(values ...*model.UserKey) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userKeyDo) First() (*model.UserKey, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserKey), nil
	}
}

func (u userKeyDo) Take() (*model.UserKey, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserKey), nil
	}
}

func (u userKeyDo) Last() (*model.UserKey, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserKey), nil
	}
}

func (u userKeyDo) Find() ([]*model.UserKey, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserKey), err
}

func (u userKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserKey, err error) {
	buf := make([]*model.UserKey, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userKeyDo) FindInBatches(result *[]*model.UserKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userKeyDo) Attrs(attrs ...field.AssignExpr) IUserKeyDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userKeyDo) Assign(attrs ...field.AssignExpr) IUserKeyDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userKeyDo) Joins(fields ...field.RelationField) IUserKeyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userKeyDo) Preload(fields ...field.RelationField) IUserKeyDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userKeyDo) FirstOrInit() (*model.UserKey, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserKey), nil
	}
}

func (u userKeyDo) FirstOrCreate() (*model.UserKey, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserKey), nil
	}
}

func (u userKeyDo) FindByPage(offset int, limit int) (result []*model.UserKey, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userKeyDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userKeyDo) Delete(models ...*model.UserKey) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userKeyDo) withDO(do gen.Dao) *userKeyDo {
	u.DO = *do.(*gen.DO)
	return u
}
