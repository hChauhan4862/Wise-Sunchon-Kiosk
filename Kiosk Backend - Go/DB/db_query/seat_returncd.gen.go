// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatReturncd(db *gorm.DB, opts ...gen.DOOption) seatReturncd {
	_seatReturncd := seatReturncd{}

	_seatReturncd.seatReturncdDo.UseDB(db, opts...)
	_seatReturncd.seatReturncdDo.UseModel(&model.SeatReturncd{})

	tableName := _seatReturncd.seatReturncdDo.TableName()
	_seatReturncd.ALL = field.NewAsterisk(tableName)
	_seatReturncd.EXPIREREASON = field.NewInt64(tableName, "EXPIREREASON")
	_seatReturncd.NAME = field.NewString(tableName, "NAME")
	_seatReturncd.ENNAME = field.NewString(tableName, "EN_NAME")

	_seatReturncd.fillFieldMap()

	return _seatReturncd
}

type seatReturncd struct {
	seatReturncdDo

	ALL          field.Asterisk
	EXPIREREASON field.Int64
	NAME         field.String
	ENNAME       field.String

	fieldMap map[string]field.Expr
}

func (s seatReturncd) Table(newTableName string) *seatReturncd {
	s.seatReturncdDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatReturncd) As(alias string) *seatReturncd {
	s.seatReturncdDo.DO = *(s.seatReturncdDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatReturncd) updateTableName(table string) *seatReturncd {
	s.ALL = field.NewAsterisk(table)
	s.EXPIREREASON = field.NewInt64(table, "EXPIREREASON")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")

	s.fillFieldMap()

	return s
}

func (s *seatReturncd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatReturncd) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["EXPIREREASON"] = s.EXPIREREASON
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
}

func (s seatReturncd) clone(db *gorm.DB) seatReturncd {
	s.seatReturncdDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatReturncd) replaceDB(db *gorm.DB) seatReturncd {
	s.seatReturncdDo.ReplaceDB(db)
	return s
}

type seatReturncdDo struct{ gen.DO }

type ISeatReturncdDo interface {
	gen.SubQuery
	Debug() ISeatReturncdDo
	WithContext(ctx context.Context) ISeatReturncdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatReturncdDo
	WriteDB() ISeatReturncdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatReturncdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatReturncdDo
	Not(conds ...gen.Condition) ISeatReturncdDo
	Or(conds ...gen.Condition) ISeatReturncdDo
	Select(conds ...field.Expr) ISeatReturncdDo
	Where(conds ...gen.Condition) ISeatReturncdDo
	Order(conds ...field.Expr) ISeatReturncdDo
	Distinct(cols ...field.Expr) ISeatReturncdDo
	Omit(cols ...field.Expr) ISeatReturncdDo
	Join(table schema.Tabler, on ...field.Expr) ISeatReturncdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatReturncdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatReturncdDo
	Group(cols ...field.Expr) ISeatReturncdDo
	Having(conds ...gen.Condition) ISeatReturncdDo
	Limit(limit int) ISeatReturncdDo
	Offset(offset int) ISeatReturncdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatReturncdDo
	Unscoped() ISeatReturncdDo
	Create(values ...*model.SeatReturncd) error
	CreateInBatches(values []*model.SeatReturncd, batchSize int) error
	Save(values ...*model.SeatReturncd) error
	First() (*model.SeatReturncd, error)
	Take() (*model.SeatReturncd, error)
	Last() (*model.SeatReturncd, error)
	Find() ([]*model.SeatReturncd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatReturncd, err error)
	FindInBatches(result *[]*model.SeatReturncd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatReturncd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatReturncdDo
	Assign(attrs ...field.AssignExpr) ISeatReturncdDo
	Joins(fields ...field.RelationField) ISeatReturncdDo
	Preload(fields ...field.RelationField) ISeatReturncdDo
	FirstOrInit() (*model.SeatReturncd, error)
	FirstOrCreate() (*model.SeatReturncd, error)
	FindByPage(offset int, limit int) (result []*model.SeatReturncd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatReturncdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatReturncdDo) Debug() ISeatReturncdDo {
	return s.withDO(s.DO.Debug())
}

func (s seatReturncdDo) WithContext(ctx context.Context) ISeatReturncdDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatReturncdDo) ReadDB() ISeatReturncdDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatReturncdDo) WriteDB() ISeatReturncdDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatReturncdDo) Session(config *gorm.Session) ISeatReturncdDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatReturncdDo) Clauses(conds ...clause.Expression) ISeatReturncdDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatReturncdDo) Returning(value interface{}, columns ...string) ISeatReturncdDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatReturncdDo) Not(conds ...gen.Condition) ISeatReturncdDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatReturncdDo) Or(conds ...gen.Condition) ISeatReturncdDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatReturncdDo) Select(conds ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatReturncdDo) Where(conds ...gen.Condition) ISeatReturncdDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatReturncdDo) Order(conds ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatReturncdDo) Distinct(cols ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatReturncdDo) Omit(cols ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatReturncdDo) Join(table schema.Tabler, on ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatReturncdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatReturncdDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatReturncdDo) Group(cols ...field.Expr) ISeatReturncdDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatReturncdDo) Having(conds ...gen.Condition) ISeatReturncdDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatReturncdDo) Limit(limit int) ISeatReturncdDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatReturncdDo) Offset(offset int) ISeatReturncdDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatReturncdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatReturncdDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatReturncdDo) Unscoped() ISeatReturncdDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatReturncdDo) Create(values ...*model.SeatReturncd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatReturncdDo) CreateInBatches(values []*model.SeatReturncd, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatReturncdDo) Save(values ...*model.SeatReturncd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatReturncdDo) First() (*model.SeatReturncd, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReturncd), nil
	}
}

func (s seatReturncdDo) Take() (*model.SeatReturncd, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReturncd), nil
	}
}

func (s seatReturncdDo) Last() (*model.SeatReturncd, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReturncd), nil
	}
}

func (s seatReturncdDo) Find() ([]*model.SeatReturncd, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatReturncd), err
}

func (s seatReturncdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatReturncd, err error) {
	buf := make([]*model.SeatReturncd, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatReturncdDo) FindInBatches(result *[]*model.SeatReturncd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatReturncdDo) Attrs(attrs ...field.AssignExpr) ISeatReturncdDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatReturncdDo) Assign(attrs ...field.AssignExpr) ISeatReturncdDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatReturncdDo) Joins(fields ...field.RelationField) ISeatReturncdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatReturncdDo) Preload(fields ...field.RelationField) ISeatReturncdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatReturncdDo) FirstOrInit() (*model.SeatReturncd, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReturncd), nil
	}
}

func (s seatReturncdDo) FirstOrCreate() (*model.SeatReturncd, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatReturncd), nil
	}
}

func (s seatReturncdDo) FindByPage(offset int, limit int) (result []*model.SeatReturncd, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatReturncdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatReturncdDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatReturncdDo) Delete(models ...*model.SeatReturncd) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatReturncdDo) withDO(do gen.Dao) *seatReturncdDo {
	s.DO = *do.(*gen.DO)
	return s
}
