// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_view_seat_booking_3day(db *gorm.DB, opts ...gen.DOOption) hCV_view_seat_booking_3day {
	_hCV_view_seat_booking_3day := hCV_view_seat_booking_3day{}

	_hCV_view_seat_booking_3day.hCV_view_seat_booking_3dayDo.UseDB(db, opts...)
	_hCV_view_seat_booking_3day.hCV_view_seat_booking_3dayDo.UseModel(&model.HCV_view_seat_booking_3day{})

	tableName := _hCV_view_seat_booking_3day.hCV_view_seat_booking_3dayDo.TableName()
	_hCV_view_seat_booking_3day.ALL = field.NewAsterisk(tableName)
	_hCV_view_seat_booking_3day.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_hCV_view_seat_booking_3day.STATUS = field.NewInt64(tableName, "STATUS")
	_hCV_view_seat_booking_3day.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")
	_hCV_view_seat_booking_3day.USERID = field.NewString(tableName, "USERID")
	_hCV_view_seat_booking_3day.SEATNO = field.NewInt64(tableName, "SEATNO")
	_hCV_view_seat_booking_3day.ISCANCELED = field.NewInt64(tableName, "ISCANCELED")
	_hCV_view_seat_booking_3day.ISSUEFROM = field.NewInt64(tableName, "ISSUEFROM")
	_hCV_view_seat_booking_3day.ISSUEDETAIL = field.NewString(tableName, "ISSUEDETAIL")
	_hCV_view_seat_booking_3day.USESTART = field.NewTime(tableName, "USESTART")
	_hCV_view_seat_booking_3day.USEEXPIRE = field.NewTime(tableName, "USEEXPIRE")
	_hCV_view_seat_booking_3day.EXPIREREASON = field.NewInt64(tableName, "EXPIREREASON")
	_hCV_view_seat_booking_3day.QUOTAMIN = field.NewInt64(tableName, "QUOTAMIN")
	_hCV_view_seat_booking_3day.PRINTCNT = field.NewInt64(tableName, "PRINTCNT")
	_hCV_view_seat_booking_3day.REGTIME = field.NewTime(tableName, "REGTIME")
	_hCV_view_seat_booking_3day.EXTENDMIN = field.NewInt64(tableName, "EXTEND_MIN")
	_hCV_view_seat_booking_3day.EXTENDCNT = field.NewInt64(tableName, "EXTEND_CNT")
	_hCV_view_seat_booking_3day.STARTTIME = field.NewTime(tableName, "STARTTIME")
	_hCV_view_seat_booking_3day.RETURNTIME = field.NewTime(tableName, "RETURNTIME")
	_hCV_view_seat_booking_3day.USERNAME = field.NewString(tableName, "USER_NAME")
	_hCV_view_seat_booking_3day.USERPOSITION = field.NewString(tableName, "USER_POSITION")
	_hCV_view_seat_booking_3day.STATUSCODE = field.NewString(tableName, "STATUS_CODE")
	_hCV_view_seat_booking_3day.GRADECODE = field.NewString(tableName, "GRADE_CODE")
	_hCV_view_seat_booking_3day.CAMPUSDIV = field.NewString(tableName, "CAMPUS_DIV")
	_hCV_view_seat_booking_3day.COMPANYCODE = field.NewString(tableName, "COMPANY_CODE")
	_hCV_view_seat_booking_3day.DEPTCODE = field.NewString(tableName, "DEPT_CODE")
	_hCV_view_seat_booking_3day.MAJORCODE = field.NewString(tableName, "MAJOR_CODE")
	_hCV_view_seat_booking_3day.GATEOUTTIME = field.NewTime(tableName, "GATEOUTTIME")
	_hCV_view_seat_booking_3day.ISADMINBOOKING = field.NewInt64(tableName, "ISADMINBOOKING")
	_hCV_view_seat_booking_3day.CHECKGATEINTIME = field.NewTime(tableName, "CHECK_GATEINTIME")
	_hCV_view_seat_booking_3day.CHECKGATEIN = field.NewInt64(tableName, "CHECK_GATEIN")
	_hCV_view_seat_booking_3day.MOBILE = field.NewString(tableName, "MOBILE")
	_hCV_view_seat_booking_3day.PCLOGINCHECKSTATUS = field.NewInt64(tableName, "PCLOGIN_CHECK_STATUS")
	_hCV_view_seat_booking_3day.EXTENDMSGSTATUS = field.NewInt64(tableName, "EXTEND_MSG_STATUS")
	_hCV_view_seat_booking_3day.ISSUETYPENO = field.NewInt64(tableName, "ISSUE_TYPE_NO")
	_hCV_view_seat_booking_3day.BEFORESEATRETURNSTATUS = field.NewInt64(tableName, "BEFORE_SEAT_RETURN_STATUS")

	_hCV_view_seat_booking_3day.fillFieldMap()

	return _hCV_view_seat_booking_3day
}

type hCV_view_seat_booking_3day struct {
	hCV_view_seat_booking_3dayDo

	ALL                    field.Asterisk
	BSEQNO                 field.Int64
	STATUS                 field.Int64
	SCHOOLNO               field.String
	USERID                 field.String
	SEATNO                 field.Int64
	ISCANCELED             field.Int64
	ISSUEFROM              field.Int64
	ISSUEDETAIL            field.String
	USESTART               field.Time
	USEEXPIRE              field.Time
	EXPIREREASON           field.Int64
	QUOTAMIN               field.Int64
	PRINTCNT               field.Int64
	REGTIME                field.Time
	EXTENDMIN              field.Int64
	EXTENDCNT              field.Int64
	STARTTIME              field.Time
	RETURNTIME             field.Time
	USERNAME               field.String
	USERPOSITION           field.String
	STATUSCODE             field.String
	GRADECODE              field.String
	CAMPUSDIV              field.String
	COMPANYCODE            field.String
	DEPTCODE               field.String
	MAJORCODE              field.String
	GATEOUTTIME            field.Time
	ISADMINBOOKING         field.Int64
	CHECKGATEINTIME        field.Time
	CHECKGATEIN            field.Int64
	MOBILE                 field.String
	PCLOGINCHECKSTATUS     field.Int64
	EXTENDMSGSTATUS        field.Int64
	ISSUETYPENO            field.Int64
	BEFORESEATRETURNSTATUS field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_view_seat_booking_3day) Table(newTableName string) *hCV_view_seat_booking_3day {
	h.hCV_view_seat_booking_3dayDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_view_seat_booking_3day) As(alias string) *hCV_view_seat_booking_3day {
	h.hCV_view_seat_booking_3dayDo.DO = *(h.hCV_view_seat_booking_3dayDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_view_seat_booking_3day) updateTableName(table string) *hCV_view_seat_booking_3day {
	h.ALL = field.NewAsterisk(table)
	h.BSEQNO = field.NewInt64(table, "BSEQNO")
	h.STATUS = field.NewInt64(table, "STATUS")
	h.SCHOOLNO = field.NewString(table, "SCHOOLNO")
	h.USERID = field.NewString(table, "USERID")
	h.SEATNO = field.NewInt64(table, "SEATNO")
	h.ISCANCELED = field.NewInt64(table, "ISCANCELED")
	h.ISSUEFROM = field.NewInt64(table, "ISSUEFROM")
	h.ISSUEDETAIL = field.NewString(table, "ISSUEDETAIL")
	h.USESTART = field.NewTime(table, "USESTART")
	h.USEEXPIRE = field.NewTime(table, "USEEXPIRE")
	h.EXPIREREASON = field.NewInt64(table, "EXPIREREASON")
	h.QUOTAMIN = field.NewInt64(table, "QUOTAMIN")
	h.PRINTCNT = field.NewInt64(table, "PRINTCNT")
	h.REGTIME = field.NewTime(table, "REGTIME")
	h.EXTENDMIN = field.NewInt64(table, "EXTEND_MIN")
	h.EXTENDCNT = field.NewInt64(table, "EXTEND_CNT")
	h.STARTTIME = field.NewTime(table, "STARTTIME")
	h.RETURNTIME = field.NewTime(table, "RETURNTIME")
	h.USERNAME = field.NewString(table, "USER_NAME")
	h.USERPOSITION = field.NewString(table, "USER_POSITION")
	h.STATUSCODE = field.NewString(table, "STATUS_CODE")
	h.GRADECODE = field.NewString(table, "GRADE_CODE")
	h.CAMPUSDIV = field.NewString(table, "CAMPUS_DIV")
	h.COMPANYCODE = field.NewString(table, "COMPANY_CODE")
	h.DEPTCODE = field.NewString(table, "DEPT_CODE")
	h.MAJORCODE = field.NewString(table, "MAJOR_CODE")
	h.GATEOUTTIME = field.NewTime(table, "GATEOUTTIME")
	h.ISADMINBOOKING = field.NewInt64(table, "ISADMINBOOKING")
	h.CHECKGATEINTIME = field.NewTime(table, "CHECK_GATEINTIME")
	h.CHECKGATEIN = field.NewInt64(table, "CHECK_GATEIN")
	h.MOBILE = field.NewString(table, "MOBILE")
	h.PCLOGINCHECKSTATUS = field.NewInt64(table, "PCLOGIN_CHECK_STATUS")
	h.EXTENDMSGSTATUS = field.NewInt64(table, "EXTEND_MSG_STATUS")
	h.ISSUETYPENO = field.NewInt64(table, "ISSUE_TYPE_NO")
	h.BEFORESEATRETURNSTATUS = field.NewInt64(table, "BEFORE_SEAT_RETURN_STATUS")

	h.fillFieldMap()

	return h
}

func (h *hCV_view_seat_booking_3day) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_view_seat_booking_3day) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 35)
	h.fieldMap["BSEQNO"] = h.BSEQNO
	h.fieldMap["STATUS"] = h.STATUS
	h.fieldMap["SCHOOLNO"] = h.SCHOOLNO
	h.fieldMap["USERID"] = h.USERID
	h.fieldMap["SEATNO"] = h.SEATNO
	h.fieldMap["ISCANCELED"] = h.ISCANCELED
	h.fieldMap["ISSUEFROM"] = h.ISSUEFROM
	h.fieldMap["ISSUEDETAIL"] = h.ISSUEDETAIL
	h.fieldMap["USESTART"] = h.USESTART
	h.fieldMap["USEEXPIRE"] = h.USEEXPIRE
	h.fieldMap["EXPIREREASON"] = h.EXPIREREASON
	h.fieldMap["QUOTAMIN"] = h.QUOTAMIN
	h.fieldMap["PRINTCNT"] = h.PRINTCNT
	h.fieldMap["REGTIME"] = h.REGTIME
	h.fieldMap["EXTEND_MIN"] = h.EXTENDMIN
	h.fieldMap["EXTEND_CNT"] = h.EXTENDCNT
	h.fieldMap["STARTTIME"] = h.STARTTIME
	h.fieldMap["RETURNTIME"] = h.RETURNTIME
	h.fieldMap["USER_NAME"] = h.USERNAME
	h.fieldMap["USER_POSITION"] = h.USERPOSITION
	h.fieldMap["STATUS_CODE"] = h.STATUSCODE
	h.fieldMap["GRADE_CODE"] = h.GRADECODE
	h.fieldMap["CAMPUS_DIV"] = h.CAMPUSDIV
	h.fieldMap["COMPANY_CODE"] = h.COMPANYCODE
	h.fieldMap["DEPT_CODE"] = h.DEPTCODE
	h.fieldMap["MAJOR_CODE"] = h.MAJORCODE
	h.fieldMap["GATEOUTTIME"] = h.GATEOUTTIME
	h.fieldMap["ISADMINBOOKING"] = h.ISADMINBOOKING
	h.fieldMap["CHECK_GATEINTIME"] = h.CHECKGATEINTIME
	h.fieldMap["CHECK_GATEIN"] = h.CHECKGATEIN
	h.fieldMap["MOBILE"] = h.MOBILE
	h.fieldMap["PCLOGIN_CHECK_STATUS"] = h.PCLOGINCHECKSTATUS
	h.fieldMap["EXTEND_MSG_STATUS"] = h.EXTENDMSGSTATUS
	h.fieldMap["ISSUE_TYPE_NO"] = h.ISSUETYPENO
	h.fieldMap["BEFORE_SEAT_RETURN_STATUS"] = h.BEFORESEATRETURNSTATUS
}

func (h hCV_view_seat_booking_3day) clone(db *gorm.DB) hCV_view_seat_booking_3day {
	h.hCV_view_seat_booking_3dayDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_view_seat_booking_3day) replaceDB(db *gorm.DB) hCV_view_seat_booking_3day {
	h.hCV_view_seat_booking_3dayDo.ReplaceDB(db)
	return h
}

type hCV_view_seat_booking_3dayDo struct{ gen.DO }

type IHCV_view_seat_booking_3dayDo interface {
	gen.SubQuery
	Debug() IHCV_view_seat_booking_3dayDo
	WithContext(ctx context.Context) IHCV_view_seat_booking_3dayDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_view_seat_booking_3dayDo
	WriteDB() IHCV_view_seat_booking_3dayDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_view_seat_booking_3dayDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_view_seat_booking_3dayDo
	Not(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo
	Or(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo
	Select(conds ...field.Expr) IHCV_view_seat_booking_3dayDo
	Where(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo
	Order(conds ...field.Expr) IHCV_view_seat_booking_3dayDo
	Distinct(cols ...field.Expr) IHCV_view_seat_booking_3dayDo
	Omit(cols ...field.Expr) IHCV_view_seat_booking_3dayDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo
	Group(cols ...field.Expr) IHCV_view_seat_booking_3dayDo
	Having(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo
	Limit(limit int) IHCV_view_seat_booking_3dayDo
	Offset(offset int) IHCV_view_seat_booking_3dayDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_booking_3dayDo
	Unscoped() IHCV_view_seat_booking_3dayDo
	Create(values ...*model.HCV_view_seat_booking_3day) error
	CreateInBatches(values []*model.HCV_view_seat_booking_3day, batchSize int) error
	Save(values ...*model.HCV_view_seat_booking_3day) error
	First() (*model.HCV_view_seat_booking_3day, error)
	Take() (*model.HCV_view_seat_booking_3day, error)
	Last() (*model.HCV_view_seat_booking_3day, error)
	Find() ([]*model.HCV_view_seat_booking_3day, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_booking_3day, err error)
	FindInBatches(result *[]*model.HCV_view_seat_booking_3day, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_view_seat_booking_3day) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_view_seat_booking_3dayDo
	Assign(attrs ...field.AssignExpr) IHCV_view_seat_booking_3dayDo
	Joins(fields ...field.RelationField) IHCV_view_seat_booking_3dayDo
	Preload(fields ...field.RelationField) IHCV_view_seat_booking_3dayDo
	FirstOrInit() (*model.HCV_view_seat_booking_3day, error)
	FirstOrCreate() (*model.HCV_view_seat_booking_3day, error)
	FindByPage(offset int, limit int) (result []*model.HCV_view_seat_booking_3day, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_view_seat_booking_3dayDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_view_seat_booking_3dayDo) Debug() IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_view_seat_booking_3dayDo) WithContext(ctx context.Context) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_view_seat_booking_3dayDo) ReadDB() IHCV_view_seat_booking_3dayDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_view_seat_booking_3dayDo) WriteDB() IHCV_view_seat_booking_3dayDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_view_seat_booking_3dayDo) Session(config *gorm.Session) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_view_seat_booking_3dayDo) Clauses(conds ...clause.Expression) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Returning(value interface{}, columns ...string) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_view_seat_booking_3dayDo) Not(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Or(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Select(conds ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Where(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Order(conds ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Distinct(cols ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_view_seat_booking_3dayDo) Omit(cols ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_view_seat_booking_3dayDo) Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_view_seat_booking_3dayDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_view_seat_booking_3dayDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_view_seat_booking_3dayDo) Group(cols ...field.Expr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_view_seat_booking_3dayDo) Having(conds ...gen.Condition) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_view_seat_booking_3dayDo) Limit(limit int) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_view_seat_booking_3dayDo) Offset(offset int) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_view_seat_booking_3dayDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_view_seat_booking_3dayDo) Unscoped() IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_view_seat_booking_3dayDo) Create(values ...*model.HCV_view_seat_booking_3day) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_view_seat_booking_3dayDo) CreateInBatches(values []*model.HCV_view_seat_booking_3day, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_view_seat_booking_3dayDo) Save(values ...*model.HCV_view_seat_booking_3day) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_view_seat_booking_3dayDo) First() (*model.HCV_view_seat_booking_3day, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_booking_3day), nil
	}
}

func (h hCV_view_seat_booking_3dayDo) Take() (*model.HCV_view_seat_booking_3day, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_booking_3day), nil
	}
}

func (h hCV_view_seat_booking_3dayDo) Last() (*model.HCV_view_seat_booking_3day, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_booking_3day), nil
	}
}

func (h hCV_view_seat_booking_3dayDo) Find() ([]*model.HCV_view_seat_booking_3day, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_view_seat_booking_3day), err
}

func (h hCV_view_seat_booking_3dayDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_booking_3day, err error) {
	buf := make([]*model.HCV_view_seat_booking_3day, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_view_seat_booking_3dayDo) FindInBatches(result *[]*model.HCV_view_seat_booking_3day, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_view_seat_booking_3dayDo) Attrs(attrs ...field.AssignExpr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_view_seat_booking_3dayDo) Assign(attrs ...field.AssignExpr) IHCV_view_seat_booking_3dayDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_view_seat_booking_3dayDo) Joins(fields ...field.RelationField) IHCV_view_seat_booking_3dayDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_view_seat_booking_3dayDo) Preload(fields ...field.RelationField) IHCV_view_seat_booking_3dayDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_view_seat_booking_3dayDo) FirstOrInit() (*model.HCV_view_seat_booking_3day, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_booking_3day), nil
	}
}

func (h hCV_view_seat_booking_3dayDo) FirstOrCreate() (*model.HCV_view_seat_booking_3day, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_booking_3day), nil
	}
}

func (h hCV_view_seat_booking_3dayDo) FindByPage(offset int, limit int) (result []*model.HCV_view_seat_booking_3day, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_view_seat_booking_3dayDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_view_seat_booking_3dayDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_view_seat_booking_3dayDo) Delete(models ...*model.HCV_view_seat_booking_3day) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_view_seat_booking_3dayDo) withDO(do gen.Dao) *hCV_view_seat_booking_3dayDo {
	h.DO = *do.(*gen.DO)
	return h
}
