// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newROOMGB(db *gorm.DB, opts ...gen.DOOption) rOOMGB {
	_rOOMGB := rOOMGB{}

	_rOOMGB.rOOMGBDo.UseDB(db, opts...)
	_rOOMGB.rOOMGBDo.UseModel(&model.ROOMGB{})

	tableName := _rOOMGB.rOOMGBDo.TableName()
	_rOOMGB.ALL = field.NewAsterisk(tableName)
	_rOOMGB.ROOMGB = field.NewString(tableName, "ROOM_GB")
	_rOOMGB.ROOMNO = field.NewString(tableName, "ROOM_NO")

	_rOOMGB.fillFieldMap()

	return _rOOMGB
}

type rOOMGB struct {
	rOOMGBDo

	ALL    field.Asterisk
	ROOMGB field.String
	ROOMNO field.String

	fieldMap map[string]field.Expr
}

func (r rOOMGB) Table(newTableName string) *rOOMGB {
	r.rOOMGBDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rOOMGB) As(alias string) *rOOMGB {
	r.rOOMGBDo.DO = *(r.rOOMGBDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rOOMGB) updateTableName(table string) *rOOMGB {
	r.ALL = field.NewAsterisk(table)
	r.ROOMGB = field.NewString(table, "ROOM_GB")
	r.ROOMNO = field.NewString(table, "ROOM_NO")

	r.fillFieldMap()

	return r
}

func (r *rOOMGB) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rOOMGB) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["ROOM_GB"] = r.ROOMGB
	r.fieldMap["ROOM_NO"] = r.ROOMNO
}

func (r rOOMGB) clone(db *gorm.DB) rOOMGB {
	r.rOOMGBDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rOOMGB) replaceDB(db *gorm.DB) rOOMGB {
	r.rOOMGBDo.ReplaceDB(db)
	return r
}

type rOOMGBDo struct{ gen.DO }

type IROOMGBDo interface {
	gen.SubQuery
	Debug() IROOMGBDo
	WithContext(ctx context.Context) IROOMGBDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IROOMGBDo
	WriteDB() IROOMGBDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IROOMGBDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IROOMGBDo
	Not(conds ...gen.Condition) IROOMGBDo
	Or(conds ...gen.Condition) IROOMGBDo
	Select(conds ...field.Expr) IROOMGBDo
	Where(conds ...gen.Condition) IROOMGBDo
	Order(conds ...field.Expr) IROOMGBDo
	Distinct(cols ...field.Expr) IROOMGBDo
	Omit(cols ...field.Expr) IROOMGBDo
	Join(table schema.Tabler, on ...field.Expr) IROOMGBDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IROOMGBDo
	RightJoin(table schema.Tabler, on ...field.Expr) IROOMGBDo
	Group(cols ...field.Expr) IROOMGBDo
	Having(conds ...gen.Condition) IROOMGBDo
	Limit(limit int) IROOMGBDo
	Offset(offset int) IROOMGBDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IROOMGBDo
	Unscoped() IROOMGBDo
	Create(values ...*model.ROOMGB) error
	CreateInBatches(values []*model.ROOMGB, batchSize int) error
	Save(values ...*model.ROOMGB) error
	First() (*model.ROOMGB, error)
	Take() (*model.ROOMGB, error)
	Last() (*model.ROOMGB, error)
	Find() ([]*model.ROOMGB, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ROOMGB, err error)
	FindInBatches(result *[]*model.ROOMGB, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ROOMGB) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IROOMGBDo
	Assign(attrs ...field.AssignExpr) IROOMGBDo
	Joins(fields ...field.RelationField) IROOMGBDo
	Preload(fields ...field.RelationField) IROOMGBDo
	FirstOrInit() (*model.ROOMGB, error)
	FirstOrCreate() (*model.ROOMGB, error)
	FindByPage(offset int, limit int) (result []*model.ROOMGB, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IROOMGBDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r rOOMGBDo) Debug() IROOMGBDo {
	return r.withDO(r.DO.Debug())
}

func (r rOOMGBDo) WithContext(ctx context.Context) IROOMGBDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rOOMGBDo) ReadDB() IROOMGBDo {
	return r.Clauses(dbresolver.Read)
}

func (r rOOMGBDo) WriteDB() IROOMGBDo {
	return r.Clauses(dbresolver.Write)
}

func (r rOOMGBDo) Session(config *gorm.Session) IROOMGBDo {
	return r.withDO(r.DO.Session(config))
}

func (r rOOMGBDo) Clauses(conds ...clause.Expression) IROOMGBDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rOOMGBDo) Returning(value interface{}, columns ...string) IROOMGBDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rOOMGBDo) Not(conds ...gen.Condition) IROOMGBDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rOOMGBDo) Or(conds ...gen.Condition) IROOMGBDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rOOMGBDo) Select(conds ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rOOMGBDo) Where(conds ...gen.Condition) IROOMGBDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rOOMGBDo) Order(conds ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rOOMGBDo) Distinct(cols ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rOOMGBDo) Omit(cols ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rOOMGBDo) Join(table schema.Tabler, on ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rOOMGBDo) LeftJoin(table schema.Tabler, on ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rOOMGBDo) RightJoin(table schema.Tabler, on ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rOOMGBDo) Group(cols ...field.Expr) IROOMGBDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rOOMGBDo) Having(conds ...gen.Condition) IROOMGBDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rOOMGBDo) Limit(limit int) IROOMGBDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rOOMGBDo) Offset(offset int) IROOMGBDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rOOMGBDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IROOMGBDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rOOMGBDo) Unscoped() IROOMGBDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rOOMGBDo) Create(values ...*model.ROOMGB) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rOOMGBDo) CreateInBatches(values []*model.ROOMGB, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rOOMGBDo) Save(values ...*model.ROOMGB) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rOOMGBDo) First() (*model.ROOMGB, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ROOMGB), nil
	}
}

func (r rOOMGBDo) Take() (*model.ROOMGB, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ROOMGB), nil
	}
}

func (r rOOMGBDo) Last() (*model.ROOMGB, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ROOMGB), nil
	}
}

func (r rOOMGBDo) Find() ([]*model.ROOMGB, error) {
	result, err := r.DO.Find()
	return result.([]*model.ROOMGB), err
}

func (r rOOMGBDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ROOMGB, err error) {
	buf := make([]*model.ROOMGB, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rOOMGBDo) FindInBatches(result *[]*model.ROOMGB, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rOOMGBDo) Attrs(attrs ...field.AssignExpr) IROOMGBDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rOOMGBDo) Assign(attrs ...field.AssignExpr) IROOMGBDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rOOMGBDo) Joins(fields ...field.RelationField) IROOMGBDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rOOMGBDo) Preload(fields ...field.RelationField) IROOMGBDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rOOMGBDo) FirstOrInit() (*model.ROOMGB, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ROOMGB), nil
	}
}

func (r rOOMGBDo) FirstOrCreate() (*model.ROOMGB, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ROOMGB), nil
	}
}

func (r rOOMGBDo) FindByPage(offset int, limit int) (result []*model.ROOMGB, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rOOMGBDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rOOMGBDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rOOMGBDo) Delete(models ...*model.ROOMGB) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rOOMGBDo) withDO(do gen.Dao) *rOOMGBDo {
	r.DO = *do.(*gen.DO)
	return r
}
