// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newPATMAST2(db *gorm.DB, opts ...gen.DOOption) pATMAST2 {
	_pATMAST2 := pATMAST2{}

	_pATMAST2.pATMAST2Do.UseDB(db, opts...)
	_pATMAST2.pATMAST2Do.UseModel(&model.PATMAST2{})

	tableName := _pATMAST2.pATMAST2Do.TableName()
	_pATMAST2.ALL = field.NewAsterisk(tableName)
	_pATMAST2.AltPid = field.NewString(tableName, "alt_pid")
	_pATMAST2.RpstPersNo = field.NewString(tableName, "rpst_pers_no")
	_pATMAST2.Username = field.NewString(tableName, "username")
	_pATMAST2.PatType = field.NewString(tableName, "pat_type")
	_pATMAST2.PatName = field.NewString(tableName, "pat_name")
	_pATMAST2.DeptCode = field.NewString(tableName, "dept_code")
	_pATMAST2.DeptName = field.NewString(tableName, "dept_name")
	_pATMAST2.CollegeCode = field.NewString(tableName, "college_code")
	_pATMAST2.CollegeName = field.NewString(tableName, "college_name")
	_pATMAST2.Phone3 = field.NewString(tableName, "phone3")
	_pATMAST2.Email = field.NewString(tableName, "email")
	_pATMAST2.DateExprd = field.NewString(tableName, "date_exprd")
	_pATMAST2.PatStat = field.NewString(tableName, "pat_stat")

	_pATMAST2.fillFieldMap()

	return _pATMAST2
}

type pATMAST2 struct {
	pATMAST2Do

	ALL         field.Asterisk
	AltPid      field.String
	RpstPersNo  field.String
	Username    field.String
	PatType     field.String
	PatName     field.String
	DeptCode    field.String
	DeptName    field.String
	CollegeCode field.String
	CollegeName field.String
	Phone3      field.String
	Email       field.String
	DateExprd   field.String
	PatStat     field.String

	fieldMap map[string]field.Expr
}

func (p pATMAST2) Table(newTableName string) *pATMAST2 {
	p.pATMAST2Do.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pATMAST2) As(alias string) *pATMAST2 {
	p.pATMAST2Do.DO = *(p.pATMAST2Do.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pATMAST2) updateTableName(table string) *pATMAST2 {
	p.ALL = field.NewAsterisk(table)
	p.AltPid = field.NewString(table, "alt_pid")
	p.RpstPersNo = field.NewString(table, "rpst_pers_no")
	p.Username = field.NewString(table, "username")
	p.PatType = field.NewString(table, "pat_type")
	p.PatName = field.NewString(table, "pat_name")
	p.DeptCode = field.NewString(table, "dept_code")
	p.DeptName = field.NewString(table, "dept_name")
	p.CollegeCode = field.NewString(table, "college_code")
	p.CollegeName = field.NewString(table, "college_name")
	p.Phone3 = field.NewString(table, "phone3")
	p.Email = field.NewString(table, "email")
	p.DateExprd = field.NewString(table, "date_exprd")
	p.PatStat = field.NewString(table, "pat_stat")

	p.fillFieldMap()

	return p
}

func (p *pATMAST2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pATMAST2) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["alt_pid"] = p.AltPid
	p.fieldMap["rpst_pers_no"] = p.RpstPersNo
	p.fieldMap["username"] = p.Username
	p.fieldMap["pat_type"] = p.PatType
	p.fieldMap["pat_name"] = p.PatName
	p.fieldMap["dept_code"] = p.DeptCode
	p.fieldMap["dept_name"] = p.DeptName
	p.fieldMap["college_code"] = p.CollegeCode
	p.fieldMap["college_name"] = p.CollegeName
	p.fieldMap["phone3"] = p.Phone3
	p.fieldMap["email"] = p.Email
	p.fieldMap["date_exprd"] = p.DateExprd
	p.fieldMap["pat_stat"] = p.PatStat
}

func (p pATMAST2) clone(db *gorm.DB) pATMAST2 {
	p.pATMAST2Do.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pATMAST2) replaceDB(db *gorm.DB) pATMAST2 {
	p.pATMAST2Do.ReplaceDB(db)
	return p
}

type pATMAST2Do struct{ gen.DO }

type IPATMAST2Do interface {
	gen.SubQuery
	Debug() IPATMAST2Do
	WithContext(ctx context.Context) IPATMAST2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPATMAST2Do
	WriteDB() IPATMAST2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPATMAST2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPATMAST2Do
	Not(conds ...gen.Condition) IPATMAST2Do
	Or(conds ...gen.Condition) IPATMAST2Do
	Select(conds ...field.Expr) IPATMAST2Do
	Where(conds ...gen.Condition) IPATMAST2Do
	Order(conds ...field.Expr) IPATMAST2Do
	Distinct(cols ...field.Expr) IPATMAST2Do
	Omit(cols ...field.Expr) IPATMAST2Do
	Join(table schema.Tabler, on ...field.Expr) IPATMAST2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IPATMAST2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IPATMAST2Do
	Group(cols ...field.Expr) IPATMAST2Do
	Having(conds ...gen.Condition) IPATMAST2Do
	Limit(limit int) IPATMAST2Do
	Offset(offset int) IPATMAST2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPATMAST2Do
	Unscoped() IPATMAST2Do
	Create(values ...*model.PATMAST2) error
	CreateInBatches(values []*model.PATMAST2, batchSize int) error
	Save(values ...*model.PATMAST2) error
	First() (*model.PATMAST2, error)
	Take() (*model.PATMAST2, error)
	Last() (*model.PATMAST2, error)
	Find() ([]*model.PATMAST2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PATMAST2, err error)
	FindInBatches(result *[]*model.PATMAST2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PATMAST2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPATMAST2Do
	Assign(attrs ...field.AssignExpr) IPATMAST2Do
	Joins(fields ...field.RelationField) IPATMAST2Do
	Preload(fields ...field.RelationField) IPATMAST2Do
	FirstOrInit() (*model.PATMAST2, error)
	FirstOrCreate() (*model.PATMAST2, error)
	FindByPage(offset int, limit int) (result []*model.PATMAST2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPATMAST2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pATMAST2Do) Debug() IPATMAST2Do {
	return p.withDO(p.DO.Debug())
}

func (p pATMAST2Do) WithContext(ctx context.Context) IPATMAST2Do {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pATMAST2Do) ReadDB() IPATMAST2Do {
	return p.Clauses(dbresolver.Read)
}

func (p pATMAST2Do) WriteDB() IPATMAST2Do {
	return p.Clauses(dbresolver.Write)
}

func (p pATMAST2Do) Session(config *gorm.Session) IPATMAST2Do {
	return p.withDO(p.DO.Session(config))
}

func (p pATMAST2Do) Clauses(conds ...clause.Expression) IPATMAST2Do {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pATMAST2Do) Returning(value interface{}, columns ...string) IPATMAST2Do {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pATMAST2Do) Not(conds ...gen.Condition) IPATMAST2Do {
	return p.withDO(p.DO.Not(conds...))
}

func (p pATMAST2Do) Or(conds ...gen.Condition) IPATMAST2Do {
	return p.withDO(p.DO.Or(conds...))
}

func (p pATMAST2Do) Select(conds ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Select(conds...))
}

func (p pATMAST2Do) Where(conds ...gen.Condition) IPATMAST2Do {
	return p.withDO(p.DO.Where(conds...))
}

func (p pATMAST2Do) Order(conds ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Order(conds...))
}

func (p pATMAST2Do) Distinct(cols ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pATMAST2Do) Omit(cols ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pATMAST2Do) Join(table schema.Tabler, on ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pATMAST2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pATMAST2Do) RightJoin(table schema.Tabler, on ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pATMAST2Do) Group(cols ...field.Expr) IPATMAST2Do {
	return p.withDO(p.DO.Group(cols...))
}

func (p pATMAST2Do) Having(conds ...gen.Condition) IPATMAST2Do {
	return p.withDO(p.DO.Having(conds...))
}

func (p pATMAST2Do) Limit(limit int) IPATMAST2Do {
	return p.withDO(p.DO.Limit(limit))
}

func (p pATMAST2Do) Offset(offset int) IPATMAST2Do {
	return p.withDO(p.DO.Offset(offset))
}

func (p pATMAST2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IPATMAST2Do {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pATMAST2Do) Unscoped() IPATMAST2Do {
	return p.withDO(p.DO.Unscoped())
}

func (p pATMAST2Do) Create(values ...*model.PATMAST2) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pATMAST2Do) CreateInBatches(values []*model.PATMAST2, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pATMAST2Do) Save(values ...*model.PATMAST2) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pATMAST2Do) First() (*model.PATMAST2, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PATMAST2), nil
	}
}

func (p pATMAST2Do) Take() (*model.PATMAST2, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PATMAST2), nil
	}
}

func (p pATMAST2Do) Last() (*model.PATMAST2, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PATMAST2), nil
	}
}

func (p pATMAST2Do) Find() ([]*model.PATMAST2, error) {
	result, err := p.DO.Find()
	return result.([]*model.PATMAST2), err
}

func (p pATMAST2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PATMAST2, err error) {
	buf := make([]*model.PATMAST2, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pATMAST2Do) FindInBatches(result *[]*model.PATMAST2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pATMAST2Do) Attrs(attrs ...field.AssignExpr) IPATMAST2Do {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pATMAST2Do) Assign(attrs ...field.AssignExpr) IPATMAST2Do {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pATMAST2Do) Joins(fields ...field.RelationField) IPATMAST2Do {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pATMAST2Do) Preload(fields ...field.RelationField) IPATMAST2Do {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pATMAST2Do) FirstOrInit() (*model.PATMAST2, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PATMAST2), nil
	}
}

func (p pATMAST2Do) FirstOrCreate() (*model.PATMAST2, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PATMAST2), nil
	}
}

func (p pATMAST2Do) FindByPage(offset int, limit int) (result []*model.PATMAST2, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pATMAST2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pATMAST2Do) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pATMAST2Do) Delete(models ...*model.PATMAST2) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pATMAST2Do) withDO(do gen.Dao) *pATMAST2Do {
	p.DO = *do.(*gen.DO)
	return p
}
