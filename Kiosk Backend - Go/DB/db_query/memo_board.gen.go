// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newMemoBoard(db *gorm.DB, opts ...gen.DOOption) memoBoard {
	_memoBoard := memoBoard{}

	_memoBoard.memoBoardDo.UseDB(db, opts...)
	_memoBoard.memoBoardDo.UseModel(&model.MemoBoard{})

	tableName := _memoBoard.memoBoardDo.TableName()
	_memoBoard.ALL = field.NewAsterisk(tableName)
	_memoBoard.Seq = field.NewInt64(tableName, "seq")
	_memoBoard.MemoGb = field.NewString(tableName, "memo_gb")
	_memoBoard.UserID = field.NewString(tableName, "user_id")
	_memoBoard.NickNm = field.NewString(tableName, "nick_nm")
	_memoBoard.Contents = field.NewString(tableName, "contents")
	_memoBoard.DelYn = field.NewString(tableName, "del_yn")
	_memoBoard.RegDt = field.NewString(tableName, "reg_dt")
	_memoBoard.DelDt = field.NewString(tableName, "del_dt")

	_memoBoard.fillFieldMap()

	return _memoBoard
}

type memoBoard struct {
	memoBoardDo

	ALL      field.Asterisk
	Seq      field.Int64
	MemoGb   field.String
	UserID   field.String
	NickNm   field.String
	Contents field.String
	DelYn    field.String
	RegDt    field.String
	DelDt    field.String

	fieldMap map[string]field.Expr
}

func (m memoBoard) Table(newTableName string) *memoBoard {
	m.memoBoardDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memoBoard) As(alias string) *memoBoard {
	m.memoBoardDo.DO = *(m.memoBoardDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memoBoard) updateTableName(table string) *memoBoard {
	m.ALL = field.NewAsterisk(table)
	m.Seq = field.NewInt64(table, "seq")
	m.MemoGb = field.NewString(table, "memo_gb")
	m.UserID = field.NewString(table, "user_id")
	m.NickNm = field.NewString(table, "nick_nm")
	m.Contents = field.NewString(table, "contents")
	m.DelYn = field.NewString(table, "del_yn")
	m.RegDt = field.NewString(table, "reg_dt")
	m.DelDt = field.NewString(table, "del_dt")

	m.fillFieldMap()

	return m
}

func (m *memoBoard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memoBoard) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["seq"] = m.Seq
	m.fieldMap["memo_gb"] = m.MemoGb
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["nick_nm"] = m.NickNm
	m.fieldMap["contents"] = m.Contents
	m.fieldMap["del_yn"] = m.DelYn
	m.fieldMap["reg_dt"] = m.RegDt
	m.fieldMap["del_dt"] = m.DelDt
}

func (m memoBoard) clone(db *gorm.DB) memoBoard {
	m.memoBoardDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memoBoard) replaceDB(db *gorm.DB) memoBoard {
	m.memoBoardDo.ReplaceDB(db)
	return m
}

type memoBoardDo struct{ gen.DO }

type IMemoBoardDo interface {
	gen.SubQuery
	Debug() IMemoBoardDo
	WithContext(ctx context.Context) IMemoBoardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemoBoardDo
	WriteDB() IMemoBoardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemoBoardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemoBoardDo
	Not(conds ...gen.Condition) IMemoBoardDo
	Or(conds ...gen.Condition) IMemoBoardDo
	Select(conds ...field.Expr) IMemoBoardDo
	Where(conds ...gen.Condition) IMemoBoardDo
	Order(conds ...field.Expr) IMemoBoardDo
	Distinct(cols ...field.Expr) IMemoBoardDo
	Omit(cols ...field.Expr) IMemoBoardDo
	Join(table schema.Tabler, on ...field.Expr) IMemoBoardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemoBoardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemoBoardDo
	Group(cols ...field.Expr) IMemoBoardDo
	Having(conds ...gen.Condition) IMemoBoardDo
	Limit(limit int) IMemoBoardDo
	Offset(offset int) IMemoBoardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemoBoardDo
	Unscoped() IMemoBoardDo
	Create(values ...*model.MemoBoard) error
	CreateInBatches(values []*model.MemoBoard, batchSize int) error
	Save(values ...*model.MemoBoard) error
	First() (*model.MemoBoard, error)
	Take() (*model.MemoBoard, error)
	Last() (*model.MemoBoard, error)
	Find() ([]*model.MemoBoard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemoBoard, err error)
	FindInBatches(result *[]*model.MemoBoard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemoBoard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemoBoardDo
	Assign(attrs ...field.AssignExpr) IMemoBoardDo
	Joins(fields ...field.RelationField) IMemoBoardDo
	Preload(fields ...field.RelationField) IMemoBoardDo
	FirstOrInit() (*model.MemoBoard, error)
	FirstOrCreate() (*model.MemoBoard, error)
	FindByPage(offset int, limit int) (result []*model.MemoBoard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemoBoardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memoBoardDo) Debug() IMemoBoardDo {
	return m.withDO(m.DO.Debug())
}

func (m memoBoardDo) WithContext(ctx context.Context) IMemoBoardDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memoBoardDo) ReadDB() IMemoBoardDo {
	return m.Clauses(dbresolver.Read)
}

func (m memoBoardDo) WriteDB() IMemoBoardDo {
	return m.Clauses(dbresolver.Write)
}

func (m memoBoardDo) Session(config *gorm.Session) IMemoBoardDo {
	return m.withDO(m.DO.Session(config))
}

func (m memoBoardDo) Clauses(conds ...clause.Expression) IMemoBoardDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memoBoardDo) Returning(value interface{}, columns ...string) IMemoBoardDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memoBoardDo) Not(conds ...gen.Condition) IMemoBoardDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memoBoardDo) Or(conds ...gen.Condition) IMemoBoardDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memoBoardDo) Select(conds ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memoBoardDo) Where(conds ...gen.Condition) IMemoBoardDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memoBoardDo) Order(conds ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memoBoardDo) Distinct(cols ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memoBoardDo) Omit(cols ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memoBoardDo) Join(table schema.Tabler, on ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memoBoardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memoBoardDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memoBoardDo) Group(cols ...field.Expr) IMemoBoardDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memoBoardDo) Having(conds ...gen.Condition) IMemoBoardDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memoBoardDo) Limit(limit int) IMemoBoardDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memoBoardDo) Offset(offset int) IMemoBoardDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memoBoardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemoBoardDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memoBoardDo) Unscoped() IMemoBoardDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memoBoardDo) Create(values ...*model.MemoBoard) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memoBoardDo) CreateInBatches(values []*model.MemoBoard, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memoBoardDo) Save(values ...*model.MemoBoard) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memoBoardDo) First() (*model.MemoBoard, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoBoard), nil
	}
}

func (m memoBoardDo) Take() (*model.MemoBoard, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoBoard), nil
	}
}

func (m memoBoardDo) Last() (*model.MemoBoard, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoBoard), nil
	}
}

func (m memoBoardDo) Find() ([]*model.MemoBoard, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemoBoard), err
}

func (m memoBoardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemoBoard, err error) {
	buf := make([]*model.MemoBoard, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memoBoardDo) FindInBatches(result *[]*model.MemoBoard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memoBoardDo) Attrs(attrs ...field.AssignExpr) IMemoBoardDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memoBoardDo) Assign(attrs ...field.AssignExpr) IMemoBoardDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memoBoardDo) Joins(fields ...field.RelationField) IMemoBoardDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memoBoardDo) Preload(fields ...field.RelationField) IMemoBoardDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memoBoardDo) FirstOrInit() (*model.MemoBoard, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoBoard), nil
	}
}

func (m memoBoardDo) FirstOrCreate() (*model.MemoBoard, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoBoard), nil
	}
}

func (m memoBoardDo) FindByPage(offset int, limit int) (result []*model.MemoBoard, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memoBoardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memoBoardDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memoBoardDo) Delete(models ...*model.MemoBoard) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memoBoardDo) withDO(do gen.Dao) *memoBoardDo {
	m.DO = *do.(*gen.DO)
	return m
}
