// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBOOKDENY(db *gorm.DB, opts ...gen.DOOption) bOOKDENY {
	_bOOKDENY := bOOKDENY{}

	_bOOKDENY.bOOKDENYDo.UseDB(db, opts...)
	_bOOKDENY.bOOKDENYDo.UseModel(&model.BOOKDENY{})

	tableName := _bOOKDENY.bOOKDENYDo.TableName()
	_bOOKDENY.ALL = field.NewAsterisk(tableName)
	_bOOKDENY.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_bOOKDENY.STATUS = field.NewInt64(tableName, "STATUS")
	_bOOKDENY.ADMINID = field.NewString(tableName, "ADMIN_ID")
	_bOOKDENY.REGDATE = field.NewTime(tableName, "REG_DATE")
	_bOOKDENY.REASON = field.NewString(tableName, "REASON")

	_bOOKDENY.fillFieldMap()

	return _bOOKDENY
}

type bOOKDENY struct {
	bOOKDENYDo

	ALL     field.Asterisk
	BSEQNO  field.Int64
	STATUS  field.Int64
	ADMINID field.String
	REGDATE field.Time
	REASON  field.String

	fieldMap map[string]field.Expr
}

func (b bOOKDENY) Table(newTableName string) *bOOKDENY {
	b.bOOKDENYDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bOOKDENY) As(alias string) *bOOKDENY {
	b.bOOKDENYDo.DO = *(b.bOOKDENYDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bOOKDENY) updateTableName(table string) *bOOKDENY {
	b.ALL = field.NewAsterisk(table)
	b.BSEQNO = field.NewInt64(table, "BSEQNO")
	b.STATUS = field.NewInt64(table, "STATUS")
	b.ADMINID = field.NewString(table, "ADMIN_ID")
	b.REGDATE = field.NewTime(table, "REG_DATE")
	b.REASON = field.NewString(table, "REASON")

	b.fillFieldMap()

	return b
}

func (b *bOOKDENY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bOOKDENY) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 5)
	b.fieldMap["BSEQNO"] = b.BSEQNO
	b.fieldMap["STATUS"] = b.STATUS
	b.fieldMap["ADMIN_ID"] = b.ADMINID
	b.fieldMap["REG_DATE"] = b.REGDATE
	b.fieldMap["REASON"] = b.REASON
}

func (b bOOKDENY) clone(db *gorm.DB) bOOKDENY {
	b.bOOKDENYDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bOOKDENY) replaceDB(db *gorm.DB) bOOKDENY {
	b.bOOKDENYDo.ReplaceDB(db)
	return b
}

type bOOKDENYDo struct{ gen.DO }

type IBOOKDENYDo interface {
	gen.SubQuery
	Debug() IBOOKDENYDo
	WithContext(ctx context.Context) IBOOKDENYDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBOOKDENYDo
	WriteDB() IBOOKDENYDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBOOKDENYDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBOOKDENYDo
	Not(conds ...gen.Condition) IBOOKDENYDo
	Or(conds ...gen.Condition) IBOOKDENYDo
	Select(conds ...field.Expr) IBOOKDENYDo
	Where(conds ...gen.Condition) IBOOKDENYDo
	Order(conds ...field.Expr) IBOOKDENYDo
	Distinct(cols ...field.Expr) IBOOKDENYDo
	Omit(cols ...field.Expr) IBOOKDENYDo
	Join(table schema.Tabler, on ...field.Expr) IBOOKDENYDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBOOKDENYDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBOOKDENYDo
	Group(cols ...field.Expr) IBOOKDENYDo
	Having(conds ...gen.Condition) IBOOKDENYDo
	Limit(limit int) IBOOKDENYDo
	Offset(offset int) IBOOKDENYDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBOOKDENYDo
	Unscoped() IBOOKDENYDo
	Create(values ...*model.BOOKDENY) error
	CreateInBatches(values []*model.BOOKDENY, batchSize int) error
	Save(values ...*model.BOOKDENY) error
	First() (*model.BOOKDENY, error)
	Take() (*model.BOOKDENY, error)
	Last() (*model.BOOKDENY, error)
	Find() ([]*model.BOOKDENY, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BOOKDENY, err error)
	FindInBatches(result *[]*model.BOOKDENY, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BOOKDENY) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBOOKDENYDo
	Assign(attrs ...field.AssignExpr) IBOOKDENYDo
	Joins(fields ...field.RelationField) IBOOKDENYDo
	Preload(fields ...field.RelationField) IBOOKDENYDo
	FirstOrInit() (*model.BOOKDENY, error)
	FirstOrCreate() (*model.BOOKDENY, error)
	FindByPage(offset int, limit int) (result []*model.BOOKDENY, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBOOKDENYDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bOOKDENYDo) Debug() IBOOKDENYDo {
	return b.withDO(b.DO.Debug())
}

func (b bOOKDENYDo) WithContext(ctx context.Context) IBOOKDENYDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bOOKDENYDo) ReadDB() IBOOKDENYDo {
	return b.Clauses(dbresolver.Read)
}

func (b bOOKDENYDo) WriteDB() IBOOKDENYDo {
	return b.Clauses(dbresolver.Write)
}

func (b bOOKDENYDo) Session(config *gorm.Session) IBOOKDENYDo {
	return b.withDO(b.DO.Session(config))
}

func (b bOOKDENYDo) Clauses(conds ...clause.Expression) IBOOKDENYDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bOOKDENYDo) Returning(value interface{}, columns ...string) IBOOKDENYDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bOOKDENYDo) Not(conds ...gen.Condition) IBOOKDENYDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bOOKDENYDo) Or(conds ...gen.Condition) IBOOKDENYDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bOOKDENYDo) Select(conds ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bOOKDENYDo) Where(conds ...gen.Condition) IBOOKDENYDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bOOKDENYDo) Order(conds ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bOOKDENYDo) Distinct(cols ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bOOKDENYDo) Omit(cols ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bOOKDENYDo) Join(table schema.Tabler, on ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bOOKDENYDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bOOKDENYDo) RightJoin(table schema.Tabler, on ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bOOKDENYDo) Group(cols ...field.Expr) IBOOKDENYDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bOOKDENYDo) Having(conds ...gen.Condition) IBOOKDENYDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bOOKDENYDo) Limit(limit int) IBOOKDENYDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bOOKDENYDo) Offset(offset int) IBOOKDENYDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bOOKDENYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBOOKDENYDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bOOKDENYDo) Unscoped() IBOOKDENYDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bOOKDENYDo) Create(values ...*model.BOOKDENY) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bOOKDENYDo) CreateInBatches(values []*model.BOOKDENY, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bOOKDENYDo) Save(values ...*model.BOOKDENY) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bOOKDENYDo) First() (*model.BOOKDENY, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BOOKDENY), nil
	}
}

func (b bOOKDENYDo) Take() (*model.BOOKDENY, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BOOKDENY), nil
	}
}

func (b bOOKDENYDo) Last() (*model.BOOKDENY, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BOOKDENY), nil
	}
}

func (b bOOKDENYDo) Find() ([]*model.BOOKDENY, error) {
	result, err := b.DO.Find()
	return result.([]*model.BOOKDENY), err
}

func (b bOOKDENYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BOOKDENY, err error) {
	buf := make([]*model.BOOKDENY, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bOOKDENYDo) FindInBatches(result *[]*model.BOOKDENY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bOOKDENYDo) Attrs(attrs ...field.AssignExpr) IBOOKDENYDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bOOKDENYDo) Assign(attrs ...field.AssignExpr) IBOOKDENYDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bOOKDENYDo) Joins(fields ...field.RelationField) IBOOKDENYDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bOOKDENYDo) Preload(fields ...field.RelationField) IBOOKDENYDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bOOKDENYDo) FirstOrInit() (*model.BOOKDENY, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BOOKDENY), nil
	}
}

func (b bOOKDENYDo) FirstOrCreate() (*model.BOOKDENY, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BOOKDENY), nil
	}
}

func (b bOOKDENYDo) FindByPage(offset int, limit int) (result []*model.BOOKDENY, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bOOKDENYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bOOKDENYDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bOOKDENYDo) Delete(models ...*model.BOOKDENY) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bOOKDENYDo) withDO(do gen.Dao) *bOOKDENYDo {
	b.DO = *do.(*gen.DO)
	return b
}
