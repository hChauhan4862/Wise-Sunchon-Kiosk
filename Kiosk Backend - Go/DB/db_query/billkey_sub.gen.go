// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBILLKEYSUB(db *gorm.DB, opts ...gen.DOOption) bILLKEYSUB {
	_bILLKEYSUB := bILLKEYSUB{}

	_bILLKEYSUB.bILLKEYSUBDo.UseDB(db, opts...)
	_bILLKEYSUB.bILLKEYSUBDo.UseModel(&model.BILLKEYSUB{})

	tableName := _bILLKEYSUB.bILLKEYSUBDo.TableName()
	_bILLKEYSUB.ALL = field.NewAsterisk(tableName)
	_bILLKEYSUB.USERID = field.NewString(tableName, "USER_ID")
	_bILLKEYSUB.BILLKEY = field.NewString(tableName, "BILLKEY")
	_bILLKEYSUB.CARDNM = field.NewString(tableName, "CARD_NM")
	_bILLKEYSUB.USEYN = field.NewString(tableName, "USE_YN")
	_bILLKEYSUB.REGDT = field.NewString(tableName, "REG_DT")
	_bILLKEYSUB.DELDT = field.NewString(tableName, "DEL_DT")

	_bILLKEYSUB.fillFieldMap()

	return _bILLKEYSUB
}

type bILLKEYSUB struct {
	bILLKEYSUBDo

	ALL     field.Asterisk
	USERID  field.String
	BILLKEY field.String
	CARDNM  field.String
	USEYN   field.String
	REGDT   field.String
	DELDT   field.String

	fieldMap map[string]field.Expr
}

func (b bILLKEYSUB) Table(newTableName string) *bILLKEYSUB {
	b.bILLKEYSUBDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bILLKEYSUB) As(alias string) *bILLKEYSUB {
	b.bILLKEYSUBDo.DO = *(b.bILLKEYSUBDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bILLKEYSUB) updateTableName(table string) *bILLKEYSUB {
	b.ALL = field.NewAsterisk(table)
	b.USERID = field.NewString(table, "USER_ID")
	b.BILLKEY = field.NewString(table, "BILLKEY")
	b.CARDNM = field.NewString(table, "CARD_NM")
	b.USEYN = field.NewString(table, "USE_YN")
	b.REGDT = field.NewString(table, "REG_DT")
	b.DELDT = field.NewString(table, "DEL_DT")

	b.fillFieldMap()

	return b
}

func (b *bILLKEYSUB) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bILLKEYSUB) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["USER_ID"] = b.USERID
	b.fieldMap["BILLKEY"] = b.BILLKEY
	b.fieldMap["CARD_NM"] = b.CARDNM
	b.fieldMap["USE_YN"] = b.USEYN
	b.fieldMap["REG_DT"] = b.REGDT
	b.fieldMap["DEL_DT"] = b.DELDT
}

func (b bILLKEYSUB) clone(db *gorm.DB) bILLKEYSUB {
	b.bILLKEYSUBDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bILLKEYSUB) replaceDB(db *gorm.DB) bILLKEYSUB {
	b.bILLKEYSUBDo.ReplaceDB(db)
	return b
}

type bILLKEYSUBDo struct{ gen.DO }

type IBILLKEYSUBDo interface {
	gen.SubQuery
	Debug() IBILLKEYSUBDo
	WithContext(ctx context.Context) IBILLKEYSUBDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBILLKEYSUBDo
	WriteDB() IBILLKEYSUBDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBILLKEYSUBDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBILLKEYSUBDo
	Not(conds ...gen.Condition) IBILLKEYSUBDo
	Or(conds ...gen.Condition) IBILLKEYSUBDo
	Select(conds ...field.Expr) IBILLKEYSUBDo
	Where(conds ...gen.Condition) IBILLKEYSUBDo
	Order(conds ...field.Expr) IBILLKEYSUBDo
	Distinct(cols ...field.Expr) IBILLKEYSUBDo
	Omit(cols ...field.Expr) IBILLKEYSUBDo
	Join(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo
	Group(cols ...field.Expr) IBILLKEYSUBDo
	Having(conds ...gen.Condition) IBILLKEYSUBDo
	Limit(limit int) IBILLKEYSUBDo
	Offset(offset int) IBILLKEYSUBDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBILLKEYSUBDo
	Unscoped() IBILLKEYSUBDo
	Create(values ...*model.BILLKEYSUB) error
	CreateInBatches(values []*model.BILLKEYSUB, batchSize int) error
	Save(values ...*model.BILLKEYSUB) error
	First() (*model.BILLKEYSUB, error)
	Take() (*model.BILLKEYSUB, error)
	Last() (*model.BILLKEYSUB, error)
	Find() ([]*model.BILLKEYSUB, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BILLKEYSUB, err error)
	FindInBatches(result *[]*model.BILLKEYSUB, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BILLKEYSUB) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBILLKEYSUBDo
	Assign(attrs ...field.AssignExpr) IBILLKEYSUBDo
	Joins(fields ...field.RelationField) IBILLKEYSUBDo
	Preload(fields ...field.RelationField) IBILLKEYSUBDo
	FirstOrInit() (*model.BILLKEYSUB, error)
	FirstOrCreate() (*model.BILLKEYSUB, error)
	FindByPage(offset int, limit int) (result []*model.BILLKEYSUB, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBILLKEYSUBDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bILLKEYSUBDo) Debug() IBILLKEYSUBDo {
	return b.withDO(b.DO.Debug())
}

func (b bILLKEYSUBDo) WithContext(ctx context.Context) IBILLKEYSUBDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bILLKEYSUBDo) ReadDB() IBILLKEYSUBDo {
	return b.Clauses(dbresolver.Read)
}

func (b bILLKEYSUBDo) WriteDB() IBILLKEYSUBDo {
	return b.Clauses(dbresolver.Write)
}

func (b bILLKEYSUBDo) Session(config *gorm.Session) IBILLKEYSUBDo {
	return b.withDO(b.DO.Session(config))
}

func (b bILLKEYSUBDo) Clauses(conds ...clause.Expression) IBILLKEYSUBDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bILLKEYSUBDo) Returning(value interface{}, columns ...string) IBILLKEYSUBDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bILLKEYSUBDo) Not(conds ...gen.Condition) IBILLKEYSUBDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bILLKEYSUBDo) Or(conds ...gen.Condition) IBILLKEYSUBDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bILLKEYSUBDo) Select(conds ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bILLKEYSUBDo) Where(conds ...gen.Condition) IBILLKEYSUBDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bILLKEYSUBDo) Order(conds ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bILLKEYSUBDo) Distinct(cols ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bILLKEYSUBDo) Omit(cols ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bILLKEYSUBDo) Join(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bILLKEYSUBDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bILLKEYSUBDo) RightJoin(table schema.Tabler, on ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bILLKEYSUBDo) Group(cols ...field.Expr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bILLKEYSUBDo) Having(conds ...gen.Condition) IBILLKEYSUBDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bILLKEYSUBDo) Limit(limit int) IBILLKEYSUBDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bILLKEYSUBDo) Offset(offset int) IBILLKEYSUBDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bILLKEYSUBDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBILLKEYSUBDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bILLKEYSUBDo) Unscoped() IBILLKEYSUBDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bILLKEYSUBDo) Create(values ...*model.BILLKEYSUB) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bILLKEYSUBDo) CreateInBatches(values []*model.BILLKEYSUB, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bILLKEYSUBDo) Save(values ...*model.BILLKEYSUB) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bILLKEYSUBDo) First() (*model.BILLKEYSUB, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYSUB), nil
	}
}

func (b bILLKEYSUBDo) Take() (*model.BILLKEYSUB, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYSUB), nil
	}
}

func (b bILLKEYSUBDo) Last() (*model.BILLKEYSUB, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYSUB), nil
	}
}

func (b bILLKEYSUBDo) Find() ([]*model.BILLKEYSUB, error) {
	result, err := b.DO.Find()
	return result.([]*model.BILLKEYSUB), err
}

func (b bILLKEYSUBDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BILLKEYSUB, err error) {
	buf := make([]*model.BILLKEYSUB, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bILLKEYSUBDo) FindInBatches(result *[]*model.BILLKEYSUB, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bILLKEYSUBDo) Attrs(attrs ...field.AssignExpr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bILLKEYSUBDo) Assign(attrs ...field.AssignExpr) IBILLKEYSUBDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bILLKEYSUBDo) Joins(fields ...field.RelationField) IBILLKEYSUBDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bILLKEYSUBDo) Preload(fields ...field.RelationField) IBILLKEYSUBDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bILLKEYSUBDo) FirstOrInit() (*model.BILLKEYSUB, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYSUB), nil
	}
}

func (b bILLKEYSUBDo) FirstOrCreate() (*model.BILLKEYSUB, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYSUB), nil
	}
}

func (b bILLKEYSUBDo) FindByPage(offset int, limit int) (result []*model.BILLKEYSUB, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bILLKEYSUBDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bILLKEYSUBDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bILLKEYSUBDo) Delete(models ...*model.BILLKEYSUB) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bILLKEYSUBDo) withDO(do gen.Dao) *bILLKEYSUBDo {
	b.DO = *do.(*gen.DO)
	return b
}
