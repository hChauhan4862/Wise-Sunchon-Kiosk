// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newMainPushTbl(db *gorm.DB, opts ...gen.DOOption) mainPushTbl {
	_mainPushTbl := mainPushTbl{}

	_mainPushTbl.mainPushTblDo.UseDB(db, opts...)
	_mainPushTbl.mainPushTblDo.UseModel(&model.MainPushTbl{})

	tableName := _mainPushTbl.mainPushTblDo.TableName()
	_mainPushTbl.ALL = field.NewAsterisk(tableName)
	_mainPushTbl.PushSeq = field.NewInt64(tableName, "push_seq")
	_mainPushTbl.PushGb = field.NewString(tableName, "push_gb")
	_mainPushTbl.SendDate = field.NewString(tableName, "send_date")
	_mainPushTbl.ReceiveDate = field.NewString(tableName, "receive_date")
	_mainPushTbl.SendCnt = field.NewInt64(tableName, "send_cnt")
	_mainPushTbl.ReceiveChk = field.NewString(tableName, "receive_chk")
	_mainPushTbl.Msg = field.NewString(tableName, "msg")
	_mainPushTbl.Pid = field.NewString(tableName, "pid")

	_mainPushTbl.fillFieldMap()

	return _mainPushTbl
}

type mainPushTbl struct {
	mainPushTblDo

	ALL         field.Asterisk
	PushSeq     field.Int64
	PushGb      field.String
	SendDate    field.String
	ReceiveDate field.String
	SendCnt     field.Int64
	ReceiveChk  field.String
	Msg         field.String
	Pid         field.String

	fieldMap map[string]field.Expr
}

func (m mainPushTbl) Table(newTableName string) *mainPushTbl {
	m.mainPushTblDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mainPushTbl) As(alias string) *mainPushTbl {
	m.mainPushTblDo.DO = *(m.mainPushTblDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mainPushTbl) updateTableName(table string) *mainPushTbl {
	m.ALL = field.NewAsterisk(table)
	m.PushSeq = field.NewInt64(table, "push_seq")
	m.PushGb = field.NewString(table, "push_gb")
	m.SendDate = field.NewString(table, "send_date")
	m.ReceiveDate = field.NewString(table, "receive_date")
	m.SendCnt = field.NewInt64(table, "send_cnt")
	m.ReceiveChk = field.NewString(table, "receive_chk")
	m.Msg = field.NewString(table, "msg")
	m.Pid = field.NewString(table, "pid")

	m.fillFieldMap()

	return m
}

func (m *mainPushTbl) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mainPushTbl) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["push_seq"] = m.PushSeq
	m.fieldMap["push_gb"] = m.PushGb
	m.fieldMap["send_date"] = m.SendDate
	m.fieldMap["receive_date"] = m.ReceiveDate
	m.fieldMap["send_cnt"] = m.SendCnt
	m.fieldMap["receive_chk"] = m.ReceiveChk
	m.fieldMap["msg"] = m.Msg
	m.fieldMap["pid"] = m.Pid
}

func (m mainPushTbl) clone(db *gorm.DB) mainPushTbl {
	m.mainPushTblDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mainPushTbl) replaceDB(db *gorm.DB) mainPushTbl {
	m.mainPushTblDo.ReplaceDB(db)
	return m
}

type mainPushTblDo struct{ gen.DO }

type IMainPushTblDo interface {
	gen.SubQuery
	Debug() IMainPushTblDo
	WithContext(ctx context.Context) IMainPushTblDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMainPushTblDo
	WriteDB() IMainPushTblDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMainPushTblDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMainPushTblDo
	Not(conds ...gen.Condition) IMainPushTblDo
	Or(conds ...gen.Condition) IMainPushTblDo
	Select(conds ...field.Expr) IMainPushTblDo
	Where(conds ...gen.Condition) IMainPushTblDo
	Order(conds ...field.Expr) IMainPushTblDo
	Distinct(cols ...field.Expr) IMainPushTblDo
	Omit(cols ...field.Expr) IMainPushTblDo
	Join(table schema.Tabler, on ...field.Expr) IMainPushTblDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMainPushTblDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMainPushTblDo
	Group(cols ...field.Expr) IMainPushTblDo
	Having(conds ...gen.Condition) IMainPushTblDo
	Limit(limit int) IMainPushTblDo
	Offset(offset int) IMainPushTblDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMainPushTblDo
	Unscoped() IMainPushTblDo
	Create(values ...*model.MainPushTbl) error
	CreateInBatches(values []*model.MainPushTbl, batchSize int) error
	Save(values ...*model.MainPushTbl) error
	First() (*model.MainPushTbl, error)
	Take() (*model.MainPushTbl, error)
	Last() (*model.MainPushTbl, error)
	Find() ([]*model.MainPushTbl, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MainPushTbl, err error)
	FindInBatches(result *[]*model.MainPushTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MainPushTbl) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMainPushTblDo
	Assign(attrs ...field.AssignExpr) IMainPushTblDo
	Joins(fields ...field.RelationField) IMainPushTblDo
	Preload(fields ...field.RelationField) IMainPushTblDo
	FirstOrInit() (*model.MainPushTbl, error)
	FirstOrCreate() (*model.MainPushTbl, error)
	FindByPage(offset int, limit int) (result []*model.MainPushTbl, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMainPushTblDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mainPushTblDo) Debug() IMainPushTblDo {
	return m.withDO(m.DO.Debug())
}

func (m mainPushTblDo) WithContext(ctx context.Context) IMainPushTblDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mainPushTblDo) ReadDB() IMainPushTblDo {
	return m.Clauses(dbresolver.Read)
}

func (m mainPushTblDo) WriteDB() IMainPushTblDo {
	return m.Clauses(dbresolver.Write)
}

func (m mainPushTblDo) Session(config *gorm.Session) IMainPushTblDo {
	return m.withDO(m.DO.Session(config))
}

func (m mainPushTblDo) Clauses(conds ...clause.Expression) IMainPushTblDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mainPushTblDo) Returning(value interface{}, columns ...string) IMainPushTblDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mainPushTblDo) Not(conds ...gen.Condition) IMainPushTblDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mainPushTblDo) Or(conds ...gen.Condition) IMainPushTblDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mainPushTblDo) Select(conds ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mainPushTblDo) Where(conds ...gen.Condition) IMainPushTblDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mainPushTblDo) Order(conds ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mainPushTblDo) Distinct(cols ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mainPushTblDo) Omit(cols ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mainPushTblDo) Join(table schema.Tabler, on ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mainPushTblDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mainPushTblDo) RightJoin(table schema.Tabler, on ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mainPushTblDo) Group(cols ...field.Expr) IMainPushTblDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mainPushTblDo) Having(conds ...gen.Condition) IMainPushTblDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mainPushTblDo) Limit(limit int) IMainPushTblDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mainPushTblDo) Offset(offset int) IMainPushTblDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mainPushTblDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMainPushTblDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mainPushTblDo) Unscoped() IMainPushTblDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mainPushTblDo) Create(values ...*model.MainPushTbl) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mainPushTblDo) CreateInBatches(values []*model.MainPushTbl, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mainPushTblDo) Save(values ...*model.MainPushTbl) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mainPushTblDo) First() (*model.MainPushTbl, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MainPushTbl), nil
	}
}

func (m mainPushTblDo) Take() (*model.MainPushTbl, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MainPushTbl), nil
	}
}

func (m mainPushTblDo) Last() (*model.MainPushTbl, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MainPushTbl), nil
	}
}

func (m mainPushTblDo) Find() ([]*model.MainPushTbl, error) {
	result, err := m.DO.Find()
	return result.([]*model.MainPushTbl), err
}

func (m mainPushTblDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MainPushTbl, err error) {
	buf := make([]*model.MainPushTbl, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mainPushTblDo) FindInBatches(result *[]*model.MainPushTbl, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mainPushTblDo) Attrs(attrs ...field.AssignExpr) IMainPushTblDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mainPushTblDo) Assign(attrs ...field.AssignExpr) IMainPushTblDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mainPushTblDo) Joins(fields ...field.RelationField) IMainPushTblDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mainPushTblDo) Preload(fields ...field.RelationField) IMainPushTblDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mainPushTblDo) FirstOrInit() (*model.MainPushTbl, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MainPushTbl), nil
	}
}

func (m mainPushTblDo) FirstOrCreate() (*model.MainPushTbl, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MainPushTbl), nil
	}
}

func (m mainPushTblDo) FindByPage(offset int, limit int) (result []*model.MainPushTbl, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mainPushTblDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mainPushTblDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mainPushTblDo) Delete(models ...*model.MainPushTbl) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mainPushTblDo) withDO(do gen.Dao) *mainPushTblDo {
	m.DO = *do.(*gen.DO)
	return m
}
