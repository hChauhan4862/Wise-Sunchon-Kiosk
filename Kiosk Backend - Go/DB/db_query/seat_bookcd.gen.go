// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatBookcd(db *gorm.DB, opts ...gen.DOOption) seatBookcd {
	_seatBookcd := seatBookcd{}

	_seatBookcd.seatBookcdDo.UseDB(db, opts...)
	_seatBookcd.seatBookcdDo.UseModel(&model.SeatBookcd{})

	tableName := _seatBookcd.seatBookcdDo.TableName()
	_seatBookcd.ALL = field.NewAsterisk(tableName)
	_seatBookcd.STATUS = field.NewInt64(tableName, "STATUS")
	_seatBookcd.NAME = field.NewString(tableName, "NAME")
	_seatBookcd.ENNAME = field.NewString(tableName, "EN_NAME")

	_seatBookcd.fillFieldMap()

	return _seatBookcd
}

type seatBookcd struct {
	seatBookcdDo

	ALL    field.Asterisk
	STATUS field.Int64
	NAME   field.String
	ENNAME field.String

	fieldMap map[string]field.Expr
}

func (s seatBookcd) Table(newTableName string) *seatBookcd {
	s.seatBookcdDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatBookcd) As(alias string) *seatBookcd {
	s.seatBookcdDo.DO = *(s.seatBookcdDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatBookcd) updateTableName(table string) *seatBookcd {
	s.ALL = field.NewAsterisk(table)
	s.STATUS = field.NewInt64(table, "STATUS")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")

	s.fillFieldMap()

	return s
}

func (s *seatBookcd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatBookcd) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["STATUS"] = s.STATUS
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
}

func (s seatBookcd) clone(db *gorm.DB) seatBookcd {
	s.seatBookcdDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatBookcd) replaceDB(db *gorm.DB) seatBookcd {
	s.seatBookcdDo.ReplaceDB(db)
	return s
}

type seatBookcdDo struct{ gen.DO }

type ISeatBookcdDo interface {
	gen.SubQuery
	Debug() ISeatBookcdDo
	WithContext(ctx context.Context) ISeatBookcdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatBookcdDo
	WriteDB() ISeatBookcdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatBookcdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatBookcdDo
	Not(conds ...gen.Condition) ISeatBookcdDo
	Or(conds ...gen.Condition) ISeatBookcdDo
	Select(conds ...field.Expr) ISeatBookcdDo
	Where(conds ...gen.Condition) ISeatBookcdDo
	Order(conds ...field.Expr) ISeatBookcdDo
	Distinct(cols ...field.Expr) ISeatBookcdDo
	Omit(cols ...field.Expr) ISeatBookcdDo
	Join(table schema.Tabler, on ...field.Expr) ISeatBookcdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatBookcdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatBookcdDo
	Group(cols ...field.Expr) ISeatBookcdDo
	Having(conds ...gen.Condition) ISeatBookcdDo
	Limit(limit int) ISeatBookcdDo
	Offset(offset int) ISeatBookcdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatBookcdDo
	Unscoped() ISeatBookcdDo
	Create(values ...*model.SeatBookcd) error
	CreateInBatches(values []*model.SeatBookcd, batchSize int) error
	Save(values ...*model.SeatBookcd) error
	First() (*model.SeatBookcd, error)
	Take() (*model.SeatBookcd, error)
	Last() (*model.SeatBookcd, error)
	Find() ([]*model.SeatBookcd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatBookcd, err error)
	FindInBatches(result *[]*model.SeatBookcd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatBookcd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatBookcdDo
	Assign(attrs ...field.AssignExpr) ISeatBookcdDo
	Joins(fields ...field.RelationField) ISeatBookcdDo
	Preload(fields ...field.RelationField) ISeatBookcdDo
	FirstOrInit() (*model.SeatBookcd, error)
	FirstOrCreate() (*model.SeatBookcd, error)
	FindByPage(offset int, limit int) (result []*model.SeatBookcd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatBookcdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatBookcdDo) Debug() ISeatBookcdDo {
	return s.withDO(s.DO.Debug())
}

func (s seatBookcdDo) WithContext(ctx context.Context) ISeatBookcdDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatBookcdDo) ReadDB() ISeatBookcdDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatBookcdDo) WriteDB() ISeatBookcdDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatBookcdDo) Session(config *gorm.Session) ISeatBookcdDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatBookcdDo) Clauses(conds ...clause.Expression) ISeatBookcdDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatBookcdDo) Returning(value interface{}, columns ...string) ISeatBookcdDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatBookcdDo) Not(conds ...gen.Condition) ISeatBookcdDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatBookcdDo) Or(conds ...gen.Condition) ISeatBookcdDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatBookcdDo) Select(conds ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatBookcdDo) Where(conds ...gen.Condition) ISeatBookcdDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatBookcdDo) Order(conds ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatBookcdDo) Distinct(cols ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatBookcdDo) Omit(cols ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatBookcdDo) Join(table schema.Tabler, on ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatBookcdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatBookcdDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatBookcdDo) Group(cols ...field.Expr) ISeatBookcdDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatBookcdDo) Having(conds ...gen.Condition) ISeatBookcdDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatBookcdDo) Limit(limit int) ISeatBookcdDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatBookcdDo) Offset(offset int) ISeatBookcdDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatBookcdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatBookcdDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatBookcdDo) Unscoped() ISeatBookcdDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatBookcdDo) Create(values ...*model.SeatBookcd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatBookcdDo) CreateInBatches(values []*model.SeatBookcd, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatBookcdDo) Save(values ...*model.SeatBookcd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatBookcdDo) First() (*model.SeatBookcd, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookcd), nil
	}
}

func (s seatBookcdDo) Take() (*model.SeatBookcd, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookcd), nil
	}
}

func (s seatBookcdDo) Last() (*model.SeatBookcd, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookcd), nil
	}
}

func (s seatBookcdDo) Find() ([]*model.SeatBookcd, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatBookcd), err
}

func (s seatBookcdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatBookcd, err error) {
	buf := make([]*model.SeatBookcd, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatBookcdDo) FindInBatches(result *[]*model.SeatBookcd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatBookcdDo) Attrs(attrs ...field.AssignExpr) ISeatBookcdDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatBookcdDo) Assign(attrs ...field.AssignExpr) ISeatBookcdDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatBookcdDo) Joins(fields ...field.RelationField) ISeatBookcdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatBookcdDo) Preload(fields ...field.RelationField) ISeatBookcdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatBookcdDo) FirstOrInit() (*model.SeatBookcd, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookcd), nil
	}
}

func (s seatBookcdDo) FirstOrCreate() (*model.SeatBookcd, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatBookcd), nil
	}
}

func (s seatBookcdDo) FindByPage(offset int, limit int) (result []*model.SeatBookcd, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatBookcdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatBookcdDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatBookcdDo) Delete(models ...*model.SeatBookcd) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatBookcdDo) withDO(do gen.Dao) *seatBookcdDo {
	s.DO = *do.(*gen.DO)
	return s
}
