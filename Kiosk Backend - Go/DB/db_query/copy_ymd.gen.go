// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newCOPYYMD(db *gorm.DB, opts ...gen.DOOption) cOPYYMD {
	_cOPYYMD := cOPYYMD{}

	_cOPYYMD.cOPYYMDDo.UseDB(db, opts...)
	_cOPYYMD.cOPYYMDDo.UseModel(&model.COPYYMD{})

	tableName := _cOPYYMD.cOPYYMDDo.TableName()
	_cOPYYMD.ALL = field.NewAsterisk(tableName)
	_cOPYYMD.YMDSTR = field.NewString(tableName, "YMD_STR")
	_cOPYYMD.YMDDT = field.NewTime(tableName, "YMD_DT")

	_cOPYYMD.fillFieldMap()

	return _cOPYYMD
}

type cOPYYMD struct {
	cOPYYMDDo

	ALL    field.Asterisk
	YMDSTR field.String
	YMDDT  field.Time

	fieldMap map[string]field.Expr
}

func (c cOPYYMD) Table(newTableName string) *cOPYYMD {
	c.cOPYYMDDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cOPYYMD) As(alias string) *cOPYYMD {
	c.cOPYYMDDo.DO = *(c.cOPYYMDDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cOPYYMD) updateTableName(table string) *cOPYYMD {
	c.ALL = field.NewAsterisk(table)
	c.YMDSTR = field.NewString(table, "YMD_STR")
	c.YMDDT = field.NewTime(table, "YMD_DT")

	c.fillFieldMap()

	return c
}

func (c *cOPYYMD) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cOPYYMD) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["YMD_STR"] = c.YMDSTR
	c.fieldMap["YMD_DT"] = c.YMDDT
}

func (c cOPYYMD) clone(db *gorm.DB) cOPYYMD {
	c.cOPYYMDDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cOPYYMD) replaceDB(db *gorm.DB) cOPYYMD {
	c.cOPYYMDDo.ReplaceDB(db)
	return c
}

type cOPYYMDDo struct{ gen.DO }

type ICOPYYMDDo interface {
	gen.SubQuery
	Debug() ICOPYYMDDo
	WithContext(ctx context.Context) ICOPYYMDDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICOPYYMDDo
	WriteDB() ICOPYYMDDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICOPYYMDDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICOPYYMDDo
	Not(conds ...gen.Condition) ICOPYYMDDo
	Or(conds ...gen.Condition) ICOPYYMDDo
	Select(conds ...field.Expr) ICOPYYMDDo
	Where(conds ...gen.Condition) ICOPYYMDDo
	Order(conds ...field.Expr) ICOPYYMDDo
	Distinct(cols ...field.Expr) ICOPYYMDDo
	Omit(cols ...field.Expr) ICOPYYMDDo
	Join(table schema.Tabler, on ...field.Expr) ICOPYYMDDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICOPYYMDDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICOPYYMDDo
	Group(cols ...field.Expr) ICOPYYMDDo
	Having(conds ...gen.Condition) ICOPYYMDDo
	Limit(limit int) ICOPYYMDDo
	Offset(offset int) ICOPYYMDDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICOPYYMDDo
	Unscoped() ICOPYYMDDo
	Create(values ...*model.COPYYMD) error
	CreateInBatches(values []*model.COPYYMD, batchSize int) error
	Save(values ...*model.COPYYMD) error
	First() (*model.COPYYMD, error)
	Take() (*model.COPYYMD, error)
	Last() (*model.COPYYMD, error)
	Find() ([]*model.COPYYMD, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COPYYMD, err error)
	FindInBatches(result *[]*model.COPYYMD, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.COPYYMD) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICOPYYMDDo
	Assign(attrs ...field.AssignExpr) ICOPYYMDDo
	Joins(fields ...field.RelationField) ICOPYYMDDo
	Preload(fields ...field.RelationField) ICOPYYMDDo
	FirstOrInit() (*model.COPYYMD, error)
	FirstOrCreate() (*model.COPYYMD, error)
	FindByPage(offset int, limit int) (result []*model.COPYYMD, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICOPYYMDDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cOPYYMDDo) Debug() ICOPYYMDDo {
	return c.withDO(c.DO.Debug())
}

func (c cOPYYMDDo) WithContext(ctx context.Context) ICOPYYMDDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cOPYYMDDo) ReadDB() ICOPYYMDDo {
	return c.Clauses(dbresolver.Read)
}

func (c cOPYYMDDo) WriteDB() ICOPYYMDDo {
	return c.Clauses(dbresolver.Write)
}

func (c cOPYYMDDo) Session(config *gorm.Session) ICOPYYMDDo {
	return c.withDO(c.DO.Session(config))
}

func (c cOPYYMDDo) Clauses(conds ...clause.Expression) ICOPYYMDDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cOPYYMDDo) Returning(value interface{}, columns ...string) ICOPYYMDDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cOPYYMDDo) Not(conds ...gen.Condition) ICOPYYMDDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cOPYYMDDo) Or(conds ...gen.Condition) ICOPYYMDDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cOPYYMDDo) Select(conds ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cOPYYMDDo) Where(conds ...gen.Condition) ICOPYYMDDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cOPYYMDDo) Order(conds ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cOPYYMDDo) Distinct(cols ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cOPYYMDDo) Omit(cols ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cOPYYMDDo) Join(table schema.Tabler, on ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cOPYYMDDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cOPYYMDDo) RightJoin(table schema.Tabler, on ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cOPYYMDDo) Group(cols ...field.Expr) ICOPYYMDDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cOPYYMDDo) Having(conds ...gen.Condition) ICOPYYMDDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cOPYYMDDo) Limit(limit int) ICOPYYMDDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cOPYYMDDo) Offset(offset int) ICOPYYMDDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cOPYYMDDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICOPYYMDDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cOPYYMDDo) Unscoped() ICOPYYMDDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cOPYYMDDo) Create(values ...*model.COPYYMD) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cOPYYMDDo) CreateInBatches(values []*model.COPYYMD, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cOPYYMDDo) Save(values ...*model.COPYYMD) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cOPYYMDDo) First() (*model.COPYYMD, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYYMD), nil
	}
}

func (c cOPYYMDDo) Take() (*model.COPYYMD, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYYMD), nil
	}
}

func (c cOPYYMDDo) Last() (*model.COPYYMD, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYYMD), nil
	}
}

func (c cOPYYMDDo) Find() ([]*model.COPYYMD, error) {
	result, err := c.DO.Find()
	return result.([]*model.COPYYMD), err
}

func (c cOPYYMDDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.COPYYMD, err error) {
	buf := make([]*model.COPYYMD, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cOPYYMDDo) FindInBatches(result *[]*model.COPYYMD, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cOPYYMDDo) Attrs(attrs ...field.AssignExpr) ICOPYYMDDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cOPYYMDDo) Assign(attrs ...field.AssignExpr) ICOPYYMDDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cOPYYMDDo) Joins(fields ...field.RelationField) ICOPYYMDDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cOPYYMDDo) Preload(fields ...field.RelationField) ICOPYYMDDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cOPYYMDDo) FirstOrInit() (*model.COPYYMD, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYYMD), nil
	}
}

func (c cOPYYMDDo) FirstOrCreate() (*model.COPYYMD, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.COPYYMD), nil
	}
}

func (c cOPYYMDDo) FindByPage(offset int, limit int) (result []*model.COPYYMD, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cOPYYMDDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cOPYYMDDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cOPYYMDDo) Delete(models ...*model.COPYYMD) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cOPYYMDDo) withDO(do gen.Dao) *cOPYYMDDo {
	c.DO = *do.(*gen.DO)
	return c
}
