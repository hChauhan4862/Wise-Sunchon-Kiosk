// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBusFavorite(db *gorm.DB, opts ...gen.DOOption) busFavorite {
	_busFavorite := busFavorite{}

	_busFavorite.busFavoriteDo.UseDB(db, opts...)
	_busFavorite.busFavoriteDo.UseModel(&model.BusFavorite{})

	tableName := _busFavorite.busFavoriteDo.TableName()
	_busFavorite.ALL = field.NewAsterisk(tableName)
	_busFavorite.BusStopID = field.NewInt64(tableName, "busStopID")
	_busFavorite.StopCoordX = field.NewFloat64(tableName, "stopCoordX")
	_busFavorite.StopCoordY = field.NewFloat64(tableName, "stopCoordY")
	_busFavorite.StopName = field.NewString(tableName, "stopName")

	_busFavorite.fillFieldMap()

	return _busFavorite
}

type busFavorite struct {
	busFavoriteDo

	ALL        field.Asterisk
	BusStopID  field.Int64
	StopCoordX field.Float64
	StopCoordY field.Float64
	StopName   field.String

	fieldMap map[string]field.Expr
}

func (b busFavorite) Table(newTableName string) *busFavorite {
	b.busFavoriteDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b busFavorite) As(alias string) *busFavorite {
	b.busFavoriteDo.DO = *(b.busFavoriteDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *busFavorite) updateTableName(table string) *busFavorite {
	b.ALL = field.NewAsterisk(table)
	b.BusStopID = field.NewInt64(table, "busStopID")
	b.StopCoordX = field.NewFloat64(table, "stopCoordX")
	b.StopCoordY = field.NewFloat64(table, "stopCoordY")
	b.StopName = field.NewString(table, "stopName")

	b.fillFieldMap()

	return b
}

func (b *busFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *busFavorite) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["busStopID"] = b.BusStopID
	b.fieldMap["stopCoordX"] = b.StopCoordX
	b.fieldMap["stopCoordY"] = b.StopCoordY
	b.fieldMap["stopName"] = b.StopName
}

func (b busFavorite) clone(db *gorm.DB) busFavorite {
	b.busFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b busFavorite) replaceDB(db *gorm.DB) busFavorite {
	b.busFavoriteDo.ReplaceDB(db)
	return b
}

type busFavoriteDo struct{ gen.DO }

type IBusFavoriteDo interface {
	gen.SubQuery
	Debug() IBusFavoriteDo
	WithContext(ctx context.Context) IBusFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusFavoriteDo
	WriteDB() IBusFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusFavoriteDo
	Not(conds ...gen.Condition) IBusFavoriteDo
	Or(conds ...gen.Condition) IBusFavoriteDo
	Select(conds ...field.Expr) IBusFavoriteDo
	Where(conds ...gen.Condition) IBusFavoriteDo
	Order(conds ...field.Expr) IBusFavoriteDo
	Distinct(cols ...field.Expr) IBusFavoriteDo
	Omit(cols ...field.Expr) IBusFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) IBusFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusFavoriteDo
	Group(cols ...field.Expr) IBusFavoriteDo
	Having(conds ...gen.Condition) IBusFavoriteDo
	Limit(limit int) IBusFavoriteDo
	Offset(offset int) IBusFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusFavoriteDo
	Unscoped() IBusFavoriteDo
	Create(values ...*model.BusFavorite) error
	CreateInBatches(values []*model.BusFavorite, batchSize int) error
	Save(values ...*model.BusFavorite) error
	First() (*model.BusFavorite, error)
	Take() (*model.BusFavorite, error)
	Last() (*model.BusFavorite, error)
	Find() ([]*model.BusFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusFavorite, err error)
	FindInBatches(result *[]*model.BusFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BusFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusFavoriteDo
	Assign(attrs ...field.AssignExpr) IBusFavoriteDo
	Joins(fields ...field.RelationField) IBusFavoriteDo
	Preload(fields ...field.RelationField) IBusFavoriteDo
	FirstOrInit() (*model.BusFavorite, error)
	FirstOrCreate() (*model.BusFavorite, error)
	FindByPage(offset int, limit int) (result []*model.BusFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b busFavoriteDo) Debug() IBusFavoriteDo {
	return b.withDO(b.DO.Debug())
}

func (b busFavoriteDo) WithContext(ctx context.Context) IBusFavoriteDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b busFavoriteDo) ReadDB() IBusFavoriteDo {
	return b.Clauses(dbresolver.Read)
}

func (b busFavoriteDo) WriteDB() IBusFavoriteDo {
	return b.Clauses(dbresolver.Write)
}

func (b busFavoriteDo) Session(config *gorm.Session) IBusFavoriteDo {
	return b.withDO(b.DO.Session(config))
}

func (b busFavoriteDo) Clauses(conds ...clause.Expression) IBusFavoriteDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b busFavoriteDo) Returning(value interface{}, columns ...string) IBusFavoriteDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b busFavoriteDo) Not(conds ...gen.Condition) IBusFavoriteDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b busFavoriteDo) Or(conds ...gen.Condition) IBusFavoriteDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b busFavoriteDo) Select(conds ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b busFavoriteDo) Where(conds ...gen.Condition) IBusFavoriteDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b busFavoriteDo) Order(conds ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b busFavoriteDo) Distinct(cols ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b busFavoriteDo) Omit(cols ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b busFavoriteDo) Join(table schema.Tabler, on ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b busFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b busFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b busFavoriteDo) Group(cols ...field.Expr) IBusFavoriteDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b busFavoriteDo) Having(conds ...gen.Condition) IBusFavoriteDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b busFavoriteDo) Limit(limit int) IBusFavoriteDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b busFavoriteDo) Offset(offset int) IBusFavoriteDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b busFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusFavoriteDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b busFavoriteDo) Unscoped() IBusFavoriteDo {
	return b.withDO(b.DO.Unscoped())
}

func (b busFavoriteDo) Create(values ...*model.BusFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b busFavoriteDo) CreateInBatches(values []*model.BusFavorite, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b busFavoriteDo) Save(values ...*model.BusFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b busFavoriteDo) First() (*model.BusFavorite, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusFavorite), nil
	}
}

func (b busFavoriteDo) Take() (*model.BusFavorite, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusFavorite), nil
	}
}

func (b busFavoriteDo) Last() (*model.BusFavorite, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusFavorite), nil
	}
}

func (b busFavoriteDo) Find() ([]*model.BusFavorite, error) {
	result, err := b.DO.Find()
	return result.([]*model.BusFavorite), err
}

func (b busFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusFavorite, err error) {
	buf := make([]*model.BusFavorite, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b busFavoriteDo) FindInBatches(result *[]*model.BusFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b busFavoriteDo) Attrs(attrs ...field.AssignExpr) IBusFavoriteDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b busFavoriteDo) Assign(attrs ...field.AssignExpr) IBusFavoriteDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b busFavoriteDo) Joins(fields ...field.RelationField) IBusFavoriteDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b busFavoriteDo) Preload(fields ...field.RelationField) IBusFavoriteDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b busFavoriteDo) FirstOrInit() (*model.BusFavorite, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusFavorite), nil
	}
}

func (b busFavoriteDo) FirstOrCreate() (*model.BusFavorite, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusFavorite), nil
	}
}

func (b busFavoriteDo) FindByPage(offset int, limit int) (result []*model.BusFavorite, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b busFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b busFavoriteDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b busFavoriteDo) Delete(models ...*model.BusFavorite) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *busFavoriteDo) withDO(do gen.Dao) *busFavoriteDo {
	b.DO = *do.(*gen.DO)
	return b
}
