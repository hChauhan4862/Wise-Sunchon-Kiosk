// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_reserve_time_table(db *gorm.DB, opts ...gen.DOOption) hCV_reserve_time_table {
	_hCV_reserve_time_table := hCV_reserve_time_table{}

	_hCV_reserve_time_table.hCV_reserve_time_tableDo.UseDB(db, opts...)
	_hCV_reserve_time_table.hCV_reserve_time_tableDo.UseModel(&model.HCV_reserve_time_table{})

	tableName := _hCV_reserve_time_table.hCV_reserve_time_tableDo.TableName()
	_hCV_reserve_time_table.ALL = field.NewAsterisk(tableName)
	_hCV_reserve_time_table.SroomNo = field.NewInt64(tableName, "sroom_no")
	_hCV_reserve_time_table.SroomName = field.NewString(tableName, "sroom_name")
	_hCV_reserve_time_table.ReserveDate = field.NewString(tableName, "reserve_date")
	_hCV_reserve_time_table.Time0 = field.NewInt64(tableName, "time0")
	_hCV_reserve_time_table.Time1 = field.NewInt64(tableName, "time1")
	_hCV_reserve_time_table.Time2 = field.NewInt64(tableName, "time2")
	_hCV_reserve_time_table.Time3 = field.NewInt64(tableName, "time3")
	_hCV_reserve_time_table.Time4 = field.NewInt64(tableName, "time4")
	_hCV_reserve_time_table.Time5 = field.NewInt64(tableName, "time5")
	_hCV_reserve_time_table.Time6 = field.NewInt64(tableName, "time6")
	_hCV_reserve_time_table.Time7 = field.NewInt64(tableName, "time7")
	_hCV_reserve_time_table.Time8 = field.NewInt64(tableName, "time8")
	_hCV_reserve_time_table.Time9 = field.NewInt64(tableName, "time9")
	_hCV_reserve_time_table.Time10 = field.NewInt64(tableName, "time10")
	_hCV_reserve_time_table.Time11 = field.NewInt64(tableName, "time11")
	_hCV_reserve_time_table.Time12 = field.NewInt64(tableName, "time12")
	_hCV_reserve_time_table.Time13 = field.NewInt64(tableName, "time13")
	_hCV_reserve_time_table.Time14 = field.NewInt64(tableName, "time14")
	_hCV_reserve_time_table.Time15 = field.NewInt64(tableName, "time15")
	_hCV_reserve_time_table.Time16 = field.NewInt64(tableName, "time16")
	_hCV_reserve_time_table.Time17 = field.NewInt64(tableName, "time17")
	_hCV_reserve_time_table.Time18 = field.NewInt64(tableName, "time18")
	_hCV_reserve_time_table.Time19 = field.NewInt64(tableName, "time19")
	_hCV_reserve_time_table.Time20 = field.NewInt64(tableName, "time20")
	_hCV_reserve_time_table.Time21 = field.NewInt64(tableName, "time21")
	_hCV_reserve_time_table.Time22 = field.NewInt64(tableName, "time22")
	_hCV_reserve_time_table.Time23 = field.NewInt64(tableName, "time23")
	_hCV_reserve_time_table.Time24 = field.NewInt64(tableName, "time24")
	_hCV_reserve_time_table.Time25 = field.NewInt64(tableName, "time25")
	_hCV_reserve_time_table.Time26 = field.NewInt64(tableName, "time26")
	_hCV_reserve_time_table.Time27 = field.NewInt64(tableName, "time27")
	_hCV_reserve_time_table.Time28 = field.NewInt64(tableName, "time28")
	_hCV_reserve_time_table.Time29 = field.NewInt64(tableName, "time29")
	_hCV_reserve_time_table.Time30 = field.NewInt64(tableName, "time30")
	_hCV_reserve_time_table.Time31 = field.NewInt64(tableName, "time31")
	_hCV_reserve_time_table.Time32 = field.NewInt64(tableName, "time32")
	_hCV_reserve_time_table.Time33 = field.NewInt64(tableName, "time33")

	_hCV_reserve_time_table.fillFieldMap()

	return _hCV_reserve_time_table
}

type hCV_reserve_time_table struct {
	hCV_reserve_time_tableDo

	ALL         field.Asterisk
	SroomNo     field.Int64
	SroomName   field.String
	ReserveDate field.String
	Time0       field.Int64
	Time1       field.Int64
	Time2       field.Int64
	Time3       field.Int64
	Time4       field.Int64
	Time5       field.Int64
	Time6       field.Int64
	Time7       field.Int64
	Time8       field.Int64
	Time9       field.Int64
	Time10      field.Int64
	Time11      field.Int64
	Time12      field.Int64
	Time13      field.Int64
	Time14      field.Int64
	Time15      field.Int64
	Time16      field.Int64
	Time17      field.Int64
	Time18      field.Int64
	Time19      field.Int64
	Time20      field.Int64
	Time21      field.Int64
	Time22      field.Int64
	Time23      field.Int64
	Time24      field.Int64
	Time25      field.Int64
	Time26      field.Int64
	Time27      field.Int64
	Time28      field.Int64
	Time29      field.Int64
	Time30      field.Int64
	Time31      field.Int64
	Time32      field.Int64
	Time33      field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_reserve_time_table) Table(newTableName string) *hCV_reserve_time_table {
	h.hCV_reserve_time_tableDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_reserve_time_table) As(alias string) *hCV_reserve_time_table {
	h.hCV_reserve_time_tableDo.DO = *(h.hCV_reserve_time_tableDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_reserve_time_table) updateTableName(table string) *hCV_reserve_time_table {
	h.ALL = field.NewAsterisk(table)
	h.SroomNo = field.NewInt64(table, "sroom_no")
	h.SroomName = field.NewString(table, "sroom_name")
	h.ReserveDate = field.NewString(table, "reserve_date")
	h.Time0 = field.NewInt64(table, "time0")
	h.Time1 = field.NewInt64(table, "time1")
	h.Time2 = field.NewInt64(table, "time2")
	h.Time3 = field.NewInt64(table, "time3")
	h.Time4 = field.NewInt64(table, "time4")
	h.Time5 = field.NewInt64(table, "time5")
	h.Time6 = field.NewInt64(table, "time6")
	h.Time7 = field.NewInt64(table, "time7")
	h.Time8 = field.NewInt64(table, "time8")
	h.Time9 = field.NewInt64(table, "time9")
	h.Time10 = field.NewInt64(table, "time10")
	h.Time11 = field.NewInt64(table, "time11")
	h.Time12 = field.NewInt64(table, "time12")
	h.Time13 = field.NewInt64(table, "time13")
	h.Time14 = field.NewInt64(table, "time14")
	h.Time15 = field.NewInt64(table, "time15")
	h.Time16 = field.NewInt64(table, "time16")
	h.Time17 = field.NewInt64(table, "time17")
	h.Time18 = field.NewInt64(table, "time18")
	h.Time19 = field.NewInt64(table, "time19")
	h.Time20 = field.NewInt64(table, "time20")
	h.Time21 = field.NewInt64(table, "time21")
	h.Time22 = field.NewInt64(table, "time22")
	h.Time23 = field.NewInt64(table, "time23")
	h.Time24 = field.NewInt64(table, "time24")
	h.Time25 = field.NewInt64(table, "time25")
	h.Time26 = field.NewInt64(table, "time26")
	h.Time27 = field.NewInt64(table, "time27")
	h.Time28 = field.NewInt64(table, "time28")
	h.Time29 = field.NewInt64(table, "time29")
	h.Time30 = field.NewInt64(table, "time30")
	h.Time31 = field.NewInt64(table, "time31")
	h.Time32 = field.NewInt64(table, "time32")
	h.Time33 = field.NewInt64(table, "time33")

	h.fillFieldMap()

	return h
}

func (h *hCV_reserve_time_table) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_reserve_time_table) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 37)
	h.fieldMap["sroom_no"] = h.SroomNo
	h.fieldMap["sroom_name"] = h.SroomName
	h.fieldMap["reserve_date"] = h.ReserveDate
	h.fieldMap["time0"] = h.Time0
	h.fieldMap["time1"] = h.Time1
	h.fieldMap["time2"] = h.Time2
	h.fieldMap["time3"] = h.Time3
	h.fieldMap["time4"] = h.Time4
	h.fieldMap["time5"] = h.Time5
	h.fieldMap["time6"] = h.Time6
	h.fieldMap["time7"] = h.Time7
	h.fieldMap["time8"] = h.Time8
	h.fieldMap["time9"] = h.Time9
	h.fieldMap["time10"] = h.Time10
	h.fieldMap["time11"] = h.Time11
	h.fieldMap["time12"] = h.Time12
	h.fieldMap["time13"] = h.Time13
	h.fieldMap["time14"] = h.Time14
	h.fieldMap["time15"] = h.Time15
	h.fieldMap["time16"] = h.Time16
	h.fieldMap["time17"] = h.Time17
	h.fieldMap["time18"] = h.Time18
	h.fieldMap["time19"] = h.Time19
	h.fieldMap["time20"] = h.Time20
	h.fieldMap["time21"] = h.Time21
	h.fieldMap["time22"] = h.Time22
	h.fieldMap["time23"] = h.Time23
	h.fieldMap["time24"] = h.Time24
	h.fieldMap["time25"] = h.Time25
	h.fieldMap["time26"] = h.Time26
	h.fieldMap["time27"] = h.Time27
	h.fieldMap["time28"] = h.Time28
	h.fieldMap["time29"] = h.Time29
	h.fieldMap["time30"] = h.Time30
	h.fieldMap["time31"] = h.Time31
	h.fieldMap["time32"] = h.Time32
	h.fieldMap["time33"] = h.Time33
}

func (h hCV_reserve_time_table) clone(db *gorm.DB) hCV_reserve_time_table {
	h.hCV_reserve_time_tableDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_reserve_time_table) replaceDB(db *gorm.DB) hCV_reserve_time_table {
	h.hCV_reserve_time_tableDo.ReplaceDB(db)
	return h
}

type hCV_reserve_time_tableDo struct{ gen.DO }

type IHCV_reserve_time_tableDo interface {
	gen.SubQuery
	Debug() IHCV_reserve_time_tableDo
	WithContext(ctx context.Context) IHCV_reserve_time_tableDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_reserve_time_tableDo
	WriteDB() IHCV_reserve_time_tableDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_reserve_time_tableDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_reserve_time_tableDo
	Not(conds ...gen.Condition) IHCV_reserve_time_tableDo
	Or(conds ...gen.Condition) IHCV_reserve_time_tableDo
	Select(conds ...field.Expr) IHCV_reserve_time_tableDo
	Where(conds ...gen.Condition) IHCV_reserve_time_tableDo
	Order(conds ...field.Expr) IHCV_reserve_time_tableDo
	Distinct(cols ...field.Expr) IHCV_reserve_time_tableDo
	Omit(cols ...field.Expr) IHCV_reserve_time_tableDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo
	Group(cols ...field.Expr) IHCV_reserve_time_tableDo
	Having(conds ...gen.Condition) IHCV_reserve_time_tableDo
	Limit(limit int) IHCV_reserve_time_tableDo
	Offset(offset int) IHCV_reserve_time_tableDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_reserve_time_tableDo
	Unscoped() IHCV_reserve_time_tableDo
	Create(values ...*model.HCV_reserve_time_table) error
	CreateInBatches(values []*model.HCV_reserve_time_table, batchSize int) error
	Save(values ...*model.HCV_reserve_time_table) error
	First() (*model.HCV_reserve_time_table, error)
	Take() (*model.HCV_reserve_time_table, error)
	Last() (*model.HCV_reserve_time_table, error)
	Find() ([]*model.HCV_reserve_time_table, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_reserve_time_table, err error)
	FindInBatches(result *[]*model.HCV_reserve_time_table, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_reserve_time_table) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_reserve_time_tableDo
	Assign(attrs ...field.AssignExpr) IHCV_reserve_time_tableDo
	Joins(fields ...field.RelationField) IHCV_reserve_time_tableDo
	Preload(fields ...field.RelationField) IHCV_reserve_time_tableDo
	FirstOrInit() (*model.HCV_reserve_time_table, error)
	FirstOrCreate() (*model.HCV_reserve_time_table, error)
	FindByPage(offset int, limit int) (result []*model.HCV_reserve_time_table, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_reserve_time_tableDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_reserve_time_tableDo) Debug() IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_reserve_time_tableDo) WithContext(ctx context.Context) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_reserve_time_tableDo) ReadDB() IHCV_reserve_time_tableDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_reserve_time_tableDo) WriteDB() IHCV_reserve_time_tableDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_reserve_time_tableDo) Session(config *gorm.Session) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_reserve_time_tableDo) Clauses(conds ...clause.Expression) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_reserve_time_tableDo) Returning(value interface{}, columns ...string) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_reserve_time_tableDo) Not(conds ...gen.Condition) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_reserve_time_tableDo) Or(conds ...gen.Condition) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_reserve_time_tableDo) Select(conds ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_reserve_time_tableDo) Where(conds ...gen.Condition) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_reserve_time_tableDo) Order(conds ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_reserve_time_tableDo) Distinct(cols ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_reserve_time_tableDo) Omit(cols ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_reserve_time_tableDo) Join(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_reserve_time_tableDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_reserve_time_tableDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_reserve_time_tableDo) Group(cols ...field.Expr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_reserve_time_tableDo) Having(conds ...gen.Condition) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_reserve_time_tableDo) Limit(limit int) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_reserve_time_tableDo) Offset(offset int) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_reserve_time_tableDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_reserve_time_tableDo) Unscoped() IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_reserve_time_tableDo) Create(values ...*model.HCV_reserve_time_table) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_reserve_time_tableDo) CreateInBatches(values []*model.HCV_reserve_time_table, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_reserve_time_tableDo) Save(values ...*model.HCV_reserve_time_table) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_reserve_time_tableDo) First() (*model.HCV_reserve_time_table, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_reserve_time_table), nil
	}
}

func (h hCV_reserve_time_tableDo) Take() (*model.HCV_reserve_time_table, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_reserve_time_table), nil
	}
}

func (h hCV_reserve_time_tableDo) Last() (*model.HCV_reserve_time_table, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_reserve_time_table), nil
	}
}

func (h hCV_reserve_time_tableDo) Find() ([]*model.HCV_reserve_time_table, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_reserve_time_table), err
}

func (h hCV_reserve_time_tableDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_reserve_time_table, err error) {
	buf := make([]*model.HCV_reserve_time_table, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_reserve_time_tableDo) FindInBatches(result *[]*model.HCV_reserve_time_table, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_reserve_time_tableDo) Attrs(attrs ...field.AssignExpr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_reserve_time_tableDo) Assign(attrs ...field.AssignExpr) IHCV_reserve_time_tableDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_reserve_time_tableDo) Joins(fields ...field.RelationField) IHCV_reserve_time_tableDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_reserve_time_tableDo) Preload(fields ...field.RelationField) IHCV_reserve_time_tableDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_reserve_time_tableDo) FirstOrInit() (*model.HCV_reserve_time_table, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_reserve_time_table), nil
	}
}

func (h hCV_reserve_time_tableDo) FirstOrCreate() (*model.HCV_reserve_time_table, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_reserve_time_table), nil
	}
}

func (h hCV_reserve_time_tableDo) FindByPage(offset int, limit int) (result []*model.HCV_reserve_time_table, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_reserve_time_tableDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_reserve_time_tableDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_reserve_time_tableDo) Delete(models ...*model.HCV_reserve_time_table) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_reserve_time_tableDo) withDO(do gen.Dao) *hCV_reserve_time_tableDo {
	h.DO = *do.(*gen.DO)
	return h
}
