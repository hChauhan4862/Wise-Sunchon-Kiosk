// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatSmartLog(db *gorm.DB, opts ...gen.DOOption) seatSmartLog {
	_seatSmartLog := seatSmartLog{}

	_seatSmartLog.seatSmartLogDo.UseDB(db, opts...)
	_seatSmartLog.seatSmartLogDo.UseModel(&model.SeatSmartLog{})

	tableName := _seatSmartLog.seatSmartLogDo.TableName()
	_seatSmartLog.ALL = field.NewAsterisk(tableName)
	_seatSmartLog.LogDate = field.NewString(tableName, "log_date")
	_seatSmartLog.RoomNo = field.NewInt64(tableName, "room_no")
	_seatSmartLog.SeatNo = field.NewInt64(tableName, "seat_no")
	_seatSmartLog.DcuNo = field.NewInt64(tableName, "dcu_no")
	_seatSmartLog.DtcNo = field.NewInt64(tableName, "dtc_no")
	_seatSmartLog.UnitNo = field.NewInt64(tableName, "unit_no")
	_seatSmartLog.SeatType = field.NewString(tableName, "seat_type")
	_seatSmartLog.LockerPwd = field.NewString(tableName, "locker_pwd")
	_seatSmartLog.UseYn = field.NewString(tableName, "use_yn")
	_seatSmartLog.CheckDate = field.NewString(tableName, "check_date")

	_seatSmartLog.fillFieldMap()

	return _seatSmartLog
}

type seatSmartLog struct {
	seatSmartLogDo

	ALL       field.Asterisk
	LogDate   field.String
	RoomNo    field.Int64
	SeatNo    field.Int64
	DcuNo     field.Int64
	DtcNo     field.Int64
	UnitNo    field.Int64
	SeatType  field.String
	LockerPwd field.String
	UseYn     field.String
	CheckDate field.String

	fieldMap map[string]field.Expr
}

func (s seatSmartLog) Table(newTableName string) *seatSmartLog {
	s.seatSmartLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatSmartLog) As(alias string) *seatSmartLog {
	s.seatSmartLogDo.DO = *(s.seatSmartLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatSmartLog) updateTableName(table string) *seatSmartLog {
	s.ALL = field.NewAsterisk(table)
	s.LogDate = field.NewString(table, "log_date")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.DcuNo = field.NewInt64(table, "dcu_no")
	s.DtcNo = field.NewInt64(table, "dtc_no")
	s.UnitNo = field.NewInt64(table, "unit_no")
	s.SeatType = field.NewString(table, "seat_type")
	s.LockerPwd = field.NewString(table, "locker_pwd")
	s.UseYn = field.NewString(table, "use_yn")
	s.CheckDate = field.NewString(table, "check_date")

	s.fillFieldMap()

	return s
}

func (s *seatSmartLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatSmartLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["log_date"] = s.LogDate
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["dcu_no"] = s.DcuNo
	s.fieldMap["dtc_no"] = s.DtcNo
	s.fieldMap["unit_no"] = s.UnitNo
	s.fieldMap["seat_type"] = s.SeatType
	s.fieldMap["locker_pwd"] = s.LockerPwd
	s.fieldMap["use_yn"] = s.UseYn
	s.fieldMap["check_date"] = s.CheckDate
}

func (s seatSmartLog) clone(db *gorm.DB) seatSmartLog {
	s.seatSmartLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatSmartLog) replaceDB(db *gorm.DB) seatSmartLog {
	s.seatSmartLogDo.ReplaceDB(db)
	return s
}

type seatSmartLogDo struct{ gen.DO }

type ISeatSmartLogDo interface {
	gen.SubQuery
	Debug() ISeatSmartLogDo
	WithContext(ctx context.Context) ISeatSmartLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatSmartLogDo
	WriteDB() ISeatSmartLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatSmartLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatSmartLogDo
	Not(conds ...gen.Condition) ISeatSmartLogDo
	Or(conds ...gen.Condition) ISeatSmartLogDo
	Select(conds ...field.Expr) ISeatSmartLogDo
	Where(conds ...gen.Condition) ISeatSmartLogDo
	Order(conds ...field.Expr) ISeatSmartLogDo
	Distinct(cols ...field.Expr) ISeatSmartLogDo
	Omit(cols ...field.Expr) ISeatSmartLogDo
	Join(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo
	Group(cols ...field.Expr) ISeatSmartLogDo
	Having(conds ...gen.Condition) ISeatSmartLogDo
	Limit(limit int) ISeatSmartLogDo
	Offset(offset int) ISeatSmartLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSmartLogDo
	Unscoped() ISeatSmartLogDo
	Create(values ...*model.SeatSmartLog) error
	CreateInBatches(values []*model.SeatSmartLog, batchSize int) error
	Save(values ...*model.SeatSmartLog) error
	First() (*model.SeatSmartLog, error)
	Take() (*model.SeatSmartLog, error)
	Last() (*model.SeatSmartLog, error)
	Find() ([]*model.SeatSmartLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSmartLog, err error)
	FindInBatches(result *[]*model.SeatSmartLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatSmartLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatSmartLogDo
	Assign(attrs ...field.AssignExpr) ISeatSmartLogDo
	Joins(fields ...field.RelationField) ISeatSmartLogDo
	Preload(fields ...field.RelationField) ISeatSmartLogDo
	FirstOrInit() (*model.SeatSmartLog, error)
	FirstOrCreate() (*model.SeatSmartLog, error)
	FindByPage(offset int, limit int) (result []*model.SeatSmartLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatSmartLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatSmartLogDo) Debug() ISeatSmartLogDo {
	return s.withDO(s.DO.Debug())
}

func (s seatSmartLogDo) WithContext(ctx context.Context) ISeatSmartLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatSmartLogDo) ReadDB() ISeatSmartLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatSmartLogDo) WriteDB() ISeatSmartLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatSmartLogDo) Session(config *gorm.Session) ISeatSmartLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatSmartLogDo) Clauses(conds ...clause.Expression) ISeatSmartLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatSmartLogDo) Returning(value interface{}, columns ...string) ISeatSmartLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatSmartLogDo) Not(conds ...gen.Condition) ISeatSmartLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatSmartLogDo) Or(conds ...gen.Condition) ISeatSmartLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatSmartLogDo) Select(conds ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatSmartLogDo) Where(conds ...gen.Condition) ISeatSmartLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatSmartLogDo) Order(conds ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatSmartLogDo) Distinct(cols ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatSmartLogDo) Omit(cols ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatSmartLogDo) Join(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatSmartLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatSmartLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatSmartLogDo) Group(cols ...field.Expr) ISeatSmartLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatSmartLogDo) Having(conds ...gen.Condition) ISeatSmartLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatSmartLogDo) Limit(limit int) ISeatSmartLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatSmartLogDo) Offset(offset int) ISeatSmartLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatSmartLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSmartLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatSmartLogDo) Unscoped() ISeatSmartLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatSmartLogDo) Create(values ...*model.SeatSmartLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatSmartLogDo) CreateInBatches(values []*model.SeatSmartLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatSmartLogDo) Save(values ...*model.SeatSmartLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatSmartLogDo) First() (*model.SeatSmartLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartLog), nil
	}
}

func (s seatSmartLogDo) Take() (*model.SeatSmartLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartLog), nil
	}
}

func (s seatSmartLogDo) Last() (*model.SeatSmartLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartLog), nil
	}
}

func (s seatSmartLogDo) Find() ([]*model.SeatSmartLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatSmartLog), err
}

func (s seatSmartLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSmartLog, err error) {
	buf := make([]*model.SeatSmartLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatSmartLogDo) FindInBatches(result *[]*model.SeatSmartLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatSmartLogDo) Attrs(attrs ...field.AssignExpr) ISeatSmartLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatSmartLogDo) Assign(attrs ...field.AssignExpr) ISeatSmartLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatSmartLogDo) Joins(fields ...field.RelationField) ISeatSmartLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatSmartLogDo) Preload(fields ...field.RelationField) ISeatSmartLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatSmartLogDo) FirstOrInit() (*model.SeatSmartLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartLog), nil
	}
}

func (s seatSmartLogDo) FirstOrCreate() (*model.SeatSmartLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartLog), nil
	}
}

func (s seatSmartLogDo) FindByPage(offset int, limit int) (result []*model.SeatSmartLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatSmartLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatSmartLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatSmartLogDo) Delete(models ...*model.SeatSmartLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatSmartLogDo) withDO(do gen.Dao) *seatSmartLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
