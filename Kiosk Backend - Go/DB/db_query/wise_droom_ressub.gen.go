// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseDroomRessub(db *gorm.DB, opts ...gen.DOOption) wiseDroomRessub {
	_wiseDroomRessub := wiseDroomRessub{}

	_wiseDroomRessub.wiseDroomRessubDo.UseDB(db, opts...)
	_wiseDroomRessub.wiseDroomRessubDo.UseModel(&model.WiseDroomRessub{})

	tableName := _wiseDroomRessub.wiseDroomRessubDo.TableName()
	_wiseDroomRessub.ALL = field.NewAsterisk(tableName)
	_wiseDroomRessub.ReserveNo = field.NewString(tableName, "reserve_no")
	_wiseDroomRessub.UserID = field.NewString(tableName, "user_id")
	_wiseDroomRessub.UserName = field.NewString(tableName, "user_name")
	_wiseDroomRessub.CheckYn = field.NewString(tableName, "check_yn")
	_wiseDroomRessub.CheckTime = field.NewString(tableName, "check_time")
	_wiseDroomRessub.ReserveStat = field.NewInt64(tableName, "reserve_stat")
	_wiseDroomRessub.Bigo = field.NewString(tableName, "bigo")

	_wiseDroomRessub.fillFieldMap()

	return _wiseDroomRessub
}

type wiseDroomRessub struct {
	wiseDroomRessubDo

	ALL         field.Asterisk
	ReserveNo   field.String
	UserID      field.String
	UserName    field.String
	CheckYn     field.String
	CheckTime   field.String
	ReserveStat field.Int64
	Bigo        field.String

	fieldMap map[string]field.Expr
}

func (w wiseDroomRessub) Table(newTableName string) *wiseDroomRessub {
	w.wiseDroomRessubDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseDroomRessub) As(alias string) *wiseDroomRessub {
	w.wiseDroomRessubDo.DO = *(w.wiseDroomRessubDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseDroomRessub) updateTableName(table string) *wiseDroomRessub {
	w.ALL = field.NewAsterisk(table)
	w.ReserveNo = field.NewString(table, "reserve_no")
	w.UserID = field.NewString(table, "user_id")
	w.UserName = field.NewString(table, "user_name")
	w.CheckYn = field.NewString(table, "check_yn")
	w.CheckTime = field.NewString(table, "check_time")
	w.ReserveStat = field.NewInt64(table, "reserve_stat")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseDroomRessub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseDroomRessub) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["reserve_no"] = w.ReserveNo
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["user_name"] = w.UserName
	w.fieldMap["check_yn"] = w.CheckYn
	w.fieldMap["check_time"] = w.CheckTime
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseDroomRessub) clone(db *gorm.DB) wiseDroomRessub {
	w.wiseDroomRessubDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseDroomRessub) replaceDB(db *gorm.DB) wiseDroomRessub {
	w.wiseDroomRessubDo.ReplaceDB(db)
	return w
}

type wiseDroomRessubDo struct{ gen.DO }

type IWiseDroomRessubDo interface {
	gen.SubQuery
	Debug() IWiseDroomRessubDo
	WithContext(ctx context.Context) IWiseDroomRessubDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseDroomRessubDo
	WriteDB() IWiseDroomRessubDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseDroomRessubDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseDroomRessubDo
	Not(conds ...gen.Condition) IWiseDroomRessubDo
	Or(conds ...gen.Condition) IWiseDroomRessubDo
	Select(conds ...field.Expr) IWiseDroomRessubDo
	Where(conds ...gen.Condition) IWiseDroomRessubDo
	Order(conds ...field.Expr) IWiseDroomRessubDo
	Distinct(cols ...field.Expr) IWiseDroomRessubDo
	Omit(cols ...field.Expr) IWiseDroomRessubDo
	Join(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo
	Group(cols ...field.Expr) IWiseDroomRessubDo
	Having(conds ...gen.Condition) IWiseDroomRessubDo
	Limit(limit int) IWiseDroomRessubDo
	Offset(offset int) IWiseDroomRessubDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseDroomRessubDo
	Unscoped() IWiseDroomRessubDo
	Create(values ...*model.WiseDroomRessub) error
	CreateInBatches(values []*model.WiseDroomRessub, batchSize int) error
	Save(values ...*model.WiseDroomRessub) error
	First() (*model.WiseDroomRessub, error)
	Take() (*model.WiseDroomRessub, error)
	Last() (*model.WiseDroomRessub, error)
	Find() ([]*model.WiseDroomRessub, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseDroomRessub, err error)
	FindInBatches(result *[]*model.WiseDroomRessub, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseDroomRessub) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseDroomRessubDo
	Assign(attrs ...field.AssignExpr) IWiseDroomRessubDo
	Joins(fields ...field.RelationField) IWiseDroomRessubDo
	Preload(fields ...field.RelationField) IWiseDroomRessubDo
	FirstOrInit() (*model.WiseDroomRessub, error)
	FirstOrCreate() (*model.WiseDroomRessub, error)
	FindByPage(offset int, limit int) (result []*model.WiseDroomRessub, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseDroomRessubDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseDroomRessubDo) Debug() IWiseDroomRessubDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseDroomRessubDo) WithContext(ctx context.Context) IWiseDroomRessubDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseDroomRessubDo) ReadDB() IWiseDroomRessubDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseDroomRessubDo) WriteDB() IWiseDroomRessubDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseDroomRessubDo) Session(config *gorm.Session) IWiseDroomRessubDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseDroomRessubDo) Clauses(conds ...clause.Expression) IWiseDroomRessubDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseDroomRessubDo) Returning(value interface{}, columns ...string) IWiseDroomRessubDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseDroomRessubDo) Not(conds ...gen.Condition) IWiseDroomRessubDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseDroomRessubDo) Or(conds ...gen.Condition) IWiseDroomRessubDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseDroomRessubDo) Select(conds ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseDroomRessubDo) Where(conds ...gen.Condition) IWiseDroomRessubDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseDroomRessubDo) Order(conds ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseDroomRessubDo) Distinct(cols ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseDroomRessubDo) Omit(cols ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseDroomRessubDo) Join(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseDroomRessubDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseDroomRessubDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseDroomRessubDo) Group(cols ...field.Expr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseDroomRessubDo) Having(conds ...gen.Condition) IWiseDroomRessubDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseDroomRessubDo) Limit(limit int) IWiseDroomRessubDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseDroomRessubDo) Offset(offset int) IWiseDroomRessubDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseDroomRessubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseDroomRessubDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseDroomRessubDo) Unscoped() IWiseDroomRessubDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseDroomRessubDo) Create(values ...*model.WiseDroomRessub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseDroomRessubDo) CreateInBatches(values []*model.WiseDroomRessub, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseDroomRessubDo) Save(values ...*model.WiseDroomRessub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseDroomRessubDo) First() (*model.WiseDroomRessub, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomRessub), nil
	}
}

func (w wiseDroomRessubDo) Take() (*model.WiseDroomRessub, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomRessub), nil
	}
}

func (w wiseDroomRessubDo) Last() (*model.WiseDroomRessub, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomRessub), nil
	}
}

func (w wiseDroomRessubDo) Find() ([]*model.WiseDroomRessub, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseDroomRessub), err
}

func (w wiseDroomRessubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseDroomRessub, err error) {
	buf := make([]*model.WiseDroomRessub, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseDroomRessubDo) FindInBatches(result *[]*model.WiseDroomRessub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseDroomRessubDo) Attrs(attrs ...field.AssignExpr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseDroomRessubDo) Assign(attrs ...field.AssignExpr) IWiseDroomRessubDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseDroomRessubDo) Joins(fields ...field.RelationField) IWiseDroomRessubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseDroomRessubDo) Preload(fields ...field.RelationField) IWiseDroomRessubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseDroomRessubDo) FirstOrInit() (*model.WiseDroomRessub, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomRessub), nil
	}
}

func (w wiseDroomRessubDo) FirstOrCreate() (*model.WiseDroomRessub, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomRessub), nil
	}
}

func (w wiseDroomRessubDo) FindByPage(offset int, limit int) (result []*model.WiseDroomRessub, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseDroomRessubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseDroomRessubDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseDroomRessubDo) Delete(models ...*model.WiseDroomRessub) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseDroomRessubDo) withDO(do gen.Dao) *wiseDroomRessubDo {
	w.DO = *do.(*gen.DO)
	return w
}
