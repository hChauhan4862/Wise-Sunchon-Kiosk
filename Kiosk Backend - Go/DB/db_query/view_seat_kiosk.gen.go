// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_view_seat_kiosk(db *gorm.DB, opts ...gen.DOOption) hCV_view_seat_kiosk {
	_hCV_view_seat_kiosk := hCV_view_seat_kiosk{}

	_hCV_view_seat_kiosk.hCV_view_seat_kioskDo.UseDB(db, opts...)
	_hCV_view_seat_kiosk.hCV_view_seat_kioskDo.UseModel(&model.HCV_view_seat_kiosk{})

	tableName := _hCV_view_seat_kiosk.hCV_view_seat_kioskDo.TableName()
	_hCV_view_seat_kiosk.ALL = field.NewAsterisk(tableName)
	_hCV_view_seat_kiosk.KioskNo = field.NewInt64(tableName, "KioskNo")
	_hCV_view_seat_kiosk.NAME = field.NewString(tableName, "NAME")
	_hCV_view_seat_kiosk.ENNAME = field.NewString(tableName, "EN_NAME")
	_hCV_view_seat_kiosk.IPAddr = field.NewString(tableName, "IPAddr")
	_hCV_view_seat_kiosk.MAC = field.NewString(tableName, "MAC")
	_hCV_view_seat_kiosk.LibNo = field.NewInt64(tableName, "LibNo")
	_hCV_view_seat_kiosk.FloorNo = field.NewInt64(tableName, "FloorNo")
	_hCV_view_seat_kiosk.Issuefrom = field.NewInt64(tableName, "Issuefrom")
	_hCV_view_seat_kiosk.IssueDetail = field.NewString(tableName, "IssueDetail")
	_hCV_view_seat_kiosk.KioskStatus = field.NewInt64(tableName, "KioskStatus")
	_hCV_view_seat_kiosk.AssignLibOnly = field.NewInt64(tableName, "AssignLibOnly")
	_hCV_view_seat_kiosk.Assignable = field.NewInt64(tableName, "Assignable")
	_hCV_view_seat_kiosk.Movable = field.NewInt64(tableName, "Movable")
	_hCV_view_seat_kiosk.Extendable = field.NewInt64(tableName, "Extendable")
	_hCV_view_seat_kiosk.Returnable = field.NewInt64(tableName, "Returnable")
	_hCV_view_seat_kiosk.StatusMemo = field.NewString(tableName, "StatusMemo")
	_hCV_view_seat_kiosk.InsertTime = field.NewTime(tableName, "InsertTime")
	_hCV_view_seat_kiosk.AdminID = field.NewString(tableName, "AdminID")
	_hCV_view_seat_kiosk.IsDelete = field.NewInt64(tableName, "IsDelete")
	_hCV_view_seat_kiosk.PaperAmount = field.NewInt64(tableName, "PaperAmount")
	_hCV_view_seat_kiosk.PaperReplaceTime = field.NewTime(tableName, "PaperReplaceTime")
	_hCV_view_seat_kiosk.PaperReplaceAdmin = field.NewString(tableName, "PaperReplaceAdmin")
	_hCV_view_seat_kiosk.PrintErrorCode = field.NewInt64(tableName, "PrintErrorCode")
	_hCV_view_seat_kiosk.PrintErrorTitle = field.NewString(tableName, "PrintErrorTitle")
	_hCV_view_seat_kiosk.OnTime = field.NewInt64(tableName, "OnTime")
	_hCV_view_seat_kiosk.OffTime = field.NewInt64(tableName, "OffTime")
	_hCV_view_seat_kiosk.Floor = field.NewInt64(tableName, "floor")
	_hCV_view_seat_kiosk.FloorName = field.NewString(tableName, "floor_name")
	_hCV_view_seat_kiosk.FloorEnName = field.NewString(tableName, "floor_en_name")
	_hCV_view_seat_kiosk.LibName = field.NewString(tableName, "lib_name")
	_hCV_view_seat_kiosk.LibEnName = field.NewString(tableName, "lib_en_name")

	_hCV_view_seat_kiosk.fillFieldMap()

	return _hCV_view_seat_kiosk
}

type hCV_view_seat_kiosk struct {
	hCV_view_seat_kioskDo

	ALL               field.Asterisk
	KioskNo           field.Int64
	NAME              field.String
	ENNAME            field.String
	IPAddr            field.String
	MAC               field.String
	LibNo             field.Int64
	FloorNo           field.Int64
	Issuefrom         field.Int64
	IssueDetail       field.String
	KioskStatus       field.Int64
	AssignLibOnly     field.Int64
	Assignable        field.Int64
	Movable           field.Int64
	Extendable        field.Int64
	Returnable        field.Int64
	StatusMemo        field.String
	InsertTime        field.Time
	AdminID           field.String
	IsDelete          field.Int64
	PaperAmount       field.Int64
	PaperReplaceTime  field.Time
	PaperReplaceAdmin field.String
	PrintErrorCode    field.Int64
	PrintErrorTitle   field.String
	OnTime            field.Int64
	OffTime           field.Int64
	Floor             field.Int64
	FloorName         field.String
	FloorEnName       field.String
	LibName           field.String
	LibEnName         field.String

	fieldMap map[string]field.Expr
}

func (h hCV_view_seat_kiosk) Table(newTableName string) *hCV_view_seat_kiosk {
	h.hCV_view_seat_kioskDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_view_seat_kiosk) As(alias string) *hCV_view_seat_kiosk {
	h.hCV_view_seat_kioskDo.DO = *(h.hCV_view_seat_kioskDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_view_seat_kiosk) updateTableName(table string) *hCV_view_seat_kiosk {
	h.ALL = field.NewAsterisk(table)
	h.KioskNo = field.NewInt64(table, "KioskNo")
	h.NAME = field.NewString(table, "NAME")
	h.ENNAME = field.NewString(table, "EN_NAME")
	h.IPAddr = field.NewString(table, "IPAddr")
	h.MAC = field.NewString(table, "MAC")
	h.LibNo = field.NewInt64(table, "LibNo")
	h.FloorNo = field.NewInt64(table, "FloorNo")
	h.Issuefrom = field.NewInt64(table, "Issuefrom")
	h.IssueDetail = field.NewString(table, "IssueDetail")
	h.KioskStatus = field.NewInt64(table, "KioskStatus")
	h.AssignLibOnly = field.NewInt64(table, "AssignLibOnly")
	h.Assignable = field.NewInt64(table, "Assignable")
	h.Movable = field.NewInt64(table, "Movable")
	h.Extendable = field.NewInt64(table, "Extendable")
	h.Returnable = field.NewInt64(table, "Returnable")
	h.StatusMemo = field.NewString(table, "StatusMemo")
	h.InsertTime = field.NewTime(table, "InsertTime")
	h.AdminID = field.NewString(table, "AdminID")
	h.IsDelete = field.NewInt64(table, "IsDelete")
	h.PaperAmount = field.NewInt64(table, "PaperAmount")
	h.PaperReplaceTime = field.NewTime(table, "PaperReplaceTime")
	h.PaperReplaceAdmin = field.NewString(table, "PaperReplaceAdmin")
	h.PrintErrorCode = field.NewInt64(table, "PrintErrorCode")
	h.PrintErrorTitle = field.NewString(table, "PrintErrorTitle")
	h.OnTime = field.NewInt64(table, "OnTime")
	h.OffTime = field.NewInt64(table, "OffTime")
	h.Floor = field.NewInt64(table, "floor")
	h.FloorName = field.NewString(table, "floor_name")
	h.FloorEnName = field.NewString(table, "floor_en_name")
	h.LibName = field.NewString(table, "lib_name")
	h.LibEnName = field.NewString(table, "lib_en_name")

	h.fillFieldMap()

	return h
}

func (h *hCV_view_seat_kiosk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_view_seat_kiosk) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 31)
	h.fieldMap["KioskNo"] = h.KioskNo
	h.fieldMap["NAME"] = h.NAME
	h.fieldMap["EN_NAME"] = h.ENNAME
	h.fieldMap["IPAddr"] = h.IPAddr
	h.fieldMap["MAC"] = h.MAC
	h.fieldMap["LibNo"] = h.LibNo
	h.fieldMap["FloorNo"] = h.FloorNo
	h.fieldMap["Issuefrom"] = h.Issuefrom
	h.fieldMap["IssueDetail"] = h.IssueDetail
	h.fieldMap["KioskStatus"] = h.KioskStatus
	h.fieldMap["AssignLibOnly"] = h.AssignLibOnly
	h.fieldMap["Assignable"] = h.Assignable
	h.fieldMap["Movable"] = h.Movable
	h.fieldMap["Extendable"] = h.Extendable
	h.fieldMap["Returnable"] = h.Returnable
	h.fieldMap["StatusMemo"] = h.StatusMemo
	h.fieldMap["InsertTime"] = h.InsertTime
	h.fieldMap["AdminID"] = h.AdminID
	h.fieldMap["IsDelete"] = h.IsDelete
	h.fieldMap["PaperAmount"] = h.PaperAmount
	h.fieldMap["PaperReplaceTime"] = h.PaperReplaceTime
	h.fieldMap["PaperReplaceAdmin"] = h.PaperReplaceAdmin
	h.fieldMap["PrintErrorCode"] = h.PrintErrorCode
	h.fieldMap["PrintErrorTitle"] = h.PrintErrorTitle
	h.fieldMap["OnTime"] = h.OnTime
	h.fieldMap["OffTime"] = h.OffTime
	h.fieldMap["floor"] = h.Floor
	h.fieldMap["floor_name"] = h.FloorName
	h.fieldMap["floor_en_name"] = h.FloorEnName
	h.fieldMap["lib_name"] = h.LibName
	h.fieldMap["lib_en_name"] = h.LibEnName
}

func (h hCV_view_seat_kiosk) clone(db *gorm.DB) hCV_view_seat_kiosk {
	h.hCV_view_seat_kioskDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_view_seat_kiosk) replaceDB(db *gorm.DB) hCV_view_seat_kiosk {
	h.hCV_view_seat_kioskDo.ReplaceDB(db)
	return h
}

type hCV_view_seat_kioskDo struct{ gen.DO }

type IHCV_view_seat_kioskDo interface {
	gen.SubQuery
	Debug() IHCV_view_seat_kioskDo
	WithContext(ctx context.Context) IHCV_view_seat_kioskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_view_seat_kioskDo
	WriteDB() IHCV_view_seat_kioskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_view_seat_kioskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_view_seat_kioskDo
	Not(conds ...gen.Condition) IHCV_view_seat_kioskDo
	Or(conds ...gen.Condition) IHCV_view_seat_kioskDo
	Select(conds ...field.Expr) IHCV_view_seat_kioskDo
	Where(conds ...gen.Condition) IHCV_view_seat_kioskDo
	Order(conds ...field.Expr) IHCV_view_seat_kioskDo
	Distinct(cols ...field.Expr) IHCV_view_seat_kioskDo
	Omit(cols ...field.Expr) IHCV_view_seat_kioskDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo
	Group(cols ...field.Expr) IHCV_view_seat_kioskDo
	Having(conds ...gen.Condition) IHCV_view_seat_kioskDo
	Limit(limit int) IHCV_view_seat_kioskDo
	Offset(offset int) IHCV_view_seat_kioskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_kioskDo
	Unscoped() IHCV_view_seat_kioskDo
	Create(values ...*model.HCV_view_seat_kiosk) error
	CreateInBatches(values []*model.HCV_view_seat_kiosk, batchSize int) error
	Save(values ...*model.HCV_view_seat_kiosk) error
	First() (*model.HCV_view_seat_kiosk, error)
	Take() (*model.HCV_view_seat_kiosk, error)
	Last() (*model.HCV_view_seat_kiosk, error)
	Find() ([]*model.HCV_view_seat_kiosk, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_kiosk, err error)
	FindInBatches(result *[]*model.HCV_view_seat_kiosk, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_view_seat_kiosk) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_view_seat_kioskDo
	Assign(attrs ...field.AssignExpr) IHCV_view_seat_kioskDo
	Joins(fields ...field.RelationField) IHCV_view_seat_kioskDo
	Preload(fields ...field.RelationField) IHCV_view_seat_kioskDo
	FirstOrInit() (*model.HCV_view_seat_kiosk, error)
	FirstOrCreate() (*model.HCV_view_seat_kiosk, error)
	FindByPage(offset int, limit int) (result []*model.HCV_view_seat_kiosk, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_view_seat_kioskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_view_seat_kioskDo) Debug() IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_view_seat_kioskDo) WithContext(ctx context.Context) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_view_seat_kioskDo) ReadDB() IHCV_view_seat_kioskDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_view_seat_kioskDo) WriteDB() IHCV_view_seat_kioskDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_view_seat_kioskDo) Session(config *gorm.Session) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_view_seat_kioskDo) Clauses(conds ...clause.Expression) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_view_seat_kioskDo) Returning(value interface{}, columns ...string) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_view_seat_kioskDo) Not(conds ...gen.Condition) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_view_seat_kioskDo) Or(conds ...gen.Condition) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_view_seat_kioskDo) Select(conds ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_view_seat_kioskDo) Where(conds ...gen.Condition) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_view_seat_kioskDo) Order(conds ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_view_seat_kioskDo) Distinct(cols ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_view_seat_kioskDo) Omit(cols ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_view_seat_kioskDo) Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_view_seat_kioskDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_view_seat_kioskDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_view_seat_kioskDo) Group(cols ...field.Expr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_view_seat_kioskDo) Having(conds ...gen.Condition) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_view_seat_kioskDo) Limit(limit int) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_view_seat_kioskDo) Offset(offset int) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_view_seat_kioskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_view_seat_kioskDo) Unscoped() IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_view_seat_kioskDo) Create(values ...*model.HCV_view_seat_kiosk) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_view_seat_kioskDo) CreateInBatches(values []*model.HCV_view_seat_kiosk, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_view_seat_kioskDo) Save(values ...*model.HCV_view_seat_kiosk) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_view_seat_kioskDo) First() (*model.HCV_view_seat_kiosk, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_kiosk), nil
	}
}

func (h hCV_view_seat_kioskDo) Take() (*model.HCV_view_seat_kiosk, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_kiosk), nil
	}
}

func (h hCV_view_seat_kioskDo) Last() (*model.HCV_view_seat_kiosk, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_kiosk), nil
	}
}

func (h hCV_view_seat_kioskDo) Find() ([]*model.HCV_view_seat_kiosk, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_view_seat_kiosk), err
}

func (h hCV_view_seat_kioskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_kiosk, err error) {
	buf := make([]*model.HCV_view_seat_kiosk, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_view_seat_kioskDo) FindInBatches(result *[]*model.HCV_view_seat_kiosk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_view_seat_kioskDo) Attrs(attrs ...field.AssignExpr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_view_seat_kioskDo) Assign(attrs ...field.AssignExpr) IHCV_view_seat_kioskDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_view_seat_kioskDo) Joins(fields ...field.RelationField) IHCV_view_seat_kioskDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_view_seat_kioskDo) Preload(fields ...field.RelationField) IHCV_view_seat_kioskDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_view_seat_kioskDo) FirstOrInit() (*model.HCV_view_seat_kiosk, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_kiosk), nil
	}
}

func (h hCV_view_seat_kioskDo) FirstOrCreate() (*model.HCV_view_seat_kiosk, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_kiosk), nil
	}
}

func (h hCV_view_seat_kioskDo) FindByPage(offset int, limit int) (result []*model.HCV_view_seat_kiosk, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_view_seat_kioskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_view_seat_kioskDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_view_seat_kioskDo) Delete(models ...*model.HCV_view_seat_kiosk) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_view_seat_kioskDo) withDO(do gen.Dao) *hCV_view_seat_kioskDo {
	h.DO = *do.(*gen.DO)
	return h
}
