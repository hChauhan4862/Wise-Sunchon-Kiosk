// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatKiosk2(db *gorm.DB, opts ...gen.DOOption) seatKiosk2 {
	_seatKiosk2 := seatKiosk2{}

	_seatKiosk2.seatKiosk2Do.UseDB(db, opts...)
	_seatKiosk2.seatKiosk2Do.UseModel(&model.SeatKiosk2{})

	tableName := _seatKiosk2.seatKiosk2Do.TableName()
	_seatKiosk2.ALL = field.NewAsterisk(tableName)
	_seatKiosk2.KioskNo = field.NewInt64(tableName, "KioskNo")
	_seatKiosk2.NAME = field.NewString(tableName, "NAME")
	_seatKiosk2.ENNAME = field.NewString(tableName, "EN_NAME")
	_seatKiosk2.IPAddr = field.NewString(tableName, "IPAddr")
	_seatKiosk2.MAC = field.NewString(tableName, "MAC")
	_seatKiosk2.LibNo = field.NewInt64(tableName, "LibNo")
	_seatKiosk2.FloorNo = field.NewInt64(tableName, "FloorNo")
	_seatKiosk2.Issuefrom = field.NewInt64(tableName, "Issuefrom")
	_seatKiosk2.IssueDetail = field.NewString(tableName, "IssueDetail")
	_seatKiosk2.KioskStatus = field.NewInt64(tableName, "KioskStatus")
	_seatKiosk2.AssignLibOnly = field.NewInt64(tableName, "AssignLibOnly")
	_seatKiosk2.Assignable = field.NewInt64(tableName, "Assignable")
	_seatKiosk2.Movable = field.NewInt64(tableName, "Movable")
	_seatKiosk2.Extendable = field.NewInt64(tableName, "Extendable")
	_seatKiosk2.Returnable = field.NewInt64(tableName, "Returnable")
	_seatKiosk2.StatusMemo = field.NewString(tableName, "StatusMemo")
	_seatKiosk2.InsertTime = field.NewTime(tableName, "InsertTime")
	_seatKiosk2.AdminID = field.NewString(tableName, "AdminID")
	_seatKiosk2.IsDelete = field.NewInt64(tableName, "IsDelete")
	_seatKiosk2.PaperAmount = field.NewInt64(tableName, "PaperAmount")
	_seatKiosk2.PaperReplaceTime = field.NewTime(tableName, "PaperReplaceTime")
	_seatKiosk2.PaperReplaceAdmin = field.NewString(tableName, "PaperReplaceAdmin")
	_seatKiosk2.PrintErrorCode = field.NewInt64(tableName, "PrintErrorCode")
	_seatKiosk2.PrintErrorTitle = field.NewString(tableName, "PrintErrorTitle")
	_seatKiosk2.OnTime = field.NewInt64(tableName, "OnTime")
	_seatKiosk2.OffTime = field.NewInt64(tableName, "OffTime")

	_seatKiosk2.fillFieldMap()

	return _seatKiosk2
}

type seatKiosk2 struct {
	seatKiosk2Do

	ALL               field.Asterisk
	KioskNo           field.Int64
	NAME              field.String
	ENNAME            field.String
	IPAddr            field.String
	MAC               field.String
	LibNo             field.Int64
	FloorNo           field.Int64
	Issuefrom         field.Int64
	IssueDetail       field.String
	KioskStatus       field.Int64
	AssignLibOnly     field.Int64
	Assignable        field.Int64
	Movable           field.Int64
	Extendable        field.Int64
	Returnable        field.Int64
	StatusMemo        field.String
	InsertTime        field.Time
	AdminID           field.String
	IsDelete          field.Int64
	PaperAmount       field.Int64
	PaperReplaceTime  field.Time
	PaperReplaceAdmin field.String
	PrintErrorCode    field.Int64
	PrintErrorTitle   field.String
	OnTime            field.Int64
	OffTime           field.Int64

	fieldMap map[string]field.Expr
}

func (s seatKiosk2) Table(newTableName string) *seatKiosk2 {
	s.seatKiosk2Do.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatKiosk2) As(alias string) *seatKiosk2 {
	s.seatKiosk2Do.DO = *(s.seatKiosk2Do.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatKiosk2) updateTableName(table string) *seatKiosk2 {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "KioskNo")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")
	s.IPAddr = field.NewString(table, "IPAddr")
	s.MAC = field.NewString(table, "MAC")
	s.LibNo = field.NewInt64(table, "LibNo")
	s.FloorNo = field.NewInt64(table, "FloorNo")
	s.Issuefrom = field.NewInt64(table, "Issuefrom")
	s.IssueDetail = field.NewString(table, "IssueDetail")
	s.KioskStatus = field.NewInt64(table, "KioskStatus")
	s.AssignLibOnly = field.NewInt64(table, "AssignLibOnly")
	s.Assignable = field.NewInt64(table, "Assignable")
	s.Movable = field.NewInt64(table, "Movable")
	s.Extendable = field.NewInt64(table, "Extendable")
	s.Returnable = field.NewInt64(table, "Returnable")
	s.StatusMemo = field.NewString(table, "StatusMemo")
	s.InsertTime = field.NewTime(table, "InsertTime")
	s.AdminID = field.NewString(table, "AdminID")
	s.IsDelete = field.NewInt64(table, "IsDelete")
	s.PaperAmount = field.NewInt64(table, "PaperAmount")
	s.PaperReplaceTime = field.NewTime(table, "PaperReplaceTime")
	s.PaperReplaceAdmin = field.NewString(table, "PaperReplaceAdmin")
	s.PrintErrorCode = field.NewInt64(table, "PrintErrorCode")
	s.PrintErrorTitle = field.NewString(table, "PrintErrorTitle")
	s.OnTime = field.NewInt64(table, "OnTime")
	s.OffTime = field.NewInt64(table, "OffTime")

	s.fillFieldMap()

	return s
}

func (s *seatKiosk2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatKiosk2) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 26)
	s.fieldMap["KioskNo"] = s.KioskNo
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
	s.fieldMap["IPAddr"] = s.IPAddr
	s.fieldMap["MAC"] = s.MAC
	s.fieldMap["LibNo"] = s.LibNo
	s.fieldMap["FloorNo"] = s.FloorNo
	s.fieldMap["Issuefrom"] = s.Issuefrom
	s.fieldMap["IssueDetail"] = s.IssueDetail
	s.fieldMap["KioskStatus"] = s.KioskStatus
	s.fieldMap["AssignLibOnly"] = s.AssignLibOnly
	s.fieldMap["Assignable"] = s.Assignable
	s.fieldMap["Movable"] = s.Movable
	s.fieldMap["Extendable"] = s.Extendable
	s.fieldMap["Returnable"] = s.Returnable
	s.fieldMap["StatusMemo"] = s.StatusMemo
	s.fieldMap["InsertTime"] = s.InsertTime
	s.fieldMap["AdminID"] = s.AdminID
	s.fieldMap["IsDelete"] = s.IsDelete
	s.fieldMap["PaperAmount"] = s.PaperAmount
	s.fieldMap["PaperReplaceTime"] = s.PaperReplaceTime
	s.fieldMap["PaperReplaceAdmin"] = s.PaperReplaceAdmin
	s.fieldMap["PrintErrorCode"] = s.PrintErrorCode
	s.fieldMap["PrintErrorTitle"] = s.PrintErrorTitle
	s.fieldMap["OnTime"] = s.OnTime
	s.fieldMap["OffTime"] = s.OffTime
}

func (s seatKiosk2) clone(db *gorm.DB) seatKiosk2 {
	s.seatKiosk2Do.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatKiosk2) replaceDB(db *gorm.DB) seatKiosk2 {
	s.seatKiosk2Do.ReplaceDB(db)
	return s
}

type seatKiosk2Do struct{ gen.DO }

type ISeatKiosk2Do interface {
	gen.SubQuery
	Debug() ISeatKiosk2Do
	WithContext(ctx context.Context) ISeatKiosk2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatKiosk2Do
	WriteDB() ISeatKiosk2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatKiosk2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatKiosk2Do
	Not(conds ...gen.Condition) ISeatKiosk2Do
	Or(conds ...gen.Condition) ISeatKiosk2Do
	Select(conds ...field.Expr) ISeatKiosk2Do
	Where(conds ...gen.Condition) ISeatKiosk2Do
	Order(conds ...field.Expr) ISeatKiosk2Do
	Distinct(cols ...field.Expr) ISeatKiosk2Do
	Omit(cols ...field.Expr) ISeatKiosk2Do
	Join(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do
	Group(cols ...field.Expr) ISeatKiosk2Do
	Having(conds ...gen.Condition) ISeatKiosk2Do
	Limit(limit int) ISeatKiosk2Do
	Offset(offset int) ISeatKiosk2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatKiosk2Do
	Unscoped() ISeatKiosk2Do
	Create(values ...*model.SeatKiosk2) error
	CreateInBatches(values []*model.SeatKiosk2, batchSize int) error
	Save(values ...*model.SeatKiosk2) error
	First() (*model.SeatKiosk2, error)
	Take() (*model.SeatKiosk2, error)
	Last() (*model.SeatKiosk2, error)
	Find() ([]*model.SeatKiosk2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatKiosk2, err error)
	FindInBatches(result *[]*model.SeatKiosk2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatKiosk2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatKiosk2Do
	Assign(attrs ...field.AssignExpr) ISeatKiosk2Do
	Joins(fields ...field.RelationField) ISeatKiosk2Do
	Preload(fields ...field.RelationField) ISeatKiosk2Do
	FirstOrInit() (*model.SeatKiosk2, error)
	FirstOrCreate() (*model.SeatKiosk2, error)
	FindByPage(offset int, limit int) (result []*model.SeatKiosk2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatKiosk2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatKiosk2Do) Debug() ISeatKiosk2Do {
	return s.withDO(s.DO.Debug())
}

func (s seatKiosk2Do) WithContext(ctx context.Context) ISeatKiosk2Do {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatKiosk2Do) ReadDB() ISeatKiosk2Do {
	return s.Clauses(dbresolver.Read)
}

func (s seatKiosk2Do) WriteDB() ISeatKiosk2Do {
	return s.Clauses(dbresolver.Write)
}

func (s seatKiosk2Do) Session(config *gorm.Session) ISeatKiosk2Do {
	return s.withDO(s.DO.Session(config))
}

func (s seatKiosk2Do) Clauses(conds ...clause.Expression) ISeatKiosk2Do {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatKiosk2Do) Returning(value interface{}, columns ...string) ISeatKiosk2Do {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatKiosk2Do) Not(conds ...gen.Condition) ISeatKiosk2Do {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatKiosk2Do) Or(conds ...gen.Condition) ISeatKiosk2Do {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatKiosk2Do) Select(conds ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatKiosk2Do) Where(conds ...gen.Condition) ISeatKiosk2Do {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatKiosk2Do) Order(conds ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatKiosk2Do) Distinct(cols ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatKiosk2Do) Omit(cols ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatKiosk2Do) Join(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatKiosk2Do) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatKiosk2Do) RightJoin(table schema.Tabler, on ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatKiosk2Do) Group(cols ...field.Expr) ISeatKiosk2Do {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatKiosk2Do) Having(conds ...gen.Condition) ISeatKiosk2Do {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatKiosk2Do) Limit(limit int) ISeatKiosk2Do {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatKiosk2Do) Offset(offset int) ISeatKiosk2Do {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatKiosk2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatKiosk2Do {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatKiosk2Do) Unscoped() ISeatKiosk2Do {
	return s.withDO(s.DO.Unscoped())
}

func (s seatKiosk2Do) Create(values ...*model.SeatKiosk2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatKiosk2Do) CreateInBatches(values []*model.SeatKiosk2, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatKiosk2Do) Save(values ...*model.SeatKiosk2) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatKiosk2Do) First() (*model.SeatKiosk2, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk2), nil
	}
}

func (s seatKiosk2Do) Take() (*model.SeatKiosk2, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk2), nil
	}
}

func (s seatKiosk2Do) Last() (*model.SeatKiosk2, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk2), nil
	}
}

func (s seatKiosk2Do) Find() ([]*model.SeatKiosk2, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatKiosk2), err
}

func (s seatKiosk2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatKiosk2, err error) {
	buf := make([]*model.SeatKiosk2, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatKiosk2Do) FindInBatches(result *[]*model.SeatKiosk2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatKiosk2Do) Attrs(attrs ...field.AssignExpr) ISeatKiosk2Do {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatKiosk2Do) Assign(attrs ...field.AssignExpr) ISeatKiosk2Do {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatKiosk2Do) Joins(fields ...field.RelationField) ISeatKiosk2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatKiosk2Do) Preload(fields ...field.RelationField) ISeatKiosk2Do {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatKiosk2Do) FirstOrInit() (*model.SeatKiosk2, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk2), nil
	}
}

func (s seatKiosk2Do) FirstOrCreate() (*model.SeatKiosk2, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk2), nil
	}
}

func (s seatKiosk2Do) FindByPage(offset int, limit int) (result []*model.SeatKiosk2, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatKiosk2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatKiosk2Do) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatKiosk2Do) Delete(models ...*model.SeatKiosk2) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatKiosk2Do) withDO(do gen.Dao) *seatKiosk2Do {
	s.DO = *do.(*gen.DO)
	return s
}
