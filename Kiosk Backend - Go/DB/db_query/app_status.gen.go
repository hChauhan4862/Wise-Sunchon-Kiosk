// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPPSTATUS(db *gorm.DB, opts ...gen.DOOption) aPPSTATUS {
	_aPPSTATUS := aPPSTATUS{}

	_aPPSTATUS.aPPSTATUSDo.UseDB(db, opts...)
	_aPPSTATUS.aPPSTATUSDo.UseModel(&model.APPSTATUS{})

	tableName := _aPPSTATUS.aPPSTATUSDo.TableName()
	_aPPSTATUS.ALL = field.NewAsterisk(tableName)
	_aPPSTATUS.ALLSTATUS = field.NewInt64(tableName, "ALL_STATUS")
	_aPPSTATUS.KIOSKSTATUS = field.NewInt64(tableName, "KIOSK_STATUS")
	_aPPSTATUS.WEBSTATUS = field.NewInt64(tableName, "WEB_STATUS")
	_aPPSTATUS.MOBILESTATUS = field.NewInt64(tableName, "MOBILE_STATUS")
	_aPPSTATUS.ANDSTATUS = field.NewInt64(tableName, "AND_STATUS")
	_aPPSTATUS.IOSSTATUS = field.NewInt64(tableName, "IOS_STATUS")
	_aPPSTATUS.BIGO = field.NewString(tableName, "BIGO")

	_aPPSTATUS.fillFieldMap()

	return _aPPSTATUS
}

type aPPSTATUS struct {
	aPPSTATUSDo

	ALL          field.Asterisk
	ALLSTATUS    field.Int64
	KIOSKSTATUS  field.Int64
	WEBSTATUS    field.Int64
	MOBILESTATUS field.Int64
	ANDSTATUS    field.Int64
	IOSSTATUS    field.Int64
	BIGO         field.String

	fieldMap map[string]field.Expr
}

func (a aPPSTATUS) Table(newTableName string) *aPPSTATUS {
	a.aPPSTATUSDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPSTATUS) As(alias string) *aPPSTATUS {
	a.aPPSTATUSDo.DO = *(a.aPPSTATUSDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPSTATUS) updateTableName(table string) *aPPSTATUS {
	a.ALL = field.NewAsterisk(table)
	a.ALLSTATUS = field.NewInt64(table, "ALL_STATUS")
	a.KIOSKSTATUS = field.NewInt64(table, "KIOSK_STATUS")
	a.WEBSTATUS = field.NewInt64(table, "WEB_STATUS")
	a.MOBILESTATUS = field.NewInt64(table, "MOBILE_STATUS")
	a.ANDSTATUS = field.NewInt64(table, "AND_STATUS")
	a.IOSSTATUS = field.NewInt64(table, "IOS_STATUS")
	a.BIGO = field.NewString(table, "BIGO")

	a.fillFieldMap()

	return a
}

func (a *aPPSTATUS) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPSTATUS) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["ALL_STATUS"] = a.ALLSTATUS
	a.fieldMap["KIOSK_STATUS"] = a.KIOSKSTATUS
	a.fieldMap["WEB_STATUS"] = a.WEBSTATUS
	a.fieldMap["MOBILE_STATUS"] = a.MOBILESTATUS
	a.fieldMap["AND_STATUS"] = a.ANDSTATUS
	a.fieldMap["IOS_STATUS"] = a.IOSSTATUS
	a.fieldMap["BIGO"] = a.BIGO
}

func (a aPPSTATUS) clone(db *gorm.DB) aPPSTATUS {
	a.aPPSTATUSDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPSTATUS) replaceDB(db *gorm.DB) aPPSTATUS {
	a.aPPSTATUSDo.ReplaceDB(db)
	return a
}

type aPPSTATUSDo struct{ gen.DO }

type IAPPSTATUSDo interface {
	gen.SubQuery
	Debug() IAPPSTATUSDo
	WithContext(ctx context.Context) IAPPSTATUSDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPPSTATUSDo
	WriteDB() IAPPSTATUSDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPPSTATUSDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPPSTATUSDo
	Not(conds ...gen.Condition) IAPPSTATUSDo
	Or(conds ...gen.Condition) IAPPSTATUSDo
	Select(conds ...field.Expr) IAPPSTATUSDo
	Where(conds ...gen.Condition) IAPPSTATUSDo
	Order(conds ...field.Expr) IAPPSTATUSDo
	Distinct(cols ...field.Expr) IAPPSTATUSDo
	Omit(cols ...field.Expr) IAPPSTATUSDo
	Join(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo
	Group(cols ...field.Expr) IAPPSTATUSDo
	Having(conds ...gen.Condition) IAPPSTATUSDo
	Limit(limit int) IAPPSTATUSDo
	Offset(offset int) IAPPSTATUSDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPSTATUSDo
	Unscoped() IAPPSTATUSDo
	Create(values ...*model.APPSTATUS) error
	CreateInBatches(values []*model.APPSTATUS, batchSize int) error
	Save(values ...*model.APPSTATUS) error
	First() (*model.APPSTATUS, error)
	Take() (*model.APPSTATUS, error)
	Last() (*model.APPSTATUS, error)
	Find() ([]*model.APPSTATUS, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPSTATUS, err error)
	FindInBatches(result *[]*model.APPSTATUS, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APPSTATUS) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPPSTATUSDo
	Assign(attrs ...field.AssignExpr) IAPPSTATUSDo
	Joins(fields ...field.RelationField) IAPPSTATUSDo
	Preload(fields ...field.RelationField) IAPPSTATUSDo
	FirstOrInit() (*model.APPSTATUS, error)
	FirstOrCreate() (*model.APPSTATUS, error)
	FindByPage(offset int, limit int) (result []*model.APPSTATUS, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPPSTATUSDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPPSTATUSDo) Debug() IAPPSTATUSDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPSTATUSDo) WithContext(ctx context.Context) IAPPSTATUSDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPSTATUSDo) ReadDB() IAPPSTATUSDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPSTATUSDo) WriteDB() IAPPSTATUSDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPSTATUSDo) Session(config *gorm.Session) IAPPSTATUSDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPSTATUSDo) Clauses(conds ...clause.Expression) IAPPSTATUSDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPSTATUSDo) Returning(value interface{}, columns ...string) IAPPSTATUSDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPSTATUSDo) Not(conds ...gen.Condition) IAPPSTATUSDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPSTATUSDo) Or(conds ...gen.Condition) IAPPSTATUSDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPSTATUSDo) Select(conds ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPSTATUSDo) Where(conds ...gen.Condition) IAPPSTATUSDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPSTATUSDo) Order(conds ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPSTATUSDo) Distinct(cols ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPSTATUSDo) Omit(cols ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPSTATUSDo) Join(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPSTATUSDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPSTATUSDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPSTATUSDo) Group(cols ...field.Expr) IAPPSTATUSDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPSTATUSDo) Having(conds ...gen.Condition) IAPPSTATUSDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPSTATUSDo) Limit(limit int) IAPPSTATUSDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPSTATUSDo) Offset(offset int) IAPPSTATUSDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPSTATUSDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPSTATUSDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPSTATUSDo) Unscoped() IAPPSTATUSDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPSTATUSDo) Create(values ...*model.APPSTATUS) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPSTATUSDo) CreateInBatches(values []*model.APPSTATUS, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPSTATUSDo) Save(values ...*model.APPSTATUS) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPSTATUSDo) First() (*model.APPSTATUS, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPSTATUS), nil
	}
}

func (a aPPSTATUSDo) Take() (*model.APPSTATUS, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPSTATUS), nil
	}
}

func (a aPPSTATUSDo) Last() (*model.APPSTATUS, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPSTATUS), nil
	}
}

func (a aPPSTATUSDo) Find() ([]*model.APPSTATUS, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPSTATUS), err
}

func (a aPPSTATUSDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPSTATUS, err error) {
	buf := make([]*model.APPSTATUS, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPSTATUSDo) FindInBatches(result *[]*model.APPSTATUS, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPSTATUSDo) Attrs(attrs ...field.AssignExpr) IAPPSTATUSDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPSTATUSDo) Assign(attrs ...field.AssignExpr) IAPPSTATUSDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPSTATUSDo) Joins(fields ...field.RelationField) IAPPSTATUSDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPSTATUSDo) Preload(fields ...field.RelationField) IAPPSTATUSDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPSTATUSDo) FirstOrInit() (*model.APPSTATUS, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPSTATUS), nil
	}
}

func (a aPPSTATUSDo) FirstOrCreate() (*model.APPSTATUS, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPSTATUS), nil
	}
}

func (a aPPSTATUSDo) FindByPage(offset int, limit int) (result []*model.APPSTATUS, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPSTATUSDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPSTATUSDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPSTATUSDo) Delete(models ...*model.APPSTATUS) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPSTATUSDo) withDO(do gen.Dao) *aPPSTATUSDo {
	a.DO = *do.(*gen.DO)
	return a
}
