// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseSroom(db *gorm.DB, opts ...gen.DOOption) wiseSroom {
	_wiseSroom := wiseSroom{}

	_wiseSroom.wiseSroomDo.UseDB(db, opts...)
	_wiseSroom.wiseSroomDo.UseModel(&model.WiseSroom{})

	tableName := _wiseSroom.wiseSroomDo.TableName()
	_wiseSroom.ALL = field.NewAsterisk(tableName)
	_wiseSroom.SroomNo = field.NewInt64(tableName, "sroom_no")
	_wiseSroom.SroomName = field.NewString(tableName, "sroom_name")
	_wiseSroom.SroomGubun = field.NewString(tableName, "sroom_gubun")
	_wiseSroom.SeatCnt = field.NewInt64(tableName, "seat_cnt")
	_wiseSroom.UseYn = field.NewString(tableName, "use_yn")
	_wiseSroom.UseMin = field.NewInt64(tableName, "use_min")
	_wiseSroom.MinCnt = field.NewInt64(tableName, "min_cnt")
	_wiseSroom.ReserveDay = field.NewInt64(tableName, "reserve_day")
	_wiseSroom.ReserveMin = field.NewInt64(tableName, "reserve_min")
	_wiseSroom.CancelMin = field.NewInt64(tableName, "cancel_min")
	_wiseSroom.BlockYn = field.NewString(tableName, "block_yn")
	_wiseSroom.BlockMin = field.NewInt64(tableName, "block_min")
	_wiseSroom.ContYn = field.NewString(tableName, "cont_yn")
	_wiseSroom.ContMin = field.NewInt64(tableName, "cont_min")
	_wiseSroom.EtcUseYn = field.NewString(tableName, "etc_use_yn")
	_wiseSroom.EtcName = field.NewString(tableName, "etc_name")
	_wiseSroom.Bigo = field.NewString(tableName, "bigo")

	_wiseSroom.fillFieldMap()

	return _wiseSroom
}

type wiseSroom struct {
	wiseSroomDo

	ALL        field.Asterisk
	SroomNo    field.Int64
	SroomName  field.String
	SroomGubun field.String
	SeatCnt    field.Int64
	UseYn      field.String
	UseMin     field.Int64
	MinCnt     field.Int64
	ReserveDay field.Int64
	ReserveMin field.Int64
	CancelMin  field.Int64
	BlockYn    field.String
	BlockMin   field.Int64
	ContYn     field.String
	ContMin    field.Int64
	EtcUseYn   field.String
	EtcName    field.String
	Bigo       field.String

	fieldMap map[string]field.Expr
}

func (w wiseSroom) Table(newTableName string) *wiseSroom {
	w.wiseSroomDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseSroom) As(alias string) *wiseSroom {
	w.wiseSroomDo.DO = *(w.wiseSroomDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseSroom) updateTableName(table string) *wiseSroom {
	w.ALL = field.NewAsterisk(table)
	w.SroomNo = field.NewInt64(table, "sroom_no")
	w.SroomName = field.NewString(table, "sroom_name")
	w.SroomGubun = field.NewString(table, "sroom_gubun")
	w.SeatCnt = field.NewInt64(table, "seat_cnt")
	w.UseYn = field.NewString(table, "use_yn")
	w.UseMin = field.NewInt64(table, "use_min")
	w.MinCnt = field.NewInt64(table, "min_cnt")
	w.ReserveDay = field.NewInt64(table, "reserve_day")
	w.ReserveMin = field.NewInt64(table, "reserve_min")
	w.CancelMin = field.NewInt64(table, "cancel_min")
	w.BlockYn = field.NewString(table, "block_yn")
	w.BlockMin = field.NewInt64(table, "block_min")
	w.ContYn = field.NewString(table, "cont_yn")
	w.ContMin = field.NewInt64(table, "cont_min")
	w.EtcUseYn = field.NewString(table, "etc_use_yn")
	w.EtcName = field.NewString(table, "etc_name")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseSroom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseSroom) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 17)
	w.fieldMap["sroom_no"] = w.SroomNo
	w.fieldMap["sroom_name"] = w.SroomName
	w.fieldMap["sroom_gubun"] = w.SroomGubun
	w.fieldMap["seat_cnt"] = w.SeatCnt
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["use_min"] = w.UseMin
	w.fieldMap["min_cnt"] = w.MinCnt
	w.fieldMap["reserve_day"] = w.ReserveDay
	w.fieldMap["reserve_min"] = w.ReserveMin
	w.fieldMap["cancel_min"] = w.CancelMin
	w.fieldMap["block_yn"] = w.BlockYn
	w.fieldMap["block_min"] = w.BlockMin
	w.fieldMap["cont_yn"] = w.ContYn
	w.fieldMap["cont_min"] = w.ContMin
	w.fieldMap["etc_use_yn"] = w.EtcUseYn
	w.fieldMap["etc_name"] = w.EtcName
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseSroom) clone(db *gorm.DB) wiseSroom {
	w.wiseSroomDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseSroom) replaceDB(db *gorm.DB) wiseSroom {
	w.wiseSroomDo.ReplaceDB(db)
	return w
}

type wiseSroomDo struct{ gen.DO }

type IWiseSroomDo interface {
	gen.SubQuery
	Debug() IWiseSroomDo
	WithContext(ctx context.Context) IWiseSroomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseSroomDo
	WriteDB() IWiseSroomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseSroomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseSroomDo
	Not(conds ...gen.Condition) IWiseSroomDo
	Or(conds ...gen.Condition) IWiseSroomDo
	Select(conds ...field.Expr) IWiseSroomDo
	Where(conds ...gen.Condition) IWiseSroomDo
	Order(conds ...field.Expr) IWiseSroomDo
	Distinct(cols ...field.Expr) IWiseSroomDo
	Omit(cols ...field.Expr) IWiseSroomDo
	Join(table schema.Tabler, on ...field.Expr) IWiseSroomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomDo
	Group(cols ...field.Expr) IWiseSroomDo
	Having(conds ...gen.Condition) IWiseSroomDo
	Limit(limit int) IWiseSroomDo
	Offset(offset int) IWiseSroomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomDo
	Unscoped() IWiseSroomDo
	Create(values ...*model.WiseSroom) error
	CreateInBatches(values []*model.WiseSroom, batchSize int) error
	Save(values ...*model.WiseSroom) error
	First() (*model.WiseSroom, error)
	Take() (*model.WiseSroom, error)
	Last() (*model.WiseSroom, error)
	Find() ([]*model.WiseSroom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroom, err error)
	FindInBatches(result *[]*model.WiseSroom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseSroom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseSroomDo
	Assign(attrs ...field.AssignExpr) IWiseSroomDo
	Joins(fields ...field.RelationField) IWiseSroomDo
	Preload(fields ...field.RelationField) IWiseSroomDo
	FirstOrInit() (*model.WiseSroom, error)
	FirstOrCreate() (*model.WiseSroom, error)
	FindByPage(offset int, limit int) (result []*model.WiseSroom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseSroomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseSroomDo) Debug() IWiseSroomDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseSroomDo) WithContext(ctx context.Context) IWiseSroomDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseSroomDo) ReadDB() IWiseSroomDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseSroomDo) WriteDB() IWiseSroomDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseSroomDo) Session(config *gorm.Session) IWiseSroomDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseSroomDo) Clauses(conds ...clause.Expression) IWiseSroomDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseSroomDo) Returning(value interface{}, columns ...string) IWiseSroomDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseSroomDo) Not(conds ...gen.Condition) IWiseSroomDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseSroomDo) Or(conds ...gen.Condition) IWiseSroomDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseSroomDo) Select(conds ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseSroomDo) Where(conds ...gen.Condition) IWiseSroomDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseSroomDo) Order(conds ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseSroomDo) Distinct(cols ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseSroomDo) Omit(cols ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseSroomDo) Join(table schema.Tabler, on ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseSroomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseSroomDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseSroomDo) Group(cols ...field.Expr) IWiseSroomDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseSroomDo) Having(conds ...gen.Condition) IWiseSroomDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseSroomDo) Limit(limit int) IWiseSroomDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseSroomDo) Offset(offset int) IWiseSroomDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseSroomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseSroomDo) Unscoped() IWiseSroomDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseSroomDo) Create(values ...*model.WiseSroom) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseSroomDo) CreateInBatches(values []*model.WiseSroom, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseSroomDo) Save(values ...*model.WiseSroom) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseSroomDo) First() (*model.WiseSroom, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroom), nil
	}
}

func (w wiseSroomDo) Take() (*model.WiseSroom, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroom), nil
	}
}

func (w wiseSroomDo) Last() (*model.WiseSroom, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroom), nil
	}
}

func (w wiseSroomDo) Find() ([]*model.WiseSroom, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseSroom), err
}

func (w wiseSroomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroom, err error) {
	buf := make([]*model.WiseSroom, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseSroomDo) FindInBatches(result *[]*model.WiseSroom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseSroomDo) Attrs(attrs ...field.AssignExpr) IWiseSroomDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseSroomDo) Assign(attrs ...field.AssignExpr) IWiseSroomDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseSroomDo) Joins(fields ...field.RelationField) IWiseSroomDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseSroomDo) Preload(fields ...field.RelationField) IWiseSroomDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseSroomDo) FirstOrInit() (*model.WiseSroom, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroom), nil
	}
}

func (w wiseSroomDo) FirstOrCreate() (*model.WiseSroom, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroom), nil
	}
}

func (w wiseSroomDo) FindByPage(offset int, limit int) (result []*model.WiseSroom, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseSroomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseSroomDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseSroomDo) Delete(models ...*model.WiseSroom) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseSroomDo) withDO(do gen.Dao) *wiseSroomDo {
	w.DO = *do.(*gen.DO)
	return w
}
