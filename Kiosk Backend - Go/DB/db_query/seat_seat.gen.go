// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatSeat(db *gorm.DB, opts ...gen.DOOption) seatSeat {
	_seatSeat := seatSeat{}

	_seatSeat.seatSeatDo.UseDB(db, opts...)
	_seatSeat.seatSeatDo.UseModel(&model.SeatSeat{})

	tableName := _seatSeat.seatSeatDo.TableName()
	_seatSeat.ALL = field.NewAsterisk(tableName)
	_seatSeat.SEATNO = field.NewInt64(tableName, "SEATNO")
	_seatSeat.NAME = field.NewString(tableName, "NAME")
	_seatSeat.ENNAME = field.NewString(tableName, "EN_NAME")
	_seatSeat.VNAME = field.NewString(tableName, "VNAME")
	_seatSeat.SECTORNO = field.NewInt64(tableName, "SECTORNO")
	_seatSeat.STATUS = field.NewInt64(tableName, "STATUS")
	_seatSeat.POSX = field.NewInt64(tableName, "POSX")
	_seatSeat.POSY = field.NewInt64(tableName, "POSY")
	_seatSeat.POSW = field.NewInt64(tableName, "POSW")
	_seatSeat.POSH = field.NewInt64(tableName, "POSH")
	_seatSeat.ICONTYPE = field.NewInt64(tableName, "ICONTYPE")
	_seatSeat.GRMIN = field.NewInt64(tableName, "GR_MIN")
	_seatSeat.GRMAX = field.NewInt64(tableName, "GR_MAX")
	_seatSeat.POSX2 = field.NewInt64(tableName, "POSX2")
	_seatSeat.POSY2 = field.NewInt64(tableName, "POSY2")
	_seatSeat.MANX = field.NewInt64(tableName, "MANX")
	_seatSeat.MANY = field.NewInt64(tableName, "MANY")

	_seatSeat.fillFieldMap()

	return _seatSeat
}

type seatSeat struct {
	seatSeatDo

	ALL      field.Asterisk
	SEATNO   field.Int64
	NAME     field.String
	ENNAME   field.String
	VNAME    field.String
	SECTORNO field.Int64
	STATUS   field.Int64
	POSX     field.Int64
	POSY     field.Int64
	POSW     field.Int64
	POSH     field.Int64
	ICONTYPE field.Int64
	GRMIN    field.Int64
	GRMAX    field.Int64
	POSX2    field.Int64
	POSY2    field.Int64
	MANX     field.Int64
	MANY     field.Int64

	fieldMap map[string]field.Expr
}

func (s seatSeat) Table(newTableName string) *seatSeat {
	s.seatSeatDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatSeat) As(alias string) *seatSeat {
	s.seatSeatDo.DO = *(s.seatSeatDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatSeat) updateTableName(table string) *seatSeat {
	s.ALL = field.NewAsterisk(table)
	s.SEATNO = field.NewInt64(table, "SEATNO")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")
	s.VNAME = field.NewString(table, "VNAME")
	s.SECTORNO = field.NewInt64(table, "SECTORNO")
	s.STATUS = field.NewInt64(table, "STATUS")
	s.POSX = field.NewInt64(table, "POSX")
	s.POSY = field.NewInt64(table, "POSY")
	s.POSW = field.NewInt64(table, "POSW")
	s.POSH = field.NewInt64(table, "POSH")
	s.ICONTYPE = field.NewInt64(table, "ICONTYPE")
	s.GRMIN = field.NewInt64(table, "GR_MIN")
	s.GRMAX = field.NewInt64(table, "GR_MAX")
	s.POSX2 = field.NewInt64(table, "POSX2")
	s.POSY2 = field.NewInt64(table, "POSY2")
	s.MANX = field.NewInt64(table, "MANX")
	s.MANY = field.NewInt64(table, "MANY")

	s.fillFieldMap()

	return s
}

func (s *seatSeat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatSeat) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["SEATNO"] = s.SEATNO
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
	s.fieldMap["VNAME"] = s.VNAME
	s.fieldMap["SECTORNO"] = s.SECTORNO
	s.fieldMap["STATUS"] = s.STATUS
	s.fieldMap["POSX"] = s.POSX
	s.fieldMap["POSY"] = s.POSY
	s.fieldMap["POSW"] = s.POSW
	s.fieldMap["POSH"] = s.POSH
	s.fieldMap["ICONTYPE"] = s.ICONTYPE
	s.fieldMap["GR_MIN"] = s.GRMIN
	s.fieldMap["GR_MAX"] = s.GRMAX
	s.fieldMap["POSX2"] = s.POSX2
	s.fieldMap["POSY2"] = s.POSY2
	s.fieldMap["MANX"] = s.MANX
	s.fieldMap["MANY"] = s.MANY
}

func (s seatSeat) clone(db *gorm.DB) seatSeat {
	s.seatSeatDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatSeat) replaceDB(db *gorm.DB) seatSeat {
	s.seatSeatDo.ReplaceDB(db)
	return s
}

type seatSeatDo struct{ gen.DO }

type ISeatSeatDo interface {
	gen.SubQuery
	Debug() ISeatSeatDo
	WithContext(ctx context.Context) ISeatSeatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatSeatDo
	WriteDB() ISeatSeatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatSeatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatSeatDo
	Not(conds ...gen.Condition) ISeatSeatDo
	Or(conds ...gen.Condition) ISeatSeatDo
	Select(conds ...field.Expr) ISeatSeatDo
	Where(conds ...gen.Condition) ISeatSeatDo
	Order(conds ...field.Expr) ISeatSeatDo
	Distinct(cols ...field.Expr) ISeatSeatDo
	Omit(cols ...field.Expr) ISeatSeatDo
	Join(table schema.Tabler, on ...field.Expr) ISeatSeatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSeatDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatSeatDo
	Group(cols ...field.Expr) ISeatSeatDo
	Having(conds ...gen.Condition) ISeatSeatDo
	Limit(limit int) ISeatSeatDo
	Offset(offset int) ISeatSeatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSeatDo
	Unscoped() ISeatSeatDo
	Create(values ...*model.SeatSeat) error
	CreateInBatches(values []*model.SeatSeat, batchSize int) error
	Save(values ...*model.SeatSeat) error
	First() (*model.SeatSeat, error)
	Take() (*model.SeatSeat, error)
	Last() (*model.SeatSeat, error)
	Find() ([]*model.SeatSeat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSeat, err error)
	FindInBatches(result *[]*model.SeatSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatSeat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatSeatDo
	Assign(attrs ...field.AssignExpr) ISeatSeatDo
	Joins(fields ...field.RelationField) ISeatSeatDo
	Preload(fields ...field.RelationField) ISeatSeatDo
	FirstOrInit() (*model.SeatSeat, error)
	FirstOrCreate() (*model.SeatSeat, error)
	FindByPage(offset int, limit int) (result []*model.SeatSeat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatSeatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatSeatDo) Debug() ISeatSeatDo {
	return s.withDO(s.DO.Debug())
}

func (s seatSeatDo) WithContext(ctx context.Context) ISeatSeatDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatSeatDo) ReadDB() ISeatSeatDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatSeatDo) WriteDB() ISeatSeatDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatSeatDo) Session(config *gorm.Session) ISeatSeatDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatSeatDo) Clauses(conds ...clause.Expression) ISeatSeatDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatSeatDo) Returning(value interface{}, columns ...string) ISeatSeatDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatSeatDo) Not(conds ...gen.Condition) ISeatSeatDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatSeatDo) Or(conds ...gen.Condition) ISeatSeatDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatSeatDo) Select(conds ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatSeatDo) Where(conds ...gen.Condition) ISeatSeatDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatSeatDo) Order(conds ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatSeatDo) Distinct(cols ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatSeatDo) Omit(cols ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatSeatDo) Join(table schema.Tabler, on ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatSeatDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatSeatDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatSeatDo) Group(cols ...field.Expr) ISeatSeatDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatSeatDo) Having(conds ...gen.Condition) ISeatSeatDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatSeatDo) Limit(limit int) ISeatSeatDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatSeatDo) Offset(offset int) ISeatSeatDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatSeatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSeatDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatSeatDo) Unscoped() ISeatSeatDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatSeatDo) Create(values ...*model.SeatSeat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatSeatDo) CreateInBatches(values []*model.SeatSeat, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatSeatDo) Save(values ...*model.SeatSeat) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatSeatDo) First() (*model.SeatSeat, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSeat), nil
	}
}

func (s seatSeatDo) Take() (*model.SeatSeat, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSeat), nil
	}
}

func (s seatSeatDo) Last() (*model.SeatSeat, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSeat), nil
	}
}

func (s seatSeatDo) Find() ([]*model.SeatSeat, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatSeat), err
}

func (s seatSeatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSeat, err error) {
	buf := make([]*model.SeatSeat, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatSeatDo) FindInBatches(result *[]*model.SeatSeat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatSeatDo) Attrs(attrs ...field.AssignExpr) ISeatSeatDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatSeatDo) Assign(attrs ...field.AssignExpr) ISeatSeatDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatSeatDo) Joins(fields ...field.RelationField) ISeatSeatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatSeatDo) Preload(fields ...field.RelationField) ISeatSeatDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatSeatDo) FirstOrInit() (*model.SeatSeat, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSeat), nil
	}
}

func (s seatSeatDo) FirstOrCreate() (*model.SeatSeat, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSeat), nil
	}
}

func (s seatSeatDo) FindByPage(offset int, limit int) (result []*model.SeatSeat, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatSeatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatSeatDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatSeatDo) Delete(models ...*model.SeatSeat) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatSeatDo) withDO(do gen.Dao) *seatSeatDo {
	s.DO = *do.(*gen.DO)
	return s
}
