// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatLogstatcd(db *gorm.DB, opts ...gen.DOOption) seatLogstatcd {
	_seatLogstatcd := seatLogstatcd{}

	_seatLogstatcd.seatLogstatcdDo.UseDB(db, opts...)
	_seatLogstatcd.seatLogstatcdDo.UseModel(&model.SeatLogstatcd{})

	tableName := _seatLogstatcd.seatLogstatcdDo.TableName()
	_seatLogstatcd.ALL = field.NewAsterisk(tableName)
	_seatLogstatcd.STATUS = field.NewInt64(tableName, "STATUS")
	_seatLogstatcd.NAME = field.NewString(tableName, "NAME")
	_seatLogstatcd.ENNAME = field.NewString(tableName, "EN_NAME")

	_seatLogstatcd.fillFieldMap()

	return _seatLogstatcd
}

type seatLogstatcd struct {
	seatLogstatcdDo

	ALL    field.Asterisk
	STATUS field.Int64
	NAME   field.String
	ENNAME field.String

	fieldMap map[string]field.Expr
}

func (s seatLogstatcd) Table(newTableName string) *seatLogstatcd {
	s.seatLogstatcdDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatLogstatcd) As(alias string) *seatLogstatcd {
	s.seatLogstatcdDo.DO = *(s.seatLogstatcdDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatLogstatcd) updateTableName(table string) *seatLogstatcd {
	s.ALL = field.NewAsterisk(table)
	s.STATUS = field.NewInt64(table, "STATUS")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")

	s.fillFieldMap()

	return s
}

func (s *seatLogstatcd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatLogstatcd) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["STATUS"] = s.STATUS
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
}

func (s seatLogstatcd) clone(db *gorm.DB) seatLogstatcd {
	s.seatLogstatcdDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatLogstatcd) replaceDB(db *gorm.DB) seatLogstatcd {
	s.seatLogstatcdDo.ReplaceDB(db)
	return s
}

type seatLogstatcdDo struct{ gen.DO }

type ISeatLogstatcdDo interface {
	gen.SubQuery
	Debug() ISeatLogstatcdDo
	WithContext(ctx context.Context) ISeatLogstatcdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatLogstatcdDo
	WriteDB() ISeatLogstatcdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatLogstatcdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatLogstatcdDo
	Not(conds ...gen.Condition) ISeatLogstatcdDo
	Or(conds ...gen.Condition) ISeatLogstatcdDo
	Select(conds ...field.Expr) ISeatLogstatcdDo
	Where(conds ...gen.Condition) ISeatLogstatcdDo
	Order(conds ...field.Expr) ISeatLogstatcdDo
	Distinct(cols ...field.Expr) ISeatLogstatcdDo
	Omit(cols ...field.Expr) ISeatLogstatcdDo
	Join(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo
	Group(cols ...field.Expr) ISeatLogstatcdDo
	Having(conds ...gen.Condition) ISeatLogstatcdDo
	Limit(limit int) ISeatLogstatcdDo
	Offset(offset int) ISeatLogstatcdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLogstatcdDo
	Unscoped() ISeatLogstatcdDo
	Create(values ...*model.SeatLogstatcd) error
	CreateInBatches(values []*model.SeatLogstatcd, batchSize int) error
	Save(values ...*model.SeatLogstatcd) error
	First() (*model.SeatLogstatcd, error)
	Take() (*model.SeatLogstatcd, error)
	Last() (*model.SeatLogstatcd, error)
	Find() ([]*model.SeatLogstatcd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLogstatcd, err error)
	FindInBatches(result *[]*model.SeatLogstatcd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatLogstatcd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatLogstatcdDo
	Assign(attrs ...field.AssignExpr) ISeatLogstatcdDo
	Joins(fields ...field.RelationField) ISeatLogstatcdDo
	Preload(fields ...field.RelationField) ISeatLogstatcdDo
	FirstOrInit() (*model.SeatLogstatcd, error)
	FirstOrCreate() (*model.SeatLogstatcd, error)
	FindByPage(offset int, limit int) (result []*model.SeatLogstatcd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatLogstatcdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatLogstatcdDo) Debug() ISeatLogstatcdDo {
	return s.withDO(s.DO.Debug())
}

func (s seatLogstatcdDo) WithContext(ctx context.Context) ISeatLogstatcdDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatLogstatcdDo) ReadDB() ISeatLogstatcdDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatLogstatcdDo) WriteDB() ISeatLogstatcdDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatLogstatcdDo) Session(config *gorm.Session) ISeatLogstatcdDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatLogstatcdDo) Clauses(conds ...clause.Expression) ISeatLogstatcdDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatLogstatcdDo) Returning(value interface{}, columns ...string) ISeatLogstatcdDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatLogstatcdDo) Not(conds ...gen.Condition) ISeatLogstatcdDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatLogstatcdDo) Or(conds ...gen.Condition) ISeatLogstatcdDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatLogstatcdDo) Select(conds ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatLogstatcdDo) Where(conds ...gen.Condition) ISeatLogstatcdDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatLogstatcdDo) Order(conds ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatLogstatcdDo) Distinct(cols ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatLogstatcdDo) Omit(cols ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatLogstatcdDo) Join(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatLogstatcdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatLogstatcdDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatLogstatcdDo) Group(cols ...field.Expr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatLogstatcdDo) Having(conds ...gen.Condition) ISeatLogstatcdDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatLogstatcdDo) Limit(limit int) ISeatLogstatcdDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatLogstatcdDo) Offset(offset int) ISeatLogstatcdDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatLogstatcdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLogstatcdDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatLogstatcdDo) Unscoped() ISeatLogstatcdDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatLogstatcdDo) Create(values ...*model.SeatLogstatcd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatLogstatcdDo) CreateInBatches(values []*model.SeatLogstatcd, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatLogstatcdDo) Save(values ...*model.SeatLogstatcd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatLogstatcdDo) First() (*model.SeatLogstatcd, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLogstatcd), nil
	}
}

func (s seatLogstatcdDo) Take() (*model.SeatLogstatcd, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLogstatcd), nil
	}
}

func (s seatLogstatcdDo) Last() (*model.SeatLogstatcd, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLogstatcd), nil
	}
}

func (s seatLogstatcdDo) Find() ([]*model.SeatLogstatcd, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatLogstatcd), err
}

func (s seatLogstatcdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLogstatcd, err error) {
	buf := make([]*model.SeatLogstatcd, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatLogstatcdDo) FindInBatches(result *[]*model.SeatLogstatcd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatLogstatcdDo) Attrs(attrs ...field.AssignExpr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatLogstatcdDo) Assign(attrs ...field.AssignExpr) ISeatLogstatcdDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatLogstatcdDo) Joins(fields ...field.RelationField) ISeatLogstatcdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatLogstatcdDo) Preload(fields ...field.RelationField) ISeatLogstatcdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatLogstatcdDo) FirstOrInit() (*model.SeatLogstatcd, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLogstatcd), nil
	}
}

func (s seatLogstatcdDo) FirstOrCreate() (*model.SeatLogstatcd, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLogstatcd), nil
	}
}

func (s seatLogstatcdDo) FindByPage(offset int, limit int) (result []*model.SeatLogstatcd, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatLogstatcdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatLogstatcdDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatLogstatcdDo) Delete(models ...*model.SeatLogstatcd) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatLogstatcdDo) withDO(do gen.Dao) *seatLogstatcdDo {
	s.DO = *do.(*gen.DO)
	return s
}
