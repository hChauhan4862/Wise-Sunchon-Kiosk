// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAUTHGRP(db *gorm.DB, opts ...gen.DOOption) aUTHGRP {
	_aUTHGRP := aUTHGRP{}

	_aUTHGRP.aUTHGRPDo.UseDB(db, opts...)
	_aUTHGRP.aUTHGRPDo.UseModel(&model.AUTHGRP{})

	tableName := _aUTHGRP.aUTHGRPDo.TableName()
	_aUTHGRP.ALL = field.NewAsterisk(tableName)
	_aUTHGRP.AUTHGRPCD = field.NewInt64(tableName, "AUTH_GRP_CD")
	_aUTHGRP.AUTHGRPNM = field.NewString(tableName, "AUTH_GRP_NM")
	_aUTHGRP.APPGUBUN = field.NewString(tableName, "APP_GUBUN")
	_aUTHGRP.INOUTGUBUN = field.NewString(tableName, "IN_OUT_GUBUN")
	_aUTHGRP.AUTHTYPE = field.NewString(tableName, "AUTH_TYPE")
	_aUTHGRP.USEYN = field.NewString(tableName, "USE_YN")
	_aUTHGRP.REGDT = field.NewString(tableName, "REG_DT")
	_aUTHGRP.REGID = field.NewString(tableName, "REG_ID")
	_aUTHGRP.MODDT = field.NewString(tableName, "MOD_DT")
	_aUTHGRP.MODID = field.NewString(tableName, "MOD_ID")

	_aUTHGRP.fillFieldMap()

	return _aUTHGRP
}

type aUTHGRP struct {
	aUTHGRPDo

	ALL        field.Asterisk
	AUTHGRPCD  field.Int64
	AUTHGRPNM  field.String
	APPGUBUN   field.String
	INOUTGUBUN field.String
	AUTHTYPE   field.String
	USEYN      field.String
	REGDT      field.String
	REGID      field.String
	MODDT      field.String
	MODID      field.String

	fieldMap map[string]field.Expr
}

func (a aUTHGRP) Table(newTableName string) *aUTHGRP {
	a.aUTHGRPDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aUTHGRP) As(alias string) *aUTHGRP {
	a.aUTHGRPDo.DO = *(a.aUTHGRPDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aUTHGRP) updateTableName(table string) *aUTHGRP {
	a.ALL = field.NewAsterisk(table)
	a.AUTHGRPCD = field.NewInt64(table, "AUTH_GRP_CD")
	a.AUTHGRPNM = field.NewString(table, "AUTH_GRP_NM")
	a.APPGUBUN = field.NewString(table, "APP_GUBUN")
	a.INOUTGUBUN = field.NewString(table, "IN_OUT_GUBUN")
	a.AUTHTYPE = field.NewString(table, "AUTH_TYPE")
	a.USEYN = field.NewString(table, "USE_YN")
	a.REGDT = field.NewString(table, "REG_DT")
	a.REGID = field.NewString(table, "REG_ID")
	a.MODDT = field.NewString(table, "MOD_DT")
	a.MODID = field.NewString(table, "MOD_ID")

	a.fillFieldMap()

	return a
}

func (a *aUTHGRP) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aUTHGRP) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 10)
	a.fieldMap["AUTH_GRP_CD"] = a.AUTHGRPCD
	a.fieldMap["AUTH_GRP_NM"] = a.AUTHGRPNM
	a.fieldMap["APP_GUBUN"] = a.APPGUBUN
	a.fieldMap["IN_OUT_GUBUN"] = a.INOUTGUBUN
	a.fieldMap["AUTH_TYPE"] = a.AUTHTYPE
	a.fieldMap["USE_YN"] = a.USEYN
	a.fieldMap["REG_DT"] = a.REGDT
	a.fieldMap["REG_ID"] = a.REGID
	a.fieldMap["MOD_DT"] = a.MODDT
	a.fieldMap["MOD_ID"] = a.MODID
}

func (a aUTHGRP) clone(db *gorm.DB) aUTHGRP {
	a.aUTHGRPDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aUTHGRP) replaceDB(db *gorm.DB) aUTHGRP {
	a.aUTHGRPDo.ReplaceDB(db)
	return a
}

type aUTHGRPDo struct{ gen.DO }

type IAUTHGRPDo interface {
	gen.SubQuery
	Debug() IAUTHGRPDo
	WithContext(ctx context.Context) IAUTHGRPDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAUTHGRPDo
	WriteDB() IAUTHGRPDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAUTHGRPDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAUTHGRPDo
	Not(conds ...gen.Condition) IAUTHGRPDo
	Or(conds ...gen.Condition) IAUTHGRPDo
	Select(conds ...field.Expr) IAUTHGRPDo
	Where(conds ...gen.Condition) IAUTHGRPDo
	Order(conds ...field.Expr) IAUTHGRPDo
	Distinct(cols ...field.Expr) IAUTHGRPDo
	Omit(cols ...field.Expr) IAUTHGRPDo
	Join(table schema.Tabler, on ...field.Expr) IAUTHGRPDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAUTHGRPDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAUTHGRPDo
	Group(cols ...field.Expr) IAUTHGRPDo
	Having(conds ...gen.Condition) IAUTHGRPDo
	Limit(limit int) IAUTHGRPDo
	Offset(offset int) IAUTHGRPDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAUTHGRPDo
	Unscoped() IAUTHGRPDo
	Create(values ...*model.AUTHGRP) error
	CreateInBatches(values []*model.AUTHGRP, batchSize int) error
	Save(values ...*model.AUTHGRP) error
	First() (*model.AUTHGRP, error)
	Take() (*model.AUTHGRP, error)
	Last() (*model.AUTHGRP, error)
	Find() ([]*model.AUTHGRP, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AUTHGRP, err error)
	FindInBatches(result *[]*model.AUTHGRP, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AUTHGRP) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAUTHGRPDo
	Assign(attrs ...field.AssignExpr) IAUTHGRPDo
	Joins(fields ...field.RelationField) IAUTHGRPDo
	Preload(fields ...field.RelationField) IAUTHGRPDo
	FirstOrInit() (*model.AUTHGRP, error)
	FirstOrCreate() (*model.AUTHGRP, error)
	FindByPage(offset int, limit int) (result []*model.AUTHGRP, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAUTHGRPDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aUTHGRPDo) Debug() IAUTHGRPDo {
	return a.withDO(a.DO.Debug())
}

func (a aUTHGRPDo) WithContext(ctx context.Context) IAUTHGRPDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aUTHGRPDo) ReadDB() IAUTHGRPDo {
	return a.Clauses(dbresolver.Read)
}

func (a aUTHGRPDo) WriteDB() IAUTHGRPDo {
	return a.Clauses(dbresolver.Write)
}

func (a aUTHGRPDo) Session(config *gorm.Session) IAUTHGRPDo {
	return a.withDO(a.DO.Session(config))
}

func (a aUTHGRPDo) Clauses(conds ...clause.Expression) IAUTHGRPDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aUTHGRPDo) Returning(value interface{}, columns ...string) IAUTHGRPDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aUTHGRPDo) Not(conds ...gen.Condition) IAUTHGRPDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aUTHGRPDo) Or(conds ...gen.Condition) IAUTHGRPDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aUTHGRPDo) Select(conds ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aUTHGRPDo) Where(conds ...gen.Condition) IAUTHGRPDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aUTHGRPDo) Order(conds ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aUTHGRPDo) Distinct(cols ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aUTHGRPDo) Omit(cols ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aUTHGRPDo) Join(table schema.Tabler, on ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aUTHGRPDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aUTHGRPDo) RightJoin(table schema.Tabler, on ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aUTHGRPDo) Group(cols ...field.Expr) IAUTHGRPDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aUTHGRPDo) Having(conds ...gen.Condition) IAUTHGRPDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aUTHGRPDo) Limit(limit int) IAUTHGRPDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aUTHGRPDo) Offset(offset int) IAUTHGRPDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aUTHGRPDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAUTHGRPDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aUTHGRPDo) Unscoped() IAUTHGRPDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aUTHGRPDo) Create(values ...*model.AUTHGRP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aUTHGRPDo) CreateInBatches(values []*model.AUTHGRP, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aUTHGRPDo) Save(values ...*model.AUTHGRP) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aUTHGRPDo) First() (*model.AUTHGRP, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AUTHGRP), nil
	}
}

func (a aUTHGRPDo) Take() (*model.AUTHGRP, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AUTHGRP), nil
	}
}

func (a aUTHGRPDo) Last() (*model.AUTHGRP, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AUTHGRP), nil
	}
}

func (a aUTHGRPDo) Find() ([]*model.AUTHGRP, error) {
	result, err := a.DO.Find()
	return result.([]*model.AUTHGRP), err
}

func (a aUTHGRPDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AUTHGRP, err error) {
	buf := make([]*model.AUTHGRP, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aUTHGRPDo) FindInBatches(result *[]*model.AUTHGRP, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aUTHGRPDo) Attrs(attrs ...field.AssignExpr) IAUTHGRPDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aUTHGRPDo) Assign(attrs ...field.AssignExpr) IAUTHGRPDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aUTHGRPDo) Joins(fields ...field.RelationField) IAUTHGRPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aUTHGRPDo) Preload(fields ...field.RelationField) IAUTHGRPDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aUTHGRPDo) FirstOrInit() (*model.AUTHGRP, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AUTHGRP), nil
	}
}

func (a aUTHGRPDo) FirstOrCreate() (*model.AUTHGRP, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AUTHGRP), nil
	}
}

func (a aUTHGRPDo) FindByPage(offset int, limit int) (result []*model.AUTHGRP, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aUTHGRPDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aUTHGRPDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aUTHGRPDo) Delete(models ...*model.AUTHGRP) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aUTHGRPDo) withDO(do gen.Dao) *aUTHGRPDo {
	a.DO = *do.(*gen.DO)
	return a
}
