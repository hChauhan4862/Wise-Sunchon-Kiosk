// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatPaper(db *gorm.DB, opts ...gen.DOOption) seatPaper {
	_seatPaper := seatPaper{}

	_seatPaper.seatPaperDo.UseDB(db, opts...)
	_seatPaper.seatPaperDo.UseModel(&model.SeatPaper{})

	tableName := _seatPaper.seatPaperDo.TableName()
	_seatPaper.ALL = field.NewAsterisk(tableName)
	_seatPaper.KioskNo = field.NewInt64(tableName, "kiosk_no")
	_seatPaper.KioskTotCnt = field.NewInt64(tableName, "kiosk_tot_cnt")
	_seatPaper.KioskCurCnt = field.NewInt64(tableName, "kiosk_cur_cnt")

	_seatPaper.fillFieldMap()

	return _seatPaper
}

type seatPaper struct {
	seatPaperDo

	ALL         field.Asterisk
	KioskNo     field.Int64
	KioskTotCnt field.Int64
	KioskCurCnt field.Int64

	fieldMap map[string]field.Expr
}

func (s seatPaper) Table(newTableName string) *seatPaper {
	s.seatPaperDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatPaper) As(alias string) *seatPaper {
	s.seatPaperDo.DO = *(s.seatPaperDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatPaper) updateTableName(table string) *seatPaper {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "kiosk_no")
	s.KioskTotCnt = field.NewInt64(table, "kiosk_tot_cnt")
	s.KioskCurCnt = field.NewInt64(table, "kiosk_cur_cnt")

	s.fillFieldMap()

	return s
}

func (s *seatPaper) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatPaper) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["kiosk_no"] = s.KioskNo
	s.fieldMap["kiosk_tot_cnt"] = s.KioskTotCnt
	s.fieldMap["kiosk_cur_cnt"] = s.KioskCurCnt
}

func (s seatPaper) clone(db *gorm.DB) seatPaper {
	s.seatPaperDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatPaper) replaceDB(db *gorm.DB) seatPaper {
	s.seatPaperDo.ReplaceDB(db)
	return s
}

type seatPaperDo struct{ gen.DO }

type ISeatPaperDo interface {
	gen.SubQuery
	Debug() ISeatPaperDo
	WithContext(ctx context.Context) ISeatPaperDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatPaperDo
	WriteDB() ISeatPaperDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatPaperDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatPaperDo
	Not(conds ...gen.Condition) ISeatPaperDo
	Or(conds ...gen.Condition) ISeatPaperDo
	Select(conds ...field.Expr) ISeatPaperDo
	Where(conds ...gen.Condition) ISeatPaperDo
	Order(conds ...field.Expr) ISeatPaperDo
	Distinct(cols ...field.Expr) ISeatPaperDo
	Omit(cols ...field.Expr) ISeatPaperDo
	Join(table schema.Tabler, on ...field.Expr) ISeatPaperDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatPaperDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatPaperDo
	Group(cols ...field.Expr) ISeatPaperDo
	Having(conds ...gen.Condition) ISeatPaperDo
	Limit(limit int) ISeatPaperDo
	Offset(offset int) ISeatPaperDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatPaperDo
	Unscoped() ISeatPaperDo
	Create(values ...*model.SeatPaper) error
	CreateInBatches(values []*model.SeatPaper, batchSize int) error
	Save(values ...*model.SeatPaper) error
	First() (*model.SeatPaper, error)
	Take() (*model.SeatPaper, error)
	Last() (*model.SeatPaper, error)
	Find() ([]*model.SeatPaper, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatPaper, err error)
	FindInBatches(result *[]*model.SeatPaper, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatPaper) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatPaperDo
	Assign(attrs ...field.AssignExpr) ISeatPaperDo
	Joins(fields ...field.RelationField) ISeatPaperDo
	Preload(fields ...field.RelationField) ISeatPaperDo
	FirstOrInit() (*model.SeatPaper, error)
	FirstOrCreate() (*model.SeatPaper, error)
	FindByPage(offset int, limit int) (result []*model.SeatPaper, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatPaperDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatPaperDo) Debug() ISeatPaperDo {
	return s.withDO(s.DO.Debug())
}

func (s seatPaperDo) WithContext(ctx context.Context) ISeatPaperDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatPaperDo) ReadDB() ISeatPaperDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatPaperDo) WriteDB() ISeatPaperDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatPaperDo) Session(config *gorm.Session) ISeatPaperDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatPaperDo) Clauses(conds ...clause.Expression) ISeatPaperDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatPaperDo) Returning(value interface{}, columns ...string) ISeatPaperDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatPaperDo) Not(conds ...gen.Condition) ISeatPaperDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatPaperDo) Or(conds ...gen.Condition) ISeatPaperDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatPaperDo) Select(conds ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatPaperDo) Where(conds ...gen.Condition) ISeatPaperDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatPaperDo) Order(conds ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatPaperDo) Distinct(cols ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatPaperDo) Omit(cols ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatPaperDo) Join(table schema.Tabler, on ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatPaperDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatPaperDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatPaperDo) Group(cols ...field.Expr) ISeatPaperDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatPaperDo) Having(conds ...gen.Condition) ISeatPaperDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatPaperDo) Limit(limit int) ISeatPaperDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatPaperDo) Offset(offset int) ISeatPaperDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatPaperDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatPaperDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatPaperDo) Unscoped() ISeatPaperDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatPaperDo) Create(values ...*model.SeatPaper) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatPaperDo) CreateInBatches(values []*model.SeatPaper, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatPaperDo) Save(values ...*model.SeatPaper) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatPaperDo) First() (*model.SeatPaper, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatPaper), nil
	}
}

func (s seatPaperDo) Take() (*model.SeatPaper, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatPaper), nil
	}
}

func (s seatPaperDo) Last() (*model.SeatPaper, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatPaper), nil
	}
}

func (s seatPaperDo) Find() ([]*model.SeatPaper, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatPaper), err
}

func (s seatPaperDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatPaper, err error) {
	buf := make([]*model.SeatPaper, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatPaperDo) FindInBatches(result *[]*model.SeatPaper, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatPaperDo) Attrs(attrs ...field.AssignExpr) ISeatPaperDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatPaperDo) Assign(attrs ...field.AssignExpr) ISeatPaperDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatPaperDo) Joins(fields ...field.RelationField) ISeatPaperDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatPaperDo) Preload(fields ...field.RelationField) ISeatPaperDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatPaperDo) FirstOrInit() (*model.SeatPaper, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatPaper), nil
	}
}

func (s seatPaperDo) FirstOrCreate() (*model.SeatPaper, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatPaper), nil
	}
}

func (s seatPaperDo) FindByPage(offset int, limit int) (result []*model.SeatPaper, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatPaperDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatPaperDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatPaperDo) Delete(models ...*model.SeatPaper) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatPaperDo) withDO(do gen.Dao) *seatPaperDo {
	s.DO = *do.(*gen.DO)
	return s
}
