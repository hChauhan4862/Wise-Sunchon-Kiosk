// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSmartKey(db *gorm.DB, opts ...gen.DOOption) smartKey {
	_smartKey := smartKey{}

	_smartKey.smartKeyDo.UseDB(db, opts...)
	_smartKey.smartKeyDo.UseModel(&model.SmartKey{})

	tableName := _smartKey.smartKeyDo.TableName()
	_smartKey.ALL = field.NewAsterisk(tableName)
	_smartKey.Gubun = field.NewString(tableName, "gubun")
	_smartKey.RoomNo = field.NewInt64(tableName, "room_no")
	_smartKey.RoomName = field.NewString(tableName, "room_name")
	_smartKey.SeatNo = field.NewInt64(tableName, "seat_no")
	_smartKey.CurrKey = field.NewString(tableName, "curr_key")
	_smartKey.PrevKey = field.NewString(tableName, "prev_key")
	_smartKey.RegDt = field.NewString(tableName, "reg_dt")
	_smartKey.UpdDt = field.NewString(tableName, "upd_dt")

	_smartKey.fillFieldMap()

	return _smartKey
}

type smartKey struct {
	smartKeyDo

	ALL      field.Asterisk
	Gubun    field.String
	RoomNo   field.Int64
	RoomName field.String
	SeatNo   field.Int64
	CurrKey  field.String
	PrevKey  field.String
	RegDt    field.String
	UpdDt    field.String

	fieldMap map[string]field.Expr
}

func (s smartKey) Table(newTableName string) *smartKey {
	s.smartKeyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s smartKey) As(alias string) *smartKey {
	s.smartKeyDo.DO = *(s.smartKeyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *smartKey) updateTableName(table string) *smartKey {
	s.ALL = field.NewAsterisk(table)
	s.Gubun = field.NewString(table, "gubun")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.RoomName = field.NewString(table, "room_name")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.CurrKey = field.NewString(table, "curr_key")
	s.PrevKey = field.NewString(table, "prev_key")
	s.RegDt = field.NewString(table, "reg_dt")
	s.UpdDt = field.NewString(table, "upd_dt")

	s.fillFieldMap()

	return s
}

func (s *smartKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *smartKey) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["gubun"] = s.Gubun
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["room_name"] = s.RoomName
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["curr_key"] = s.CurrKey
	s.fieldMap["prev_key"] = s.PrevKey
	s.fieldMap["reg_dt"] = s.RegDt
	s.fieldMap["upd_dt"] = s.UpdDt
}

func (s smartKey) clone(db *gorm.DB) smartKey {
	s.smartKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s smartKey) replaceDB(db *gorm.DB) smartKey {
	s.smartKeyDo.ReplaceDB(db)
	return s
}

type smartKeyDo struct{ gen.DO }

type ISmartKeyDo interface {
	gen.SubQuery
	Debug() ISmartKeyDo
	WithContext(ctx context.Context) ISmartKeyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISmartKeyDo
	WriteDB() ISmartKeyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISmartKeyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISmartKeyDo
	Not(conds ...gen.Condition) ISmartKeyDo
	Or(conds ...gen.Condition) ISmartKeyDo
	Select(conds ...field.Expr) ISmartKeyDo
	Where(conds ...gen.Condition) ISmartKeyDo
	Order(conds ...field.Expr) ISmartKeyDo
	Distinct(cols ...field.Expr) ISmartKeyDo
	Omit(cols ...field.Expr) ISmartKeyDo
	Join(table schema.Tabler, on ...field.Expr) ISmartKeyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISmartKeyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISmartKeyDo
	Group(cols ...field.Expr) ISmartKeyDo
	Having(conds ...gen.Condition) ISmartKeyDo
	Limit(limit int) ISmartKeyDo
	Offset(offset int) ISmartKeyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartKeyDo
	Unscoped() ISmartKeyDo
	Create(values ...*model.SmartKey) error
	CreateInBatches(values []*model.SmartKey, batchSize int) error
	Save(values ...*model.SmartKey) error
	First() (*model.SmartKey, error)
	Take() (*model.SmartKey, error)
	Last() (*model.SmartKey, error)
	Find() ([]*model.SmartKey, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmartKey, err error)
	FindInBatches(result *[]*model.SmartKey, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SmartKey) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISmartKeyDo
	Assign(attrs ...field.AssignExpr) ISmartKeyDo
	Joins(fields ...field.RelationField) ISmartKeyDo
	Preload(fields ...field.RelationField) ISmartKeyDo
	FirstOrInit() (*model.SmartKey, error)
	FirstOrCreate() (*model.SmartKey, error)
	FindByPage(offset int, limit int) (result []*model.SmartKey, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISmartKeyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s smartKeyDo) Debug() ISmartKeyDo {
	return s.withDO(s.DO.Debug())
}

func (s smartKeyDo) WithContext(ctx context.Context) ISmartKeyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s smartKeyDo) ReadDB() ISmartKeyDo {
	return s.Clauses(dbresolver.Read)
}

func (s smartKeyDo) WriteDB() ISmartKeyDo {
	return s.Clauses(dbresolver.Write)
}

func (s smartKeyDo) Session(config *gorm.Session) ISmartKeyDo {
	return s.withDO(s.DO.Session(config))
}

func (s smartKeyDo) Clauses(conds ...clause.Expression) ISmartKeyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s smartKeyDo) Returning(value interface{}, columns ...string) ISmartKeyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s smartKeyDo) Not(conds ...gen.Condition) ISmartKeyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s smartKeyDo) Or(conds ...gen.Condition) ISmartKeyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s smartKeyDo) Select(conds ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s smartKeyDo) Where(conds ...gen.Condition) ISmartKeyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s smartKeyDo) Order(conds ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s smartKeyDo) Distinct(cols ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s smartKeyDo) Omit(cols ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s smartKeyDo) Join(table schema.Tabler, on ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s smartKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s smartKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s smartKeyDo) Group(cols ...field.Expr) ISmartKeyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s smartKeyDo) Having(conds ...gen.Condition) ISmartKeyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s smartKeyDo) Limit(limit int) ISmartKeyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s smartKeyDo) Offset(offset int) ISmartKeyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s smartKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISmartKeyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s smartKeyDo) Unscoped() ISmartKeyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s smartKeyDo) Create(values ...*model.SmartKey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s smartKeyDo) CreateInBatches(values []*model.SmartKey, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s smartKeyDo) Save(values ...*model.SmartKey) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s smartKeyDo) First() (*model.SmartKey, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmartKey), nil
	}
}

func (s smartKeyDo) Take() (*model.SmartKey, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmartKey), nil
	}
}

func (s smartKeyDo) Last() (*model.SmartKey, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmartKey), nil
	}
}

func (s smartKeyDo) Find() ([]*model.SmartKey, error) {
	result, err := s.DO.Find()
	return result.([]*model.SmartKey), err
}

func (s smartKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SmartKey, err error) {
	buf := make([]*model.SmartKey, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s smartKeyDo) FindInBatches(result *[]*model.SmartKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s smartKeyDo) Attrs(attrs ...field.AssignExpr) ISmartKeyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s smartKeyDo) Assign(attrs ...field.AssignExpr) ISmartKeyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s smartKeyDo) Joins(fields ...field.RelationField) ISmartKeyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s smartKeyDo) Preload(fields ...field.RelationField) ISmartKeyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s smartKeyDo) FirstOrInit() (*model.SmartKey, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmartKey), nil
	}
}

func (s smartKeyDo) FirstOrCreate() (*model.SmartKey, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SmartKey), nil
	}
}

func (s smartKeyDo) FindByPage(offset int, limit int) (result []*model.SmartKey, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s smartKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s smartKeyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s smartKeyDo) Delete(models ...*model.SmartKey) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *smartKeyDo) withDO(do gen.Dao) *smartKeyDo {
	s.DO = *do.(*gen.DO)
	return s
}
