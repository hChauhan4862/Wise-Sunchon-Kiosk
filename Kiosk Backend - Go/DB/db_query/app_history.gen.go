// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPPHISTORY(db *gorm.DB, opts ...gen.DOOption) aPPHISTORY {
	_aPPHISTORY := aPPHISTORY{}

	_aPPHISTORY.aPPHISTORYDo.UseDB(db, opts...)
	_aPPHISTORY.aPPHISTORYDo.UseModel(&model.APPHISTORY{})

	tableName := _aPPHISTORY.aPPHISTORYDo.TableName()
	_aPPHISTORY.ALL = field.NewAsterisk(tableName)
	_aPPHISTORY.HISTNO = field.NewInt64(tableName, "HISTNO")
	_aPPHISTORY.GUBUN = field.NewString(tableName, "GUBUN")
	_aPPHISTORY.VERSION = field.NewString(tableName, "VERSION")
	_aPPHISTORY.REGTIME = field.NewTime(tableName, "REGTIME")
	_aPPHISTORY.BIGO = field.NewString(tableName, "BIGO")

	_aPPHISTORY.fillFieldMap()

	return _aPPHISTORY
}

type aPPHISTORY struct {
	aPPHISTORYDo

	ALL     field.Asterisk
	HISTNO  field.Int64
	GUBUN   field.String
	VERSION field.String
	REGTIME field.Time
	BIGO    field.String

	fieldMap map[string]field.Expr
}

func (a aPPHISTORY) Table(newTableName string) *aPPHISTORY {
	a.aPPHISTORYDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPHISTORY) As(alias string) *aPPHISTORY {
	a.aPPHISTORYDo.DO = *(a.aPPHISTORYDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPHISTORY) updateTableName(table string) *aPPHISTORY {
	a.ALL = field.NewAsterisk(table)
	a.HISTNO = field.NewInt64(table, "HISTNO")
	a.GUBUN = field.NewString(table, "GUBUN")
	a.VERSION = field.NewString(table, "VERSION")
	a.REGTIME = field.NewTime(table, "REGTIME")
	a.BIGO = field.NewString(table, "BIGO")

	a.fillFieldMap()

	return a
}

func (a *aPPHISTORY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPHISTORY) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["HISTNO"] = a.HISTNO
	a.fieldMap["GUBUN"] = a.GUBUN
	a.fieldMap["VERSION"] = a.VERSION
	a.fieldMap["REGTIME"] = a.REGTIME
	a.fieldMap["BIGO"] = a.BIGO
}

func (a aPPHISTORY) clone(db *gorm.DB) aPPHISTORY {
	a.aPPHISTORYDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPHISTORY) replaceDB(db *gorm.DB) aPPHISTORY {
	a.aPPHISTORYDo.ReplaceDB(db)
	return a
}

type aPPHISTORYDo struct{ gen.DO }

type IAPPHISTORYDo interface {
	gen.SubQuery
	Debug() IAPPHISTORYDo
	WithContext(ctx context.Context) IAPPHISTORYDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPPHISTORYDo
	WriteDB() IAPPHISTORYDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPPHISTORYDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPPHISTORYDo
	Not(conds ...gen.Condition) IAPPHISTORYDo
	Or(conds ...gen.Condition) IAPPHISTORYDo
	Select(conds ...field.Expr) IAPPHISTORYDo
	Where(conds ...gen.Condition) IAPPHISTORYDo
	Order(conds ...field.Expr) IAPPHISTORYDo
	Distinct(cols ...field.Expr) IAPPHISTORYDo
	Omit(cols ...field.Expr) IAPPHISTORYDo
	Join(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo
	Group(cols ...field.Expr) IAPPHISTORYDo
	Having(conds ...gen.Condition) IAPPHISTORYDo
	Limit(limit int) IAPPHISTORYDo
	Offset(offset int) IAPPHISTORYDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPHISTORYDo
	Unscoped() IAPPHISTORYDo
	Create(values ...*model.APPHISTORY) error
	CreateInBatches(values []*model.APPHISTORY, batchSize int) error
	Save(values ...*model.APPHISTORY) error
	First() (*model.APPHISTORY, error)
	Take() (*model.APPHISTORY, error)
	Last() (*model.APPHISTORY, error)
	Find() ([]*model.APPHISTORY, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPHISTORY, err error)
	FindInBatches(result *[]*model.APPHISTORY, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APPHISTORY) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPPHISTORYDo
	Assign(attrs ...field.AssignExpr) IAPPHISTORYDo
	Joins(fields ...field.RelationField) IAPPHISTORYDo
	Preload(fields ...field.RelationField) IAPPHISTORYDo
	FirstOrInit() (*model.APPHISTORY, error)
	FirstOrCreate() (*model.APPHISTORY, error)
	FindByPage(offset int, limit int) (result []*model.APPHISTORY, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPPHISTORYDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPPHISTORYDo) Debug() IAPPHISTORYDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPHISTORYDo) WithContext(ctx context.Context) IAPPHISTORYDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPHISTORYDo) ReadDB() IAPPHISTORYDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPHISTORYDo) WriteDB() IAPPHISTORYDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPHISTORYDo) Session(config *gorm.Session) IAPPHISTORYDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPHISTORYDo) Clauses(conds ...clause.Expression) IAPPHISTORYDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPHISTORYDo) Returning(value interface{}, columns ...string) IAPPHISTORYDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPHISTORYDo) Not(conds ...gen.Condition) IAPPHISTORYDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPHISTORYDo) Or(conds ...gen.Condition) IAPPHISTORYDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPHISTORYDo) Select(conds ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPHISTORYDo) Where(conds ...gen.Condition) IAPPHISTORYDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPHISTORYDo) Order(conds ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPHISTORYDo) Distinct(cols ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPHISTORYDo) Omit(cols ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPHISTORYDo) Join(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPHISTORYDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPHISTORYDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPHISTORYDo) Group(cols ...field.Expr) IAPPHISTORYDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPHISTORYDo) Having(conds ...gen.Condition) IAPPHISTORYDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPHISTORYDo) Limit(limit int) IAPPHISTORYDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPHISTORYDo) Offset(offset int) IAPPHISTORYDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPHISTORYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPHISTORYDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPHISTORYDo) Unscoped() IAPPHISTORYDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPHISTORYDo) Create(values ...*model.APPHISTORY) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPHISTORYDo) CreateInBatches(values []*model.APPHISTORY, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPHISTORYDo) Save(values ...*model.APPHISTORY) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPHISTORYDo) First() (*model.APPHISTORY, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPHISTORY), nil
	}
}

func (a aPPHISTORYDo) Take() (*model.APPHISTORY, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPHISTORY), nil
	}
}

func (a aPPHISTORYDo) Last() (*model.APPHISTORY, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPHISTORY), nil
	}
}

func (a aPPHISTORYDo) Find() ([]*model.APPHISTORY, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPHISTORY), err
}

func (a aPPHISTORYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPHISTORY, err error) {
	buf := make([]*model.APPHISTORY, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPHISTORYDo) FindInBatches(result *[]*model.APPHISTORY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPHISTORYDo) Attrs(attrs ...field.AssignExpr) IAPPHISTORYDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPHISTORYDo) Assign(attrs ...field.AssignExpr) IAPPHISTORYDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPHISTORYDo) Joins(fields ...field.RelationField) IAPPHISTORYDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPHISTORYDo) Preload(fields ...field.RelationField) IAPPHISTORYDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPHISTORYDo) FirstOrInit() (*model.APPHISTORY, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPHISTORY), nil
	}
}

func (a aPPHISTORYDo) FirstOrCreate() (*model.APPHISTORY, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPHISTORY), nil
	}
}

func (a aPPHISTORYDo) FindByPage(offset int, limit int) (result []*model.APPHISTORY, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPHISTORYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPHISTORYDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPHISTORYDo) Delete(models ...*model.APPHISTORY) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPHISTORYDo) withDO(do gen.Dao) *aPPHISTORYDo {
	a.DO = *do.(*gen.DO)
	return a
}
