// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseReturnConf(db *gorm.DB, opts ...gen.DOOption) wiseReturnConf {
	_wiseReturnConf := wiseReturnConf{}

	_wiseReturnConf.wiseReturnConfDo.UseDB(db, opts...)
	_wiseReturnConf.wiseReturnConfDo.UseModel(&model.WiseReturnConf{})

	tableName := _wiseReturnConf.wiseReturnConfDo.TableName()
	_wiseReturnConf.ALL = field.NewAsterisk(tableName)
	_wiseReturnConf.PcNo = field.NewInt64(tableName, "pc_no")
	_wiseReturnConf.Gubun = field.NewString(tableName, "gubun")
	_wiseReturnConf.GubunValue = field.NewString(tableName, "gubun_value")

	_wiseReturnConf.fillFieldMap()

	return _wiseReturnConf
}

type wiseReturnConf struct {
	wiseReturnConfDo

	ALL        field.Asterisk
	PcNo       field.Int64
	Gubun      field.String
	GubunValue field.String

	fieldMap map[string]field.Expr
}

func (w wiseReturnConf) Table(newTableName string) *wiseReturnConf {
	w.wiseReturnConfDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseReturnConf) As(alias string) *wiseReturnConf {
	w.wiseReturnConfDo.DO = *(w.wiseReturnConfDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseReturnConf) updateTableName(table string) *wiseReturnConf {
	w.ALL = field.NewAsterisk(table)
	w.PcNo = field.NewInt64(table, "pc_no")
	w.Gubun = field.NewString(table, "gubun")
	w.GubunValue = field.NewString(table, "gubun_value")

	w.fillFieldMap()

	return w
}

func (w *wiseReturnConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseReturnConf) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 3)
	w.fieldMap["pc_no"] = w.PcNo
	w.fieldMap["gubun"] = w.Gubun
	w.fieldMap["gubun_value"] = w.GubunValue
}

func (w wiseReturnConf) clone(db *gorm.DB) wiseReturnConf {
	w.wiseReturnConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseReturnConf) replaceDB(db *gorm.DB) wiseReturnConf {
	w.wiseReturnConfDo.ReplaceDB(db)
	return w
}

type wiseReturnConfDo struct{ gen.DO }

type IWiseReturnConfDo interface {
	gen.SubQuery
	Debug() IWiseReturnConfDo
	WithContext(ctx context.Context) IWiseReturnConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseReturnConfDo
	WriteDB() IWiseReturnConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseReturnConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseReturnConfDo
	Not(conds ...gen.Condition) IWiseReturnConfDo
	Or(conds ...gen.Condition) IWiseReturnConfDo
	Select(conds ...field.Expr) IWiseReturnConfDo
	Where(conds ...gen.Condition) IWiseReturnConfDo
	Order(conds ...field.Expr) IWiseReturnConfDo
	Distinct(cols ...field.Expr) IWiseReturnConfDo
	Omit(cols ...field.Expr) IWiseReturnConfDo
	Join(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo
	Group(cols ...field.Expr) IWiseReturnConfDo
	Having(conds ...gen.Condition) IWiseReturnConfDo
	Limit(limit int) IWiseReturnConfDo
	Offset(offset int) IWiseReturnConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnConfDo
	Unscoped() IWiseReturnConfDo
	Create(values ...*model.WiseReturnConf) error
	CreateInBatches(values []*model.WiseReturnConf, batchSize int) error
	Save(values ...*model.WiseReturnConf) error
	First() (*model.WiseReturnConf, error)
	Take() (*model.WiseReturnConf, error)
	Last() (*model.WiseReturnConf, error)
	Find() ([]*model.WiseReturnConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnConf, err error)
	FindInBatches(result *[]*model.WiseReturnConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseReturnConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseReturnConfDo
	Assign(attrs ...field.AssignExpr) IWiseReturnConfDo
	Joins(fields ...field.RelationField) IWiseReturnConfDo
	Preload(fields ...field.RelationField) IWiseReturnConfDo
	FirstOrInit() (*model.WiseReturnConf, error)
	FirstOrCreate() (*model.WiseReturnConf, error)
	FindByPage(offset int, limit int) (result []*model.WiseReturnConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseReturnConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseReturnConfDo) Debug() IWiseReturnConfDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseReturnConfDo) WithContext(ctx context.Context) IWiseReturnConfDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseReturnConfDo) ReadDB() IWiseReturnConfDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseReturnConfDo) WriteDB() IWiseReturnConfDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseReturnConfDo) Session(config *gorm.Session) IWiseReturnConfDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseReturnConfDo) Clauses(conds ...clause.Expression) IWiseReturnConfDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseReturnConfDo) Returning(value interface{}, columns ...string) IWiseReturnConfDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseReturnConfDo) Not(conds ...gen.Condition) IWiseReturnConfDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseReturnConfDo) Or(conds ...gen.Condition) IWiseReturnConfDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseReturnConfDo) Select(conds ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseReturnConfDo) Where(conds ...gen.Condition) IWiseReturnConfDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseReturnConfDo) Order(conds ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseReturnConfDo) Distinct(cols ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseReturnConfDo) Omit(cols ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseReturnConfDo) Join(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseReturnConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseReturnConfDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseReturnConfDo) Group(cols ...field.Expr) IWiseReturnConfDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseReturnConfDo) Having(conds ...gen.Condition) IWiseReturnConfDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseReturnConfDo) Limit(limit int) IWiseReturnConfDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseReturnConfDo) Offset(offset int) IWiseReturnConfDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseReturnConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnConfDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseReturnConfDo) Unscoped() IWiseReturnConfDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseReturnConfDo) Create(values ...*model.WiseReturnConf) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseReturnConfDo) CreateInBatches(values []*model.WiseReturnConf, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseReturnConfDo) Save(values ...*model.WiseReturnConf) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseReturnConfDo) First() (*model.WiseReturnConf, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnConf), nil
	}
}

func (w wiseReturnConfDo) Take() (*model.WiseReturnConf, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnConf), nil
	}
}

func (w wiseReturnConfDo) Last() (*model.WiseReturnConf, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnConf), nil
	}
}

func (w wiseReturnConfDo) Find() ([]*model.WiseReturnConf, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseReturnConf), err
}

func (w wiseReturnConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnConf, err error) {
	buf := make([]*model.WiseReturnConf, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseReturnConfDo) FindInBatches(result *[]*model.WiseReturnConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseReturnConfDo) Attrs(attrs ...field.AssignExpr) IWiseReturnConfDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseReturnConfDo) Assign(attrs ...field.AssignExpr) IWiseReturnConfDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseReturnConfDo) Joins(fields ...field.RelationField) IWiseReturnConfDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseReturnConfDo) Preload(fields ...field.RelationField) IWiseReturnConfDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseReturnConfDo) FirstOrInit() (*model.WiseReturnConf, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnConf), nil
	}
}

func (w wiseReturnConfDo) FirstOrCreate() (*model.WiseReturnConf, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnConf), nil
	}
}

func (w wiseReturnConfDo) FindByPage(offset int, limit int) (result []*model.WiseReturnConf, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseReturnConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseReturnConfDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseReturnConfDo) Delete(models ...*model.WiseReturnConf) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseReturnConfDo) withDO(do gen.Dao) *wiseReturnConfDo {
	w.DO = *do.(*gen.DO)
	return w
}
