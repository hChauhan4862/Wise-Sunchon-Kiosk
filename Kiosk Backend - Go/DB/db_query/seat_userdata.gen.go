// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatUserdatum(db *gorm.DB, opts ...gen.DOOption) seatUserdatum {
	_seatUserdatum := seatUserdatum{}

	_seatUserdatum.seatUserdatumDo.UseDB(db, opts...)
	_seatUserdatum.seatUserdatumDo.UseModel(&model.SeatUserdatum{})

	tableName := _seatUserdatum.seatUserdatumDo.TableName()
	_seatUserdatum.ALL = field.NewAsterisk(tableName)
	_seatUserdatum.Pid = field.NewString(tableName, "pid")
	_seatUserdatum.JuminBunho = field.NewString(tableName, "jumin_bunho")
	_seatUserdatum.Password = field.NewString(tableName, "password")
	_seatUserdatum.PatType = field.NewString(tableName, "pat_type")
	_seatUserdatum.PatTypeDesc = field.NewString(tableName, "pat_type_desc")
	_seatUserdatum.Name = field.NewString(tableName, "name")
	_seatUserdatum.DeptCode = field.NewString(tableName, "dept_code")
	_seatUserdatum.DeptName = field.NewString(tableName, "dept_name")
	_seatUserdatum.CardIssueCnt = field.NewInt64(tableName, "card_issue_cnt")
	_seatUserdatum.DateExprd = field.NewString(tableName, "date_exprd")
	_seatUserdatum.Email = field.NewString(tableName, "email")
	_seatUserdatum.Phone1 = field.NewString(tableName, "phone1")
	_seatUserdatum.Status = field.NewString(tableName, "status")
	_seatUserdatum.StatusName = field.NewString(tableName, "status_name")
	_seatUserdatum.PhotoURL = field.NewString(tableName, "photo_url")
	_seatUserdatum.SchoolNo = field.NewString(tableName, "school_no")

	_seatUserdatum.fillFieldMap()

	return _seatUserdatum
}

type seatUserdatum struct {
	seatUserdatumDo

	ALL          field.Asterisk
	Pid          field.String
	JuminBunho   field.String
	Password     field.String
	PatType      field.String
	PatTypeDesc  field.String
	Name         field.String
	DeptCode     field.String
	DeptName     field.String
	CardIssueCnt field.Int64
	DateExprd    field.String
	Email        field.String
	Phone1       field.String
	Status       field.String
	StatusName   field.String
	PhotoURL     field.String
	SchoolNo     field.String

	fieldMap map[string]field.Expr
}

func (s seatUserdatum) Table(newTableName string) *seatUserdatum {
	s.seatUserdatumDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatUserdatum) As(alias string) *seatUserdatum {
	s.seatUserdatumDo.DO = *(s.seatUserdatumDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatUserdatum) updateTableName(table string) *seatUserdatum {
	s.ALL = field.NewAsterisk(table)
	s.Pid = field.NewString(table, "pid")
	s.JuminBunho = field.NewString(table, "jumin_bunho")
	s.Password = field.NewString(table, "password")
	s.PatType = field.NewString(table, "pat_type")
	s.PatTypeDesc = field.NewString(table, "pat_type_desc")
	s.Name = field.NewString(table, "name")
	s.DeptCode = field.NewString(table, "dept_code")
	s.DeptName = field.NewString(table, "dept_name")
	s.CardIssueCnt = field.NewInt64(table, "card_issue_cnt")
	s.DateExprd = field.NewString(table, "date_exprd")
	s.Email = field.NewString(table, "email")
	s.Phone1 = field.NewString(table, "phone1")
	s.Status = field.NewString(table, "status")
	s.StatusName = field.NewString(table, "status_name")
	s.PhotoURL = field.NewString(table, "photo_url")
	s.SchoolNo = field.NewString(table, "school_no")

	s.fillFieldMap()

	return s
}

func (s *seatUserdatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatUserdatum) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["jumin_bunho"] = s.JuminBunho
	s.fieldMap["password"] = s.Password
	s.fieldMap["pat_type"] = s.PatType
	s.fieldMap["pat_type_desc"] = s.PatTypeDesc
	s.fieldMap["name"] = s.Name
	s.fieldMap["dept_code"] = s.DeptCode
	s.fieldMap["dept_name"] = s.DeptName
	s.fieldMap["card_issue_cnt"] = s.CardIssueCnt
	s.fieldMap["date_exprd"] = s.DateExprd
	s.fieldMap["email"] = s.Email
	s.fieldMap["phone1"] = s.Phone1
	s.fieldMap["status"] = s.Status
	s.fieldMap["status_name"] = s.StatusName
	s.fieldMap["photo_url"] = s.PhotoURL
	s.fieldMap["school_no"] = s.SchoolNo
}

func (s seatUserdatum) clone(db *gorm.DB) seatUserdatum {
	s.seatUserdatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatUserdatum) replaceDB(db *gorm.DB) seatUserdatum {
	s.seatUserdatumDo.ReplaceDB(db)
	return s
}

type seatUserdatumDo struct{ gen.DO }

type ISeatUserdatumDo interface {
	gen.SubQuery
	Debug() ISeatUserdatumDo
	WithContext(ctx context.Context) ISeatUserdatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatUserdatumDo
	WriteDB() ISeatUserdatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatUserdatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatUserdatumDo
	Not(conds ...gen.Condition) ISeatUserdatumDo
	Or(conds ...gen.Condition) ISeatUserdatumDo
	Select(conds ...field.Expr) ISeatUserdatumDo
	Where(conds ...gen.Condition) ISeatUserdatumDo
	Order(conds ...field.Expr) ISeatUserdatumDo
	Distinct(cols ...field.Expr) ISeatUserdatumDo
	Omit(cols ...field.Expr) ISeatUserdatumDo
	Join(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo
	Group(cols ...field.Expr) ISeatUserdatumDo
	Having(conds ...gen.Condition) ISeatUserdatumDo
	Limit(limit int) ISeatUserdatumDo
	Offset(offset int) ISeatUserdatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatUserdatumDo
	Unscoped() ISeatUserdatumDo
	Create(values ...*model.SeatUserdatum) error
	CreateInBatches(values []*model.SeatUserdatum, batchSize int) error
	Save(values ...*model.SeatUserdatum) error
	First() (*model.SeatUserdatum, error)
	Take() (*model.SeatUserdatum, error)
	Last() (*model.SeatUserdatum, error)
	Find() ([]*model.SeatUserdatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatUserdatum, err error)
	FindInBatches(result *[]*model.SeatUserdatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatUserdatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatUserdatumDo
	Assign(attrs ...field.AssignExpr) ISeatUserdatumDo
	Joins(fields ...field.RelationField) ISeatUserdatumDo
	Preload(fields ...field.RelationField) ISeatUserdatumDo
	FirstOrInit() (*model.SeatUserdatum, error)
	FirstOrCreate() (*model.SeatUserdatum, error)
	FindByPage(offset int, limit int) (result []*model.SeatUserdatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatUserdatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatUserdatumDo) Debug() ISeatUserdatumDo {
	return s.withDO(s.DO.Debug())
}

func (s seatUserdatumDo) WithContext(ctx context.Context) ISeatUserdatumDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatUserdatumDo) ReadDB() ISeatUserdatumDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatUserdatumDo) WriteDB() ISeatUserdatumDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatUserdatumDo) Session(config *gorm.Session) ISeatUserdatumDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatUserdatumDo) Clauses(conds ...clause.Expression) ISeatUserdatumDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatUserdatumDo) Returning(value interface{}, columns ...string) ISeatUserdatumDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatUserdatumDo) Not(conds ...gen.Condition) ISeatUserdatumDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatUserdatumDo) Or(conds ...gen.Condition) ISeatUserdatumDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatUserdatumDo) Select(conds ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatUserdatumDo) Where(conds ...gen.Condition) ISeatUserdatumDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatUserdatumDo) Order(conds ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatUserdatumDo) Distinct(cols ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatUserdatumDo) Omit(cols ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatUserdatumDo) Join(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatUserdatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatUserdatumDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatUserdatumDo) Group(cols ...field.Expr) ISeatUserdatumDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatUserdatumDo) Having(conds ...gen.Condition) ISeatUserdatumDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatUserdatumDo) Limit(limit int) ISeatUserdatumDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatUserdatumDo) Offset(offset int) ISeatUserdatumDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatUserdatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatUserdatumDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatUserdatumDo) Unscoped() ISeatUserdatumDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatUserdatumDo) Create(values ...*model.SeatUserdatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatUserdatumDo) CreateInBatches(values []*model.SeatUserdatum, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatUserdatumDo) Save(values ...*model.SeatUserdatum) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatUserdatumDo) First() (*model.SeatUserdatum, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUserdatum), nil
	}
}

func (s seatUserdatumDo) Take() (*model.SeatUserdatum, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUserdatum), nil
	}
}

func (s seatUserdatumDo) Last() (*model.SeatUserdatum, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUserdatum), nil
	}
}

func (s seatUserdatumDo) Find() ([]*model.SeatUserdatum, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatUserdatum), err
}

func (s seatUserdatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatUserdatum, err error) {
	buf := make([]*model.SeatUserdatum, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatUserdatumDo) FindInBatches(result *[]*model.SeatUserdatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatUserdatumDo) Attrs(attrs ...field.AssignExpr) ISeatUserdatumDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatUserdatumDo) Assign(attrs ...field.AssignExpr) ISeatUserdatumDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatUserdatumDo) Joins(fields ...field.RelationField) ISeatUserdatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatUserdatumDo) Preload(fields ...field.RelationField) ISeatUserdatumDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatUserdatumDo) FirstOrInit() (*model.SeatUserdatum, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUserdatum), nil
	}
}

func (s seatUserdatumDo) FirstOrCreate() (*model.SeatUserdatum, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUserdatum), nil
	}
}

func (s seatUserdatumDo) FindByPage(offset int, limit int) (result []*model.SeatUserdatum, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatUserdatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatUserdatumDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatUserdatumDo) Delete(models ...*model.SeatUserdatum) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatUserdatumDo) withDO(do gen.Dao) *seatUserdatumDo {
	s.DO = *do.(*gen.DO)
	return s
}
