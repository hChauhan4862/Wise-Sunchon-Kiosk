// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatStatLimit(db *gorm.DB, opts ...gen.DOOption) seatStatLimit {
	_seatStatLimit := seatStatLimit{}

	_seatStatLimit.seatStatLimitDo.UseDB(db, opts...)
	_seatStatLimit.seatStatLimitDo.UseModel(&model.SeatStatLimit{})

	tableName := _seatStatLimit.seatStatLimitDo.TableName()
	_seatStatLimit.ALL = field.NewAsterisk(tableName)
	_seatStatLimit.StatCode = field.NewInt64(tableName, "stat_code")
	_seatStatLimit.StatName = field.NewString(tableName, "stat_name")
	_seatStatLimit.BlockDay = field.NewString(tableName, "block_day")
	_seatStatLimit.BlockCnt = field.NewInt64(tableName, "block_cnt")
	_seatStatLimit.UseYn = field.NewString(tableName, "use_yn")
	_seatStatLimit.StatGb = field.NewString(tableName, "stat_gb")

	_seatStatLimit.fillFieldMap()

	return _seatStatLimit
}

type seatStatLimit struct {
	seatStatLimitDo

	ALL      field.Asterisk
	StatCode field.Int64
	StatName field.String
	BlockDay field.String
	BlockCnt field.Int64
	UseYn    field.String
	StatGb   field.String

	fieldMap map[string]field.Expr
}

func (s seatStatLimit) Table(newTableName string) *seatStatLimit {
	s.seatStatLimitDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatStatLimit) As(alias string) *seatStatLimit {
	s.seatStatLimitDo.DO = *(s.seatStatLimitDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatStatLimit) updateTableName(table string) *seatStatLimit {
	s.ALL = field.NewAsterisk(table)
	s.StatCode = field.NewInt64(table, "stat_code")
	s.StatName = field.NewString(table, "stat_name")
	s.BlockDay = field.NewString(table, "block_day")
	s.BlockCnt = field.NewInt64(table, "block_cnt")
	s.UseYn = field.NewString(table, "use_yn")
	s.StatGb = field.NewString(table, "stat_gb")

	s.fillFieldMap()

	return s
}

func (s *seatStatLimit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatStatLimit) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 6)
	s.fieldMap["stat_code"] = s.StatCode
	s.fieldMap["stat_name"] = s.StatName
	s.fieldMap["block_day"] = s.BlockDay
	s.fieldMap["block_cnt"] = s.BlockCnt
	s.fieldMap["use_yn"] = s.UseYn
	s.fieldMap["stat_gb"] = s.StatGb
}

func (s seatStatLimit) clone(db *gorm.DB) seatStatLimit {
	s.seatStatLimitDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatStatLimit) replaceDB(db *gorm.DB) seatStatLimit {
	s.seatStatLimitDo.ReplaceDB(db)
	return s
}

type seatStatLimitDo struct{ gen.DO }

type ISeatStatLimitDo interface {
	gen.SubQuery
	Debug() ISeatStatLimitDo
	WithContext(ctx context.Context) ISeatStatLimitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatStatLimitDo
	WriteDB() ISeatStatLimitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatStatLimitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatStatLimitDo
	Not(conds ...gen.Condition) ISeatStatLimitDo
	Or(conds ...gen.Condition) ISeatStatLimitDo
	Select(conds ...field.Expr) ISeatStatLimitDo
	Where(conds ...gen.Condition) ISeatStatLimitDo
	Order(conds ...field.Expr) ISeatStatLimitDo
	Distinct(cols ...field.Expr) ISeatStatLimitDo
	Omit(cols ...field.Expr) ISeatStatLimitDo
	Join(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo
	Group(cols ...field.Expr) ISeatStatLimitDo
	Having(conds ...gen.Condition) ISeatStatLimitDo
	Limit(limit int) ISeatStatLimitDo
	Offset(offset int) ISeatStatLimitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatStatLimitDo
	Unscoped() ISeatStatLimitDo
	Create(values ...*model.SeatStatLimit) error
	CreateInBatches(values []*model.SeatStatLimit, batchSize int) error
	Save(values ...*model.SeatStatLimit) error
	First() (*model.SeatStatLimit, error)
	Take() (*model.SeatStatLimit, error)
	Last() (*model.SeatStatLimit, error)
	Find() ([]*model.SeatStatLimit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatStatLimit, err error)
	FindInBatches(result *[]*model.SeatStatLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatStatLimit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatStatLimitDo
	Assign(attrs ...field.AssignExpr) ISeatStatLimitDo
	Joins(fields ...field.RelationField) ISeatStatLimitDo
	Preload(fields ...field.RelationField) ISeatStatLimitDo
	FirstOrInit() (*model.SeatStatLimit, error)
	FirstOrCreate() (*model.SeatStatLimit, error)
	FindByPage(offset int, limit int) (result []*model.SeatStatLimit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatStatLimitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatStatLimitDo) Debug() ISeatStatLimitDo {
	return s.withDO(s.DO.Debug())
}

func (s seatStatLimitDo) WithContext(ctx context.Context) ISeatStatLimitDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatStatLimitDo) ReadDB() ISeatStatLimitDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatStatLimitDo) WriteDB() ISeatStatLimitDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatStatLimitDo) Session(config *gorm.Session) ISeatStatLimitDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatStatLimitDo) Clauses(conds ...clause.Expression) ISeatStatLimitDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatStatLimitDo) Returning(value interface{}, columns ...string) ISeatStatLimitDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatStatLimitDo) Not(conds ...gen.Condition) ISeatStatLimitDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatStatLimitDo) Or(conds ...gen.Condition) ISeatStatLimitDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatStatLimitDo) Select(conds ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatStatLimitDo) Where(conds ...gen.Condition) ISeatStatLimitDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatStatLimitDo) Order(conds ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatStatLimitDo) Distinct(cols ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatStatLimitDo) Omit(cols ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatStatLimitDo) Join(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatStatLimitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatStatLimitDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatStatLimitDo) Group(cols ...field.Expr) ISeatStatLimitDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatStatLimitDo) Having(conds ...gen.Condition) ISeatStatLimitDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatStatLimitDo) Limit(limit int) ISeatStatLimitDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatStatLimitDo) Offset(offset int) ISeatStatLimitDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatStatLimitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatStatLimitDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatStatLimitDo) Unscoped() ISeatStatLimitDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatStatLimitDo) Create(values ...*model.SeatStatLimit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatStatLimitDo) CreateInBatches(values []*model.SeatStatLimit, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatStatLimitDo) Save(values ...*model.SeatStatLimit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatStatLimitDo) First() (*model.SeatStatLimit, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatStatLimit), nil
	}
}

func (s seatStatLimitDo) Take() (*model.SeatStatLimit, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatStatLimit), nil
	}
}

func (s seatStatLimitDo) Last() (*model.SeatStatLimit, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatStatLimit), nil
	}
}

func (s seatStatLimitDo) Find() ([]*model.SeatStatLimit, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatStatLimit), err
}

func (s seatStatLimitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatStatLimit, err error) {
	buf := make([]*model.SeatStatLimit, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatStatLimitDo) FindInBatches(result *[]*model.SeatStatLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatStatLimitDo) Attrs(attrs ...field.AssignExpr) ISeatStatLimitDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatStatLimitDo) Assign(attrs ...field.AssignExpr) ISeatStatLimitDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatStatLimitDo) Joins(fields ...field.RelationField) ISeatStatLimitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatStatLimitDo) Preload(fields ...field.RelationField) ISeatStatLimitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatStatLimitDo) FirstOrInit() (*model.SeatStatLimit, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatStatLimit), nil
	}
}

func (s seatStatLimitDo) FirstOrCreate() (*model.SeatStatLimit, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatStatLimit), nil
	}
}

func (s seatStatLimitDo) FindByPage(offset int, limit int) (result []*model.SeatStatLimit, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatStatLimitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatStatLimitDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatStatLimitDo) Delete(models ...*model.SeatStatLimit) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatStatLimitDo) withDO(do gen.Dao) *seatStatLimitDo {
	s.DO = *do.(*gen.DO)
	return s
}
