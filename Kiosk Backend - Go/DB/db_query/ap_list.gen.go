// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPLIST(db *gorm.DB, opts ...gen.DOOption) aPLIST {
	_aPLIST := aPLIST{}

	_aPLIST.aPLISTDo.UseDB(db, opts...)
	_aPLIST.aPLISTDo.UseModel(&model.APLIST{})

	tableName := _aPLIST.aPLISTDo.TableName()
	_aPLIST.ALL = field.NewAsterisk(tableName)
	_aPLIST.APSEQ = field.NewInt64(tableName, "AP_SEQ")
	_aPLIST.APLOCATION = field.NewString(tableName, "AP_LOCATION")
	_aPLIST.HWMAC = field.NewString(tableName, "HW_MAC")
	_aPLIST.BSSIDMAC = field.NewString(tableName, "BSSID_MAC")
	_aPLIST.BSSID = field.NewString(tableName, "BSSID")
	_aPLIST.TYPE = field.NewString(tableName, "TYPE")
	_aPLIST.Description = field.NewString(tableName, "description")
	_aPLIST.UseYn = field.NewString(tableName, "use_yn")

	_aPLIST.fillFieldMap()

	return _aPLIST
}

type aPLIST struct {
	aPLISTDo

	ALL         field.Asterisk
	APSEQ       field.Int64
	APLOCATION  field.String
	HWMAC       field.String
	BSSIDMAC    field.String
	BSSID       field.String
	TYPE        field.String
	Description field.String
	UseYn       field.String

	fieldMap map[string]field.Expr
}

func (a aPLIST) Table(newTableName string) *aPLIST {
	a.aPLISTDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPLIST) As(alias string) *aPLIST {
	a.aPLISTDo.DO = *(a.aPLISTDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPLIST) updateTableName(table string) *aPLIST {
	a.ALL = field.NewAsterisk(table)
	a.APSEQ = field.NewInt64(table, "AP_SEQ")
	a.APLOCATION = field.NewString(table, "AP_LOCATION")
	a.HWMAC = field.NewString(table, "HW_MAC")
	a.BSSIDMAC = field.NewString(table, "BSSID_MAC")
	a.BSSID = field.NewString(table, "BSSID")
	a.TYPE = field.NewString(table, "TYPE")
	a.Description = field.NewString(table, "description")
	a.UseYn = field.NewString(table, "use_yn")

	a.fillFieldMap()

	return a
}

func (a *aPLIST) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPLIST) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 8)
	a.fieldMap["AP_SEQ"] = a.APSEQ
	a.fieldMap["AP_LOCATION"] = a.APLOCATION
	a.fieldMap["HW_MAC"] = a.HWMAC
	a.fieldMap["BSSID_MAC"] = a.BSSIDMAC
	a.fieldMap["BSSID"] = a.BSSID
	a.fieldMap["TYPE"] = a.TYPE
	a.fieldMap["description"] = a.Description
	a.fieldMap["use_yn"] = a.UseYn
}

func (a aPLIST) clone(db *gorm.DB) aPLIST {
	a.aPLISTDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPLIST) replaceDB(db *gorm.DB) aPLIST {
	a.aPLISTDo.ReplaceDB(db)
	return a
}

type aPLISTDo struct{ gen.DO }

type IAPLISTDo interface {
	gen.SubQuery
	Debug() IAPLISTDo
	WithContext(ctx context.Context) IAPLISTDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPLISTDo
	WriteDB() IAPLISTDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPLISTDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPLISTDo
	Not(conds ...gen.Condition) IAPLISTDo
	Or(conds ...gen.Condition) IAPLISTDo
	Select(conds ...field.Expr) IAPLISTDo
	Where(conds ...gen.Condition) IAPLISTDo
	Order(conds ...field.Expr) IAPLISTDo
	Distinct(cols ...field.Expr) IAPLISTDo
	Omit(cols ...field.Expr) IAPLISTDo
	Join(table schema.Tabler, on ...field.Expr) IAPLISTDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPLISTDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPLISTDo
	Group(cols ...field.Expr) IAPLISTDo
	Having(conds ...gen.Condition) IAPLISTDo
	Limit(limit int) IAPLISTDo
	Offset(offset int) IAPLISTDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPLISTDo
	Unscoped() IAPLISTDo
	Create(values ...*model.APLIST) error
	CreateInBatches(values []*model.APLIST, batchSize int) error
	Save(values ...*model.APLIST) error
	First() (*model.APLIST, error)
	Take() (*model.APLIST, error)
	Last() (*model.APLIST, error)
	Find() ([]*model.APLIST, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APLIST, err error)
	FindInBatches(result *[]*model.APLIST, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APLIST) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPLISTDo
	Assign(attrs ...field.AssignExpr) IAPLISTDo
	Joins(fields ...field.RelationField) IAPLISTDo
	Preload(fields ...field.RelationField) IAPLISTDo
	FirstOrInit() (*model.APLIST, error)
	FirstOrCreate() (*model.APLIST, error)
	FindByPage(offset int, limit int) (result []*model.APLIST, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPLISTDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPLISTDo) Debug() IAPLISTDo {
	return a.withDO(a.DO.Debug())
}

func (a aPLISTDo) WithContext(ctx context.Context) IAPLISTDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPLISTDo) ReadDB() IAPLISTDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPLISTDo) WriteDB() IAPLISTDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPLISTDo) Session(config *gorm.Session) IAPLISTDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPLISTDo) Clauses(conds ...clause.Expression) IAPLISTDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPLISTDo) Returning(value interface{}, columns ...string) IAPLISTDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPLISTDo) Not(conds ...gen.Condition) IAPLISTDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPLISTDo) Or(conds ...gen.Condition) IAPLISTDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPLISTDo) Select(conds ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPLISTDo) Where(conds ...gen.Condition) IAPLISTDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPLISTDo) Order(conds ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPLISTDo) Distinct(cols ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPLISTDo) Omit(cols ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPLISTDo) Join(table schema.Tabler, on ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPLISTDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPLISTDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPLISTDo) Group(cols ...field.Expr) IAPLISTDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPLISTDo) Having(conds ...gen.Condition) IAPLISTDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPLISTDo) Limit(limit int) IAPLISTDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPLISTDo) Offset(offset int) IAPLISTDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPLISTDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPLISTDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPLISTDo) Unscoped() IAPLISTDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPLISTDo) Create(values ...*model.APLIST) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPLISTDo) CreateInBatches(values []*model.APLIST, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPLISTDo) Save(values ...*model.APLIST) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPLISTDo) First() (*model.APLIST, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APLIST), nil
	}
}

func (a aPLISTDo) Take() (*model.APLIST, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APLIST), nil
	}
}

func (a aPLISTDo) Last() (*model.APLIST, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APLIST), nil
	}
}

func (a aPLISTDo) Find() ([]*model.APLIST, error) {
	result, err := a.DO.Find()
	return result.([]*model.APLIST), err
}

func (a aPLISTDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APLIST, err error) {
	buf := make([]*model.APLIST, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPLISTDo) FindInBatches(result *[]*model.APLIST, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPLISTDo) Attrs(attrs ...field.AssignExpr) IAPLISTDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPLISTDo) Assign(attrs ...field.AssignExpr) IAPLISTDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPLISTDo) Joins(fields ...field.RelationField) IAPLISTDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPLISTDo) Preload(fields ...field.RelationField) IAPLISTDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPLISTDo) FirstOrInit() (*model.APLIST, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APLIST), nil
	}
}

func (a aPLISTDo) FirstOrCreate() (*model.APLIST, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APLIST), nil
	}
}

func (a aPLISTDo) FindByPage(offset int, limit int) (result []*model.APLIST, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPLISTDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPLISTDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPLISTDo) Delete(models ...*model.APLIST) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPLISTDo) withDO(do gen.Dao) *aPLISTDo {
	a.DO = *do.(*gen.DO)
	return a
}
