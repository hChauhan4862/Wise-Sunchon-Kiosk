// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newMOBILEMEMBERINF(db *gorm.DB, opts ...gen.DOOption) mOBILEMEMBERINF {
	_mOBILEMEMBERINF := mOBILEMEMBERINF{}

	_mOBILEMEMBERINF.mOBILEMEMBERINFDo.UseDB(db, opts...)
	_mOBILEMEMBERINF.mOBILEMEMBERINFDo.UseModel(&model.MOBILEMEMBERINF{})

	tableName := _mOBILEMEMBERINF.mOBILEMEMBERINFDo.TableName()
	_mOBILEMEMBERINF.ALL = field.NewAsterisk(tableName)
	_mOBILEMEMBERINF.NO = field.NewInt64(tableName, "NO")
	_mOBILEMEMBERINF.DEVICEUUID = field.NewString(tableName, "DEVICE_UUID")
	_mOBILEMEMBERINF.DEVICETOKEN = field.NewString(tableName, "DEVICE_TOKEN")
	_mOBILEMEMBERINF.PUSHTOKEN = field.NewString(tableName, "PUSH_TOKEN")
	_mOBILEMEMBERINF.SCHOOLNO = field.NewString(tableName, "SCHOOL_NO")
	_mOBILEMEMBERINF.FAVORITESSEAT = field.NewString(tableName, "FAVORITES_SEAT")
	_mOBILEMEMBERINF.LASTMSG = field.NewString(tableName, "LAST_MSG")
	_mOBILEMEMBERINF.REGDATE = field.NewTime(tableName, "REG_DATE")
	_mOBILEMEMBERINF.UPDATEDATE = field.NewTime(tableName, "UPDATE_DATE")
	_mOBILEMEMBERINF.SEX = field.NewInt64(tableName, "SEX")
	_mOBILEMEMBERINF.DEVICETYPE = field.NewInt64(tableName, "DEVICE_TYPE")
	_mOBILEMEMBERINF.USERID = field.NewString(tableName, "USER_ID")
	_mOBILEMEMBERINF.PUSHRECEIVE = field.NewInt64(tableName, "PUSH_RECEIVE")

	_mOBILEMEMBERINF.fillFieldMap()

	return _mOBILEMEMBERINF
}

type mOBILEMEMBERINF struct {
	mOBILEMEMBERINFDo

	ALL           field.Asterisk
	NO            field.Int64
	DEVICEUUID    field.String
	DEVICETOKEN   field.String
	PUSHTOKEN     field.String
	SCHOOLNO      field.String
	FAVORITESSEAT field.String
	LASTMSG       field.String
	REGDATE       field.Time
	UPDATEDATE    field.Time
	SEX           field.Int64
	DEVICETYPE    field.Int64
	USERID        field.String
	PUSHRECEIVE   field.Int64

	fieldMap map[string]field.Expr
}

func (m mOBILEMEMBERINF) Table(newTableName string) *mOBILEMEMBERINF {
	m.mOBILEMEMBERINFDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m mOBILEMEMBERINF) As(alias string) *mOBILEMEMBERINF {
	m.mOBILEMEMBERINFDo.DO = *(m.mOBILEMEMBERINFDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *mOBILEMEMBERINF) updateTableName(table string) *mOBILEMEMBERINF {
	m.ALL = field.NewAsterisk(table)
	m.NO = field.NewInt64(table, "NO")
	m.DEVICEUUID = field.NewString(table, "DEVICE_UUID")
	m.DEVICETOKEN = field.NewString(table, "DEVICE_TOKEN")
	m.PUSHTOKEN = field.NewString(table, "PUSH_TOKEN")
	m.SCHOOLNO = field.NewString(table, "SCHOOL_NO")
	m.FAVORITESSEAT = field.NewString(table, "FAVORITES_SEAT")
	m.LASTMSG = field.NewString(table, "LAST_MSG")
	m.REGDATE = field.NewTime(table, "REG_DATE")
	m.UPDATEDATE = field.NewTime(table, "UPDATE_DATE")
	m.SEX = field.NewInt64(table, "SEX")
	m.DEVICETYPE = field.NewInt64(table, "DEVICE_TYPE")
	m.USERID = field.NewString(table, "USER_ID")
	m.PUSHRECEIVE = field.NewInt64(table, "PUSH_RECEIVE")

	m.fillFieldMap()

	return m
}

func (m *mOBILEMEMBERINF) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *mOBILEMEMBERINF) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 13)
	m.fieldMap["NO"] = m.NO
	m.fieldMap["DEVICE_UUID"] = m.DEVICEUUID
	m.fieldMap["DEVICE_TOKEN"] = m.DEVICETOKEN
	m.fieldMap["PUSH_TOKEN"] = m.PUSHTOKEN
	m.fieldMap["SCHOOL_NO"] = m.SCHOOLNO
	m.fieldMap["FAVORITES_SEAT"] = m.FAVORITESSEAT
	m.fieldMap["LAST_MSG"] = m.LASTMSG
	m.fieldMap["REG_DATE"] = m.REGDATE
	m.fieldMap["UPDATE_DATE"] = m.UPDATEDATE
	m.fieldMap["SEX"] = m.SEX
	m.fieldMap["DEVICE_TYPE"] = m.DEVICETYPE
	m.fieldMap["USER_ID"] = m.USERID
	m.fieldMap["PUSH_RECEIVE"] = m.PUSHRECEIVE
}

func (m mOBILEMEMBERINF) clone(db *gorm.DB) mOBILEMEMBERINF {
	m.mOBILEMEMBERINFDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m mOBILEMEMBERINF) replaceDB(db *gorm.DB) mOBILEMEMBERINF {
	m.mOBILEMEMBERINFDo.ReplaceDB(db)
	return m
}

type mOBILEMEMBERINFDo struct{ gen.DO }

type IMOBILEMEMBERINFDo interface {
	gen.SubQuery
	Debug() IMOBILEMEMBERINFDo
	WithContext(ctx context.Context) IMOBILEMEMBERINFDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMOBILEMEMBERINFDo
	WriteDB() IMOBILEMEMBERINFDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMOBILEMEMBERINFDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMOBILEMEMBERINFDo
	Not(conds ...gen.Condition) IMOBILEMEMBERINFDo
	Or(conds ...gen.Condition) IMOBILEMEMBERINFDo
	Select(conds ...field.Expr) IMOBILEMEMBERINFDo
	Where(conds ...gen.Condition) IMOBILEMEMBERINFDo
	Order(conds ...field.Expr) IMOBILEMEMBERINFDo
	Distinct(cols ...field.Expr) IMOBILEMEMBERINFDo
	Omit(cols ...field.Expr) IMOBILEMEMBERINFDo
	Join(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo
	Group(cols ...field.Expr) IMOBILEMEMBERINFDo
	Having(conds ...gen.Condition) IMOBILEMEMBERINFDo
	Limit(limit int) IMOBILEMEMBERINFDo
	Offset(offset int) IMOBILEMEMBERINFDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMOBILEMEMBERINFDo
	Unscoped() IMOBILEMEMBERINFDo
	Create(values ...*model.MOBILEMEMBERINF) error
	CreateInBatches(values []*model.MOBILEMEMBERINF, batchSize int) error
	Save(values ...*model.MOBILEMEMBERINF) error
	First() (*model.MOBILEMEMBERINF, error)
	Take() (*model.MOBILEMEMBERINF, error)
	Last() (*model.MOBILEMEMBERINF, error)
	Find() ([]*model.MOBILEMEMBERINF, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MOBILEMEMBERINF, err error)
	FindInBatches(result *[]*model.MOBILEMEMBERINF, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MOBILEMEMBERINF) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMOBILEMEMBERINFDo
	Assign(attrs ...field.AssignExpr) IMOBILEMEMBERINFDo
	Joins(fields ...field.RelationField) IMOBILEMEMBERINFDo
	Preload(fields ...field.RelationField) IMOBILEMEMBERINFDo
	FirstOrInit() (*model.MOBILEMEMBERINF, error)
	FirstOrCreate() (*model.MOBILEMEMBERINF, error)
	FindByPage(offset int, limit int) (result []*model.MOBILEMEMBERINF, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMOBILEMEMBERINFDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m mOBILEMEMBERINFDo) Debug() IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Debug())
}

func (m mOBILEMEMBERINFDo) WithContext(ctx context.Context) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m mOBILEMEMBERINFDo) ReadDB() IMOBILEMEMBERINFDo {
	return m.Clauses(dbresolver.Read)
}

func (m mOBILEMEMBERINFDo) WriteDB() IMOBILEMEMBERINFDo {
	return m.Clauses(dbresolver.Write)
}

func (m mOBILEMEMBERINFDo) Session(config *gorm.Session) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Session(config))
}

func (m mOBILEMEMBERINFDo) Clauses(conds ...clause.Expression) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m mOBILEMEMBERINFDo) Returning(value interface{}, columns ...string) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m mOBILEMEMBERINFDo) Not(conds ...gen.Condition) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m mOBILEMEMBERINFDo) Or(conds ...gen.Condition) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m mOBILEMEMBERINFDo) Select(conds ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m mOBILEMEMBERINFDo) Where(conds ...gen.Condition) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m mOBILEMEMBERINFDo) Order(conds ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m mOBILEMEMBERINFDo) Distinct(cols ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m mOBILEMEMBERINFDo) Omit(cols ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m mOBILEMEMBERINFDo) Join(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m mOBILEMEMBERINFDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m mOBILEMEMBERINFDo) RightJoin(table schema.Tabler, on ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m mOBILEMEMBERINFDo) Group(cols ...field.Expr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m mOBILEMEMBERINFDo) Having(conds ...gen.Condition) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m mOBILEMEMBERINFDo) Limit(limit int) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m mOBILEMEMBERINFDo) Offset(offset int) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m mOBILEMEMBERINFDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m mOBILEMEMBERINFDo) Unscoped() IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Unscoped())
}

func (m mOBILEMEMBERINFDo) Create(values ...*model.MOBILEMEMBERINF) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m mOBILEMEMBERINFDo) CreateInBatches(values []*model.MOBILEMEMBERINF, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m mOBILEMEMBERINFDo) Save(values ...*model.MOBILEMEMBERINF) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m mOBILEMEMBERINFDo) First() (*model.MOBILEMEMBERINF, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MOBILEMEMBERINF), nil
	}
}

func (m mOBILEMEMBERINFDo) Take() (*model.MOBILEMEMBERINF, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MOBILEMEMBERINF), nil
	}
}

func (m mOBILEMEMBERINFDo) Last() (*model.MOBILEMEMBERINF, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MOBILEMEMBERINF), nil
	}
}

func (m mOBILEMEMBERINFDo) Find() ([]*model.MOBILEMEMBERINF, error) {
	result, err := m.DO.Find()
	return result.([]*model.MOBILEMEMBERINF), err
}

func (m mOBILEMEMBERINFDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MOBILEMEMBERINF, err error) {
	buf := make([]*model.MOBILEMEMBERINF, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m mOBILEMEMBERINFDo) FindInBatches(result *[]*model.MOBILEMEMBERINF, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m mOBILEMEMBERINFDo) Attrs(attrs ...field.AssignExpr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m mOBILEMEMBERINFDo) Assign(attrs ...field.AssignExpr) IMOBILEMEMBERINFDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m mOBILEMEMBERINFDo) Joins(fields ...field.RelationField) IMOBILEMEMBERINFDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m mOBILEMEMBERINFDo) Preload(fields ...field.RelationField) IMOBILEMEMBERINFDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m mOBILEMEMBERINFDo) FirstOrInit() (*model.MOBILEMEMBERINF, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MOBILEMEMBERINF), nil
	}
}

func (m mOBILEMEMBERINFDo) FirstOrCreate() (*model.MOBILEMEMBERINF, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MOBILEMEMBERINF), nil
	}
}

func (m mOBILEMEMBERINFDo) FindByPage(offset int, limit int) (result []*model.MOBILEMEMBERINF, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m mOBILEMEMBERINFDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m mOBILEMEMBERINFDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m mOBILEMEMBERINFDo) Delete(models ...*model.MOBILEMEMBERINF) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *mOBILEMEMBERINFDo) withDO(do gen.Dao) *mOBILEMEMBERINFDo {
	m.DO = *do.(*gen.DO)
	return m
}
