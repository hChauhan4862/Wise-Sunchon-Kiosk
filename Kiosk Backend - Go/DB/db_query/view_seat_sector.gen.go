// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_view_seat_sector(db *gorm.DB, opts ...gen.DOOption) hCV_view_seat_sector {
	_hCV_view_seat_sector := hCV_view_seat_sector{}

	_hCV_view_seat_sector.hCV_view_seat_sectorDo.UseDB(db, opts...)
	_hCV_view_seat_sector.hCV_view_seat_sectorDo.UseModel(&model.HCV_view_seat_sector{})

	tableName := _hCV_view_seat_sector.hCV_view_seat_sectorDo.TableName()
	_hCV_view_seat_sector.ALL = field.NewAsterisk(tableName)
	_hCV_view_seat_sector.Sectorno = field.NewInt64(tableName, "sectorno")
	_hCV_view_seat_sector.Name = field.NewString(tableName, "name")
	_hCV_view_seat_sector.EnName = field.NewString(tableName, "en_name")
	_hCV_view_seat_sector.Typeno = field.NewInt64(tableName, "typeno")
	_hCV_view_seat_sector.Roomno = field.NewInt64(tableName, "roomno")
	_hCV_view_seat_sector.Floorno = field.NewInt64(tableName, "floorno")
	_hCV_view_seat_sector.BookingYn = field.NewString(tableName, "booking_yn")
	_hCV_view_seat_sector.AssignYn = field.NewString(tableName, "assign_yn")
	_hCV_view_seat_sector.MobileBookingYn = field.NewString(tableName, "mobile_booking_yn")
	_hCV_view_seat_sector.MobileAssignYn = field.NewString(tableName, "mobile_assign_yn")
	_hCV_view_seat_sector.DayFrom = field.NewInt64(tableName, "day_from")
	_hCV_view_seat_sector.DayTo = field.NewInt64(tableName, "day_to")
	_hCV_view_seat_sector.USEAPPROVAL = field.NewInt64(tableName, "USE_APPROVAL")
	_hCV_view_seat_sector.Opentime = field.NewString(tableName, "opentime")
	_hCV_view_seat_sector.Closetime = field.NewString(tableName, "closetime")
	_hCV_view_seat_sector.OperationMin = field.NewInt64(tableName, "operation_min")

	_hCV_view_seat_sector.fillFieldMap()

	return _hCV_view_seat_sector
}

type hCV_view_seat_sector struct {
	hCV_view_seat_sectorDo

	ALL             field.Asterisk
	Sectorno        field.Int64
	Name            field.String
	EnName          field.String
	Typeno          field.Int64
	Roomno          field.Int64
	Floorno         field.Int64
	BookingYn       field.String
	AssignYn        field.String
	MobileBookingYn field.String
	MobileAssignYn  field.String
	DayFrom         field.Int64
	DayTo           field.Int64
	USEAPPROVAL     field.Int64
	Opentime        field.String
	Closetime       field.String
	OperationMin    field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_view_seat_sector) Table(newTableName string) *hCV_view_seat_sector {
	h.hCV_view_seat_sectorDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_view_seat_sector) As(alias string) *hCV_view_seat_sector {
	h.hCV_view_seat_sectorDo.DO = *(h.hCV_view_seat_sectorDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_view_seat_sector) updateTableName(table string) *hCV_view_seat_sector {
	h.ALL = field.NewAsterisk(table)
	h.Sectorno = field.NewInt64(table, "sectorno")
	h.Name = field.NewString(table, "name")
	h.EnName = field.NewString(table, "en_name")
	h.Typeno = field.NewInt64(table, "typeno")
	h.Roomno = field.NewInt64(table, "roomno")
	h.Floorno = field.NewInt64(table, "floorno")
	h.BookingYn = field.NewString(table, "booking_yn")
	h.AssignYn = field.NewString(table, "assign_yn")
	h.MobileBookingYn = field.NewString(table, "mobile_booking_yn")
	h.MobileAssignYn = field.NewString(table, "mobile_assign_yn")
	h.DayFrom = field.NewInt64(table, "day_from")
	h.DayTo = field.NewInt64(table, "day_to")
	h.USEAPPROVAL = field.NewInt64(table, "USE_APPROVAL")
	h.Opentime = field.NewString(table, "opentime")
	h.Closetime = field.NewString(table, "closetime")
	h.OperationMin = field.NewInt64(table, "operation_min")

	h.fillFieldMap()

	return h
}

func (h *hCV_view_seat_sector) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_view_seat_sector) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 16)
	h.fieldMap["sectorno"] = h.Sectorno
	h.fieldMap["name"] = h.Name
	h.fieldMap["en_name"] = h.EnName
	h.fieldMap["typeno"] = h.Typeno
	h.fieldMap["roomno"] = h.Roomno
	h.fieldMap["floorno"] = h.Floorno
	h.fieldMap["booking_yn"] = h.BookingYn
	h.fieldMap["assign_yn"] = h.AssignYn
	h.fieldMap["mobile_booking_yn"] = h.MobileBookingYn
	h.fieldMap["mobile_assign_yn"] = h.MobileAssignYn
	h.fieldMap["day_from"] = h.DayFrom
	h.fieldMap["day_to"] = h.DayTo
	h.fieldMap["USE_APPROVAL"] = h.USEAPPROVAL
	h.fieldMap["opentime"] = h.Opentime
	h.fieldMap["closetime"] = h.Closetime
	h.fieldMap["operation_min"] = h.OperationMin
}

func (h hCV_view_seat_sector) clone(db *gorm.DB) hCV_view_seat_sector {
	h.hCV_view_seat_sectorDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_view_seat_sector) replaceDB(db *gorm.DB) hCV_view_seat_sector {
	h.hCV_view_seat_sectorDo.ReplaceDB(db)
	return h
}

type hCV_view_seat_sectorDo struct{ gen.DO }

type IHCV_view_seat_sectorDo interface {
	gen.SubQuery
	Debug() IHCV_view_seat_sectorDo
	WithContext(ctx context.Context) IHCV_view_seat_sectorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_view_seat_sectorDo
	WriteDB() IHCV_view_seat_sectorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_view_seat_sectorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_view_seat_sectorDo
	Not(conds ...gen.Condition) IHCV_view_seat_sectorDo
	Or(conds ...gen.Condition) IHCV_view_seat_sectorDo
	Select(conds ...field.Expr) IHCV_view_seat_sectorDo
	Where(conds ...gen.Condition) IHCV_view_seat_sectorDo
	Order(conds ...field.Expr) IHCV_view_seat_sectorDo
	Distinct(cols ...field.Expr) IHCV_view_seat_sectorDo
	Omit(cols ...field.Expr) IHCV_view_seat_sectorDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo
	Group(cols ...field.Expr) IHCV_view_seat_sectorDo
	Having(conds ...gen.Condition) IHCV_view_seat_sectorDo
	Limit(limit int) IHCV_view_seat_sectorDo
	Offset(offset int) IHCV_view_seat_sectorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_sectorDo
	Unscoped() IHCV_view_seat_sectorDo
	Create(values ...*model.HCV_view_seat_sector) error
	CreateInBatches(values []*model.HCV_view_seat_sector, batchSize int) error
	Save(values ...*model.HCV_view_seat_sector) error
	First() (*model.HCV_view_seat_sector, error)
	Take() (*model.HCV_view_seat_sector, error)
	Last() (*model.HCV_view_seat_sector, error)
	Find() ([]*model.HCV_view_seat_sector, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_sector, err error)
	FindInBatches(result *[]*model.HCV_view_seat_sector, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_view_seat_sector) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_view_seat_sectorDo
	Assign(attrs ...field.AssignExpr) IHCV_view_seat_sectorDo
	Joins(fields ...field.RelationField) IHCV_view_seat_sectorDo
	Preload(fields ...field.RelationField) IHCV_view_seat_sectorDo
	FirstOrInit() (*model.HCV_view_seat_sector, error)
	FirstOrCreate() (*model.HCV_view_seat_sector, error)
	FindByPage(offset int, limit int) (result []*model.HCV_view_seat_sector, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_view_seat_sectorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_view_seat_sectorDo) Debug() IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_view_seat_sectorDo) WithContext(ctx context.Context) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_view_seat_sectorDo) ReadDB() IHCV_view_seat_sectorDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_view_seat_sectorDo) WriteDB() IHCV_view_seat_sectorDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_view_seat_sectorDo) Session(config *gorm.Session) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_view_seat_sectorDo) Clauses(conds ...clause.Expression) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_view_seat_sectorDo) Returning(value interface{}, columns ...string) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_view_seat_sectorDo) Not(conds ...gen.Condition) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_view_seat_sectorDo) Or(conds ...gen.Condition) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_view_seat_sectorDo) Select(conds ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_view_seat_sectorDo) Where(conds ...gen.Condition) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_view_seat_sectorDo) Order(conds ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_view_seat_sectorDo) Distinct(cols ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_view_seat_sectorDo) Omit(cols ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_view_seat_sectorDo) Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_view_seat_sectorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_view_seat_sectorDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_view_seat_sectorDo) Group(cols ...field.Expr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_view_seat_sectorDo) Having(conds ...gen.Condition) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_view_seat_sectorDo) Limit(limit int) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_view_seat_sectorDo) Offset(offset int) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_view_seat_sectorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_view_seat_sectorDo) Unscoped() IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_view_seat_sectorDo) Create(values ...*model.HCV_view_seat_sector) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_view_seat_sectorDo) CreateInBatches(values []*model.HCV_view_seat_sector, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_view_seat_sectorDo) Save(values ...*model.HCV_view_seat_sector) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_view_seat_sectorDo) First() (*model.HCV_view_seat_sector, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector), nil
	}
}

func (h hCV_view_seat_sectorDo) Take() (*model.HCV_view_seat_sector, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector), nil
	}
}

func (h hCV_view_seat_sectorDo) Last() (*model.HCV_view_seat_sector, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector), nil
	}
}

func (h hCV_view_seat_sectorDo) Find() ([]*model.HCV_view_seat_sector, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_view_seat_sector), err
}

func (h hCV_view_seat_sectorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_sector, err error) {
	buf := make([]*model.HCV_view_seat_sector, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_view_seat_sectorDo) FindInBatches(result *[]*model.HCV_view_seat_sector, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_view_seat_sectorDo) Attrs(attrs ...field.AssignExpr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_view_seat_sectorDo) Assign(attrs ...field.AssignExpr) IHCV_view_seat_sectorDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_view_seat_sectorDo) Joins(fields ...field.RelationField) IHCV_view_seat_sectorDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_view_seat_sectorDo) Preload(fields ...field.RelationField) IHCV_view_seat_sectorDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_view_seat_sectorDo) FirstOrInit() (*model.HCV_view_seat_sector, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector), nil
	}
}

func (h hCV_view_seat_sectorDo) FirstOrCreate() (*model.HCV_view_seat_sector, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector), nil
	}
}

func (h hCV_view_seat_sectorDo) FindByPage(offset int, limit int) (result []*model.HCV_view_seat_sector, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_view_seat_sectorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_view_seat_sectorDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_view_seat_sectorDo) Delete(models ...*model.HCV_view_seat_sector) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_view_seat_sectorDo) withDO(do gen.Dao) *hCV_view_seat_sectorDo {
	h.DO = *do.(*gen.DO)
	return h
}
