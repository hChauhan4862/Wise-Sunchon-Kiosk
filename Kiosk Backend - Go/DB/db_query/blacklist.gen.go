// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBLACKLIST(db *gorm.DB, opts ...gen.DOOption) bLACKLIST {
	_bLACKLIST := bLACKLIST{}

	_bLACKLIST.bLACKLISTDo.UseDB(db, opts...)
	_bLACKLIST.bLACKLISTDo.UseModel(&model.BLACKLIST{})

	tableName := _bLACKLIST.bLACKLISTDo.TableName()
	_bLACKLIST.ALL = field.NewAsterisk(tableName)
	_bLACKLIST.BLSEQNO = field.NewInt64(tableName, "BLSEQNO")
	_bLACKLIST.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")
	_bLACKLIST.USERNAME = field.NewString(tableName, "USER_NAME")
	_bLACKLIST.REASON = field.NewString(tableName, "REASON")
	_bLACKLIST.ADMINID = field.NewString(tableName, "ADMINID")
	_bLACKLIST.ISSUEFROM = field.NewInt64(tableName, "ISSUEFROM")
	_bLACKLIST.ISSUEDETAIL = field.NewString(tableName, "ISSUEDETAIL")
	_bLACKLIST.REGTIME = field.NewTime(tableName, "REGTIME")
	_bLACKLIST.STATUS = field.NewInt64(tableName, "STATUS")
	_bLACKLIST.BOOKINGSTART = field.NewTime(tableName, "BOOKINGSTART")
	_bLACKLIST.BOOKINGEXPIRE = field.NewTime(tableName, "BOOKINGEXPIRE")
	_bLACKLIST.ASSIGNSTART = field.NewTime(tableName, "ASSIGNSTART")
	_bLACKLIST.ASSIGNEXPIRE = field.NewTime(tableName, "ASSIGNEXPIRE")

	_bLACKLIST.fillFieldMap()

	return _bLACKLIST
}

type bLACKLIST struct {
	bLACKLISTDo

	ALL           field.Asterisk
	BLSEQNO       field.Int64
	SCHOOLNO      field.String
	USERNAME      field.String
	REASON        field.String
	ADMINID       field.String
	ISSUEFROM     field.Int64
	ISSUEDETAIL   field.String
	REGTIME       field.Time
	STATUS        field.Int64
	BOOKINGSTART  field.Time
	BOOKINGEXPIRE field.Time
	ASSIGNSTART   field.Time
	ASSIGNEXPIRE  field.Time

	fieldMap map[string]field.Expr
}

func (b bLACKLIST) Table(newTableName string) *bLACKLIST {
	b.bLACKLISTDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bLACKLIST) As(alias string) *bLACKLIST {
	b.bLACKLISTDo.DO = *(b.bLACKLISTDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bLACKLIST) updateTableName(table string) *bLACKLIST {
	b.ALL = field.NewAsterisk(table)
	b.BLSEQNO = field.NewInt64(table, "BLSEQNO")
	b.SCHOOLNO = field.NewString(table, "SCHOOLNO")
	b.USERNAME = field.NewString(table, "USER_NAME")
	b.REASON = field.NewString(table, "REASON")
	b.ADMINID = field.NewString(table, "ADMINID")
	b.ISSUEFROM = field.NewInt64(table, "ISSUEFROM")
	b.ISSUEDETAIL = field.NewString(table, "ISSUEDETAIL")
	b.REGTIME = field.NewTime(table, "REGTIME")
	b.STATUS = field.NewInt64(table, "STATUS")
	b.BOOKINGSTART = field.NewTime(table, "BOOKINGSTART")
	b.BOOKINGEXPIRE = field.NewTime(table, "BOOKINGEXPIRE")
	b.ASSIGNSTART = field.NewTime(table, "ASSIGNSTART")
	b.ASSIGNEXPIRE = field.NewTime(table, "ASSIGNEXPIRE")

	b.fillFieldMap()

	return b
}

func (b *bLACKLIST) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bLACKLIST) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 13)
	b.fieldMap["BLSEQNO"] = b.BLSEQNO
	b.fieldMap["SCHOOLNO"] = b.SCHOOLNO
	b.fieldMap["USER_NAME"] = b.USERNAME
	b.fieldMap["REASON"] = b.REASON
	b.fieldMap["ADMINID"] = b.ADMINID
	b.fieldMap["ISSUEFROM"] = b.ISSUEFROM
	b.fieldMap["ISSUEDETAIL"] = b.ISSUEDETAIL
	b.fieldMap["REGTIME"] = b.REGTIME
	b.fieldMap["STATUS"] = b.STATUS
	b.fieldMap["BOOKINGSTART"] = b.BOOKINGSTART
	b.fieldMap["BOOKINGEXPIRE"] = b.BOOKINGEXPIRE
	b.fieldMap["ASSIGNSTART"] = b.ASSIGNSTART
	b.fieldMap["ASSIGNEXPIRE"] = b.ASSIGNEXPIRE
}

func (b bLACKLIST) clone(db *gorm.DB) bLACKLIST {
	b.bLACKLISTDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bLACKLIST) replaceDB(db *gorm.DB) bLACKLIST {
	b.bLACKLISTDo.ReplaceDB(db)
	return b
}

type bLACKLISTDo struct{ gen.DO }

type IBLACKLISTDo interface {
	gen.SubQuery
	Debug() IBLACKLISTDo
	WithContext(ctx context.Context) IBLACKLISTDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBLACKLISTDo
	WriteDB() IBLACKLISTDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBLACKLISTDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBLACKLISTDo
	Not(conds ...gen.Condition) IBLACKLISTDo
	Or(conds ...gen.Condition) IBLACKLISTDo
	Select(conds ...field.Expr) IBLACKLISTDo
	Where(conds ...gen.Condition) IBLACKLISTDo
	Order(conds ...field.Expr) IBLACKLISTDo
	Distinct(cols ...field.Expr) IBLACKLISTDo
	Omit(cols ...field.Expr) IBLACKLISTDo
	Join(table schema.Tabler, on ...field.Expr) IBLACKLISTDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBLACKLISTDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBLACKLISTDo
	Group(cols ...field.Expr) IBLACKLISTDo
	Having(conds ...gen.Condition) IBLACKLISTDo
	Limit(limit int) IBLACKLISTDo
	Offset(offset int) IBLACKLISTDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBLACKLISTDo
	Unscoped() IBLACKLISTDo
	Create(values ...*model.BLACKLIST) error
	CreateInBatches(values []*model.BLACKLIST, batchSize int) error
	Save(values ...*model.BLACKLIST) error
	First() (*model.BLACKLIST, error)
	Take() (*model.BLACKLIST, error)
	Last() (*model.BLACKLIST, error)
	Find() ([]*model.BLACKLIST, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BLACKLIST, err error)
	FindInBatches(result *[]*model.BLACKLIST, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BLACKLIST) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBLACKLISTDo
	Assign(attrs ...field.AssignExpr) IBLACKLISTDo
	Joins(fields ...field.RelationField) IBLACKLISTDo
	Preload(fields ...field.RelationField) IBLACKLISTDo
	FirstOrInit() (*model.BLACKLIST, error)
	FirstOrCreate() (*model.BLACKLIST, error)
	FindByPage(offset int, limit int) (result []*model.BLACKLIST, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBLACKLISTDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bLACKLISTDo) Debug() IBLACKLISTDo {
	return b.withDO(b.DO.Debug())
}

func (b bLACKLISTDo) WithContext(ctx context.Context) IBLACKLISTDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bLACKLISTDo) ReadDB() IBLACKLISTDo {
	return b.Clauses(dbresolver.Read)
}

func (b bLACKLISTDo) WriteDB() IBLACKLISTDo {
	return b.Clauses(dbresolver.Write)
}

func (b bLACKLISTDo) Session(config *gorm.Session) IBLACKLISTDo {
	return b.withDO(b.DO.Session(config))
}

func (b bLACKLISTDo) Clauses(conds ...clause.Expression) IBLACKLISTDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bLACKLISTDo) Returning(value interface{}, columns ...string) IBLACKLISTDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bLACKLISTDo) Not(conds ...gen.Condition) IBLACKLISTDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bLACKLISTDo) Or(conds ...gen.Condition) IBLACKLISTDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bLACKLISTDo) Select(conds ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bLACKLISTDo) Where(conds ...gen.Condition) IBLACKLISTDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bLACKLISTDo) Order(conds ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bLACKLISTDo) Distinct(cols ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bLACKLISTDo) Omit(cols ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bLACKLISTDo) Join(table schema.Tabler, on ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bLACKLISTDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bLACKLISTDo) RightJoin(table schema.Tabler, on ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bLACKLISTDo) Group(cols ...field.Expr) IBLACKLISTDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bLACKLISTDo) Having(conds ...gen.Condition) IBLACKLISTDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bLACKLISTDo) Limit(limit int) IBLACKLISTDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bLACKLISTDo) Offset(offset int) IBLACKLISTDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bLACKLISTDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBLACKLISTDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bLACKLISTDo) Unscoped() IBLACKLISTDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bLACKLISTDo) Create(values ...*model.BLACKLIST) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bLACKLISTDo) CreateInBatches(values []*model.BLACKLIST, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bLACKLISTDo) Save(values ...*model.BLACKLIST) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bLACKLISTDo) First() (*model.BLACKLIST, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST), nil
	}
}

func (b bLACKLISTDo) Take() (*model.BLACKLIST, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST), nil
	}
}

func (b bLACKLISTDo) Last() (*model.BLACKLIST, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST), nil
	}
}

func (b bLACKLISTDo) Find() ([]*model.BLACKLIST, error) {
	result, err := b.DO.Find()
	return result.([]*model.BLACKLIST), err
}

func (b bLACKLISTDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BLACKLIST, err error) {
	buf := make([]*model.BLACKLIST, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bLACKLISTDo) FindInBatches(result *[]*model.BLACKLIST, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bLACKLISTDo) Attrs(attrs ...field.AssignExpr) IBLACKLISTDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bLACKLISTDo) Assign(attrs ...field.AssignExpr) IBLACKLISTDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bLACKLISTDo) Joins(fields ...field.RelationField) IBLACKLISTDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bLACKLISTDo) Preload(fields ...field.RelationField) IBLACKLISTDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bLACKLISTDo) FirstOrInit() (*model.BLACKLIST, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST), nil
	}
}

func (b bLACKLISTDo) FirstOrCreate() (*model.BLACKLIST, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST), nil
	}
}

func (b bLACKLISTDo) FindByPage(offset int, limit int) (result []*model.BLACKLIST, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bLACKLISTDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bLACKLISTDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bLACKLISTDo) Delete(models ...*model.BLACKLIST) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bLACKLISTDo) withDO(do gen.Dao) *bLACKLISTDo {
	b.DO = *do.(*gen.DO)
	return b
}
