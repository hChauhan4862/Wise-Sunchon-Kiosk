// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBILLKEYMASTER(db *gorm.DB, opts ...gen.DOOption) bILLKEYMASTER {
	_bILLKEYMASTER := bILLKEYMASTER{}

	_bILLKEYMASTER.bILLKEYMASTERDo.UseDB(db, opts...)
	_bILLKEYMASTER.bILLKEYMASTERDo.UseModel(&model.BILLKEYMASTER{})

	tableName := _bILLKEYMASTER.bILLKEYMASTERDo.TableName()
	_bILLKEYMASTER.ALL = field.NewAsterisk(tableName)
	_bILLKEYMASTER.USERID = field.NewString(tableName, "USER_ID")
	_bILLKEYMASTER.BILLKEY = field.NewString(tableName, "BILLKEY")
	_bILLKEYMASTER.REGDT = field.NewString(tableName, "REG_DT")

	_bILLKEYMASTER.fillFieldMap()

	return _bILLKEYMASTER
}

type bILLKEYMASTER struct {
	bILLKEYMASTERDo

	ALL     field.Asterisk
	USERID  field.String
	BILLKEY field.String
	REGDT   field.String

	fieldMap map[string]field.Expr
}

func (b bILLKEYMASTER) Table(newTableName string) *bILLKEYMASTER {
	b.bILLKEYMASTERDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bILLKEYMASTER) As(alias string) *bILLKEYMASTER {
	b.bILLKEYMASTERDo.DO = *(b.bILLKEYMASTERDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bILLKEYMASTER) updateTableName(table string) *bILLKEYMASTER {
	b.ALL = field.NewAsterisk(table)
	b.USERID = field.NewString(table, "USER_ID")
	b.BILLKEY = field.NewString(table, "BILLKEY")
	b.REGDT = field.NewString(table, "REG_DT")

	b.fillFieldMap()

	return b
}

func (b *bILLKEYMASTER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bILLKEYMASTER) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["USER_ID"] = b.USERID
	b.fieldMap["BILLKEY"] = b.BILLKEY
	b.fieldMap["REG_DT"] = b.REGDT
}

func (b bILLKEYMASTER) clone(db *gorm.DB) bILLKEYMASTER {
	b.bILLKEYMASTERDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bILLKEYMASTER) replaceDB(db *gorm.DB) bILLKEYMASTER {
	b.bILLKEYMASTERDo.ReplaceDB(db)
	return b
}

type bILLKEYMASTERDo struct{ gen.DO }

type IBILLKEYMASTERDo interface {
	gen.SubQuery
	Debug() IBILLKEYMASTERDo
	WithContext(ctx context.Context) IBILLKEYMASTERDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBILLKEYMASTERDo
	WriteDB() IBILLKEYMASTERDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBILLKEYMASTERDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBILLKEYMASTERDo
	Not(conds ...gen.Condition) IBILLKEYMASTERDo
	Or(conds ...gen.Condition) IBILLKEYMASTERDo
	Select(conds ...field.Expr) IBILLKEYMASTERDo
	Where(conds ...gen.Condition) IBILLKEYMASTERDo
	Order(conds ...field.Expr) IBILLKEYMASTERDo
	Distinct(cols ...field.Expr) IBILLKEYMASTERDo
	Omit(cols ...field.Expr) IBILLKEYMASTERDo
	Join(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo
	Group(cols ...field.Expr) IBILLKEYMASTERDo
	Having(conds ...gen.Condition) IBILLKEYMASTERDo
	Limit(limit int) IBILLKEYMASTERDo
	Offset(offset int) IBILLKEYMASTERDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBILLKEYMASTERDo
	Unscoped() IBILLKEYMASTERDo
	Create(values ...*model.BILLKEYMASTER) error
	CreateInBatches(values []*model.BILLKEYMASTER, batchSize int) error
	Save(values ...*model.BILLKEYMASTER) error
	First() (*model.BILLKEYMASTER, error)
	Take() (*model.BILLKEYMASTER, error)
	Last() (*model.BILLKEYMASTER, error)
	Find() ([]*model.BILLKEYMASTER, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BILLKEYMASTER, err error)
	FindInBatches(result *[]*model.BILLKEYMASTER, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BILLKEYMASTER) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBILLKEYMASTERDo
	Assign(attrs ...field.AssignExpr) IBILLKEYMASTERDo
	Joins(fields ...field.RelationField) IBILLKEYMASTERDo
	Preload(fields ...field.RelationField) IBILLKEYMASTERDo
	FirstOrInit() (*model.BILLKEYMASTER, error)
	FirstOrCreate() (*model.BILLKEYMASTER, error)
	FindByPage(offset int, limit int) (result []*model.BILLKEYMASTER, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBILLKEYMASTERDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bILLKEYMASTERDo) Debug() IBILLKEYMASTERDo {
	return b.withDO(b.DO.Debug())
}

func (b bILLKEYMASTERDo) WithContext(ctx context.Context) IBILLKEYMASTERDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bILLKEYMASTERDo) ReadDB() IBILLKEYMASTERDo {
	return b.Clauses(dbresolver.Read)
}

func (b bILLKEYMASTERDo) WriteDB() IBILLKEYMASTERDo {
	return b.Clauses(dbresolver.Write)
}

func (b bILLKEYMASTERDo) Session(config *gorm.Session) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Session(config))
}

func (b bILLKEYMASTERDo) Clauses(conds ...clause.Expression) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bILLKEYMASTERDo) Returning(value interface{}, columns ...string) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bILLKEYMASTERDo) Not(conds ...gen.Condition) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bILLKEYMASTERDo) Or(conds ...gen.Condition) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bILLKEYMASTERDo) Select(conds ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bILLKEYMASTERDo) Where(conds ...gen.Condition) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bILLKEYMASTERDo) Order(conds ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bILLKEYMASTERDo) Distinct(cols ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bILLKEYMASTERDo) Omit(cols ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bILLKEYMASTERDo) Join(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bILLKEYMASTERDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bILLKEYMASTERDo) RightJoin(table schema.Tabler, on ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bILLKEYMASTERDo) Group(cols ...field.Expr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bILLKEYMASTERDo) Having(conds ...gen.Condition) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bILLKEYMASTERDo) Limit(limit int) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bILLKEYMASTERDo) Offset(offset int) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bILLKEYMASTERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bILLKEYMASTERDo) Unscoped() IBILLKEYMASTERDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bILLKEYMASTERDo) Create(values ...*model.BILLKEYMASTER) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bILLKEYMASTERDo) CreateInBatches(values []*model.BILLKEYMASTER, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bILLKEYMASTERDo) Save(values ...*model.BILLKEYMASTER) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bILLKEYMASTERDo) First() (*model.BILLKEYMASTER, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYMASTER), nil
	}
}

func (b bILLKEYMASTERDo) Take() (*model.BILLKEYMASTER, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYMASTER), nil
	}
}

func (b bILLKEYMASTERDo) Last() (*model.BILLKEYMASTER, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYMASTER), nil
	}
}

func (b bILLKEYMASTERDo) Find() ([]*model.BILLKEYMASTER, error) {
	result, err := b.DO.Find()
	return result.([]*model.BILLKEYMASTER), err
}

func (b bILLKEYMASTERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BILLKEYMASTER, err error) {
	buf := make([]*model.BILLKEYMASTER, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bILLKEYMASTERDo) FindInBatches(result *[]*model.BILLKEYMASTER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bILLKEYMASTERDo) Attrs(attrs ...field.AssignExpr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bILLKEYMASTERDo) Assign(attrs ...field.AssignExpr) IBILLKEYMASTERDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bILLKEYMASTERDo) Joins(fields ...field.RelationField) IBILLKEYMASTERDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bILLKEYMASTERDo) Preload(fields ...field.RelationField) IBILLKEYMASTERDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bILLKEYMASTERDo) FirstOrInit() (*model.BILLKEYMASTER, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYMASTER), nil
	}
}

func (b bILLKEYMASTERDo) FirstOrCreate() (*model.BILLKEYMASTER, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BILLKEYMASTER), nil
	}
}

func (b bILLKEYMASTERDo) FindByPage(offset int, limit int) (result []*model.BILLKEYMASTER, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bILLKEYMASTERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bILLKEYMASTERDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bILLKEYMASTERDo) Delete(models ...*model.BILLKEYMASTER) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bILLKEYMASTERDo) withDO(do gen.Dao) *bILLKEYMASTERDo {
	b.DO = *do.(*gen.DO)
	return b
}
