// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBLACKLIST2LOG(db *gorm.DB, opts ...gen.DOOption) bLACKLIST2LOG {
	_bLACKLIST2LOG := bLACKLIST2LOG{}

	_bLACKLIST2LOG.bLACKLIST2LOGDo.UseDB(db, opts...)
	_bLACKLIST2LOG.bLACKLIST2LOGDo.UseModel(&model.BLACKLIST2LOG{})

	tableName := _bLACKLIST2LOG.bLACKLIST2LOGDo.TableName()
	_bLACKLIST2LOG.ALL = field.NewAsterisk(tableName)
	_bLACKLIST2LOG.ID = field.NewInt64(tableName, "ID")
	_bLACKLIST2LOG.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_bLACKLIST2LOG.STATUS = field.NewInt64(tableName, "STATUS")
	_bLACKLIST2LOG.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")
	_bLACKLIST2LOG.RETURNTIME = field.NewTime(tableName, "RETURNTIME")
	_bLACKLIST2LOG.MISSCNT = field.NewInt64(tableName, "MISS_CNT")

	_bLACKLIST2LOG.fillFieldMap()

	return _bLACKLIST2LOG
}

type bLACKLIST2LOG struct {
	bLACKLIST2LOGDo

	ALL        field.Asterisk
	ID         field.Int64
	BSEQNO     field.Int64
	STATUS     field.Int64
	SCHOOLNO   field.String
	RETURNTIME field.Time
	MISSCNT    field.Int64

	fieldMap map[string]field.Expr
}

func (b bLACKLIST2LOG) Table(newTableName string) *bLACKLIST2LOG {
	b.bLACKLIST2LOGDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bLACKLIST2LOG) As(alias string) *bLACKLIST2LOG {
	b.bLACKLIST2LOGDo.DO = *(b.bLACKLIST2LOGDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bLACKLIST2LOG) updateTableName(table string) *bLACKLIST2LOG {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "ID")
	b.BSEQNO = field.NewInt64(table, "BSEQNO")
	b.STATUS = field.NewInt64(table, "STATUS")
	b.SCHOOLNO = field.NewString(table, "SCHOOLNO")
	b.RETURNTIME = field.NewTime(table, "RETURNTIME")
	b.MISSCNT = field.NewInt64(table, "MISS_CNT")

	b.fillFieldMap()

	return b
}

func (b *bLACKLIST2LOG) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bLACKLIST2LOG) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 6)
	b.fieldMap["ID"] = b.ID
	b.fieldMap["BSEQNO"] = b.BSEQNO
	b.fieldMap["STATUS"] = b.STATUS
	b.fieldMap["SCHOOLNO"] = b.SCHOOLNO
	b.fieldMap["RETURNTIME"] = b.RETURNTIME
	b.fieldMap["MISS_CNT"] = b.MISSCNT
}

func (b bLACKLIST2LOG) clone(db *gorm.DB) bLACKLIST2LOG {
	b.bLACKLIST2LOGDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bLACKLIST2LOG) replaceDB(db *gorm.DB) bLACKLIST2LOG {
	b.bLACKLIST2LOGDo.ReplaceDB(db)
	return b
}

type bLACKLIST2LOGDo struct{ gen.DO }

type IBLACKLIST2LOGDo interface {
	gen.SubQuery
	Debug() IBLACKLIST2LOGDo
	WithContext(ctx context.Context) IBLACKLIST2LOGDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBLACKLIST2LOGDo
	WriteDB() IBLACKLIST2LOGDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBLACKLIST2LOGDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBLACKLIST2LOGDo
	Not(conds ...gen.Condition) IBLACKLIST2LOGDo
	Or(conds ...gen.Condition) IBLACKLIST2LOGDo
	Select(conds ...field.Expr) IBLACKLIST2LOGDo
	Where(conds ...gen.Condition) IBLACKLIST2LOGDo
	Order(conds ...field.Expr) IBLACKLIST2LOGDo
	Distinct(cols ...field.Expr) IBLACKLIST2LOGDo
	Omit(cols ...field.Expr) IBLACKLIST2LOGDo
	Join(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo
	Group(cols ...field.Expr) IBLACKLIST2LOGDo
	Having(conds ...gen.Condition) IBLACKLIST2LOGDo
	Limit(limit int) IBLACKLIST2LOGDo
	Offset(offset int) IBLACKLIST2LOGDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBLACKLIST2LOGDo
	Unscoped() IBLACKLIST2LOGDo
	Create(values ...*model.BLACKLIST2LOG) error
	CreateInBatches(values []*model.BLACKLIST2LOG, batchSize int) error
	Save(values ...*model.BLACKLIST2LOG) error
	First() (*model.BLACKLIST2LOG, error)
	Take() (*model.BLACKLIST2LOG, error)
	Last() (*model.BLACKLIST2LOG, error)
	Find() ([]*model.BLACKLIST2LOG, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BLACKLIST2LOG, err error)
	FindInBatches(result *[]*model.BLACKLIST2LOG, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BLACKLIST2LOG) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBLACKLIST2LOGDo
	Assign(attrs ...field.AssignExpr) IBLACKLIST2LOGDo
	Joins(fields ...field.RelationField) IBLACKLIST2LOGDo
	Preload(fields ...field.RelationField) IBLACKLIST2LOGDo
	FirstOrInit() (*model.BLACKLIST2LOG, error)
	FirstOrCreate() (*model.BLACKLIST2LOG, error)
	FindByPage(offset int, limit int) (result []*model.BLACKLIST2LOG, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBLACKLIST2LOGDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bLACKLIST2LOGDo) Debug() IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Debug())
}

func (b bLACKLIST2LOGDo) WithContext(ctx context.Context) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bLACKLIST2LOGDo) ReadDB() IBLACKLIST2LOGDo {
	return b.Clauses(dbresolver.Read)
}

func (b bLACKLIST2LOGDo) WriteDB() IBLACKLIST2LOGDo {
	return b.Clauses(dbresolver.Write)
}

func (b bLACKLIST2LOGDo) Session(config *gorm.Session) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Session(config))
}

func (b bLACKLIST2LOGDo) Clauses(conds ...clause.Expression) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bLACKLIST2LOGDo) Returning(value interface{}, columns ...string) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bLACKLIST2LOGDo) Not(conds ...gen.Condition) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bLACKLIST2LOGDo) Or(conds ...gen.Condition) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bLACKLIST2LOGDo) Select(conds ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bLACKLIST2LOGDo) Where(conds ...gen.Condition) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bLACKLIST2LOGDo) Order(conds ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bLACKLIST2LOGDo) Distinct(cols ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bLACKLIST2LOGDo) Omit(cols ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bLACKLIST2LOGDo) Join(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bLACKLIST2LOGDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bLACKLIST2LOGDo) RightJoin(table schema.Tabler, on ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bLACKLIST2LOGDo) Group(cols ...field.Expr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bLACKLIST2LOGDo) Having(conds ...gen.Condition) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bLACKLIST2LOGDo) Limit(limit int) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bLACKLIST2LOGDo) Offset(offset int) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bLACKLIST2LOGDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bLACKLIST2LOGDo) Unscoped() IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bLACKLIST2LOGDo) Create(values ...*model.BLACKLIST2LOG) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bLACKLIST2LOGDo) CreateInBatches(values []*model.BLACKLIST2LOG, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bLACKLIST2LOGDo) Save(values ...*model.BLACKLIST2LOG) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bLACKLIST2LOGDo) First() (*model.BLACKLIST2LOG, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST2LOG), nil
	}
}

func (b bLACKLIST2LOGDo) Take() (*model.BLACKLIST2LOG, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST2LOG), nil
	}
}

func (b bLACKLIST2LOGDo) Last() (*model.BLACKLIST2LOG, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST2LOG), nil
	}
}

func (b bLACKLIST2LOGDo) Find() ([]*model.BLACKLIST2LOG, error) {
	result, err := b.DO.Find()
	return result.([]*model.BLACKLIST2LOG), err
}

func (b bLACKLIST2LOGDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BLACKLIST2LOG, err error) {
	buf := make([]*model.BLACKLIST2LOG, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bLACKLIST2LOGDo) FindInBatches(result *[]*model.BLACKLIST2LOG, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bLACKLIST2LOGDo) Attrs(attrs ...field.AssignExpr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bLACKLIST2LOGDo) Assign(attrs ...field.AssignExpr) IBLACKLIST2LOGDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bLACKLIST2LOGDo) Joins(fields ...field.RelationField) IBLACKLIST2LOGDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bLACKLIST2LOGDo) Preload(fields ...field.RelationField) IBLACKLIST2LOGDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bLACKLIST2LOGDo) FirstOrInit() (*model.BLACKLIST2LOG, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST2LOG), nil
	}
}

func (b bLACKLIST2LOGDo) FirstOrCreate() (*model.BLACKLIST2LOG, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BLACKLIST2LOG), nil
	}
}

func (b bLACKLIST2LOGDo) FindByPage(offset int, limit int) (result []*model.BLACKLIST2LOG, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bLACKLIST2LOGDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bLACKLIST2LOGDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bLACKLIST2LOGDo) Delete(models ...*model.BLACKLIST2LOG) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bLACKLIST2LOGDo) withDO(do gen.Dao) *bLACKLIST2LOGDo {
	b.DO = *do.(*gen.DO)
	return b
}
