// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newLimitUserMaster(db *gorm.DB, opts ...gen.DOOption) limitUserMaster {
	_limitUserMaster := limitUserMaster{}

	_limitUserMaster.limitUserMasterDo.UseDB(db, opts...)
	_limitUserMaster.limitUserMasterDo.UseModel(&model.LimitUserMaster{})

	tableName := _limitUserMaster.limitUserMasterDo.TableName()
	_limitUserMaster.ALL = field.NewAsterisk(tableName)
	_limitUserMaster.LimitID = field.NewInt64(tableName, "limit_id")
	_limitUserMaster.UserID = field.NewString(tableName, "user_id")
	_limitUserMaster.UserName = field.NewString(tableName, "user_name")
	_limitUserMaster.LimitCode = field.NewString(tableName, "limit_code")
	_limitUserMaster.LimitName = field.NewString(tableName, "limit_name")
	_limitUserMaster.TotalCnt = field.NewInt64(tableName, "total_cnt")
	_limitUserMaster.StartDate = field.NewString(tableName, "start_date")
	_limitUserMaster.EndDate = field.NewString(tableName, "end_date")
	_limitUserMaster.LimitYn = field.NewString(tableName, "limit_yn")

	_limitUserMaster.fillFieldMap()

	return _limitUserMaster
}

type limitUserMaster struct {
	limitUserMasterDo

	ALL       field.Asterisk
	LimitID   field.Int64
	UserID    field.String
	UserName  field.String
	LimitCode field.String
	LimitName field.String
	TotalCnt  field.Int64
	StartDate field.String
	EndDate   field.String
	LimitYn   field.String

	fieldMap map[string]field.Expr
}

func (l limitUserMaster) Table(newTableName string) *limitUserMaster {
	l.limitUserMasterDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l limitUserMaster) As(alias string) *limitUserMaster {
	l.limitUserMasterDo.DO = *(l.limitUserMasterDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *limitUserMaster) updateTableName(table string) *limitUserMaster {
	l.ALL = field.NewAsterisk(table)
	l.LimitID = field.NewInt64(table, "limit_id")
	l.UserID = field.NewString(table, "user_id")
	l.UserName = field.NewString(table, "user_name")
	l.LimitCode = field.NewString(table, "limit_code")
	l.LimitName = field.NewString(table, "limit_name")
	l.TotalCnt = field.NewInt64(table, "total_cnt")
	l.StartDate = field.NewString(table, "start_date")
	l.EndDate = field.NewString(table, "end_date")
	l.LimitYn = field.NewString(table, "limit_yn")

	l.fillFieldMap()

	return l
}

func (l *limitUserMaster) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *limitUserMaster) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 9)
	l.fieldMap["limit_id"] = l.LimitID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["user_name"] = l.UserName
	l.fieldMap["limit_code"] = l.LimitCode
	l.fieldMap["limit_name"] = l.LimitName
	l.fieldMap["total_cnt"] = l.TotalCnt
	l.fieldMap["start_date"] = l.StartDate
	l.fieldMap["end_date"] = l.EndDate
	l.fieldMap["limit_yn"] = l.LimitYn
}

func (l limitUserMaster) clone(db *gorm.DB) limitUserMaster {
	l.limitUserMasterDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l limitUserMaster) replaceDB(db *gorm.DB) limitUserMaster {
	l.limitUserMasterDo.ReplaceDB(db)
	return l
}

type limitUserMasterDo struct{ gen.DO }

type ILimitUserMasterDo interface {
	gen.SubQuery
	Debug() ILimitUserMasterDo
	WithContext(ctx context.Context) ILimitUserMasterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILimitUserMasterDo
	WriteDB() ILimitUserMasterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILimitUserMasterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILimitUserMasterDo
	Not(conds ...gen.Condition) ILimitUserMasterDo
	Or(conds ...gen.Condition) ILimitUserMasterDo
	Select(conds ...field.Expr) ILimitUserMasterDo
	Where(conds ...gen.Condition) ILimitUserMasterDo
	Order(conds ...field.Expr) ILimitUserMasterDo
	Distinct(cols ...field.Expr) ILimitUserMasterDo
	Omit(cols ...field.Expr) ILimitUserMasterDo
	Join(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo
	Group(cols ...field.Expr) ILimitUserMasterDo
	Having(conds ...gen.Condition) ILimitUserMasterDo
	Limit(limit int) ILimitUserMasterDo
	Offset(offset int) ILimitUserMasterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILimitUserMasterDo
	Unscoped() ILimitUserMasterDo
	Create(values ...*model.LimitUserMaster) error
	CreateInBatches(values []*model.LimitUserMaster, batchSize int) error
	Save(values ...*model.LimitUserMaster) error
	First() (*model.LimitUserMaster, error)
	Take() (*model.LimitUserMaster, error)
	Last() (*model.LimitUserMaster, error)
	Find() ([]*model.LimitUserMaster, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LimitUserMaster, err error)
	FindInBatches(result *[]*model.LimitUserMaster, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LimitUserMaster) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILimitUserMasterDo
	Assign(attrs ...field.AssignExpr) ILimitUserMasterDo
	Joins(fields ...field.RelationField) ILimitUserMasterDo
	Preload(fields ...field.RelationField) ILimitUserMasterDo
	FirstOrInit() (*model.LimitUserMaster, error)
	FirstOrCreate() (*model.LimitUserMaster, error)
	FindByPage(offset int, limit int) (result []*model.LimitUserMaster, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILimitUserMasterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l limitUserMasterDo) Debug() ILimitUserMasterDo {
	return l.withDO(l.DO.Debug())
}

func (l limitUserMasterDo) WithContext(ctx context.Context) ILimitUserMasterDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l limitUserMasterDo) ReadDB() ILimitUserMasterDo {
	return l.Clauses(dbresolver.Read)
}

func (l limitUserMasterDo) WriteDB() ILimitUserMasterDo {
	return l.Clauses(dbresolver.Write)
}

func (l limitUserMasterDo) Session(config *gorm.Session) ILimitUserMasterDo {
	return l.withDO(l.DO.Session(config))
}

func (l limitUserMasterDo) Clauses(conds ...clause.Expression) ILimitUserMasterDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l limitUserMasterDo) Returning(value interface{}, columns ...string) ILimitUserMasterDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l limitUserMasterDo) Not(conds ...gen.Condition) ILimitUserMasterDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l limitUserMasterDo) Or(conds ...gen.Condition) ILimitUserMasterDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l limitUserMasterDo) Select(conds ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l limitUserMasterDo) Where(conds ...gen.Condition) ILimitUserMasterDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l limitUserMasterDo) Order(conds ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l limitUserMasterDo) Distinct(cols ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l limitUserMasterDo) Omit(cols ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l limitUserMasterDo) Join(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l limitUserMasterDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l limitUserMasterDo) RightJoin(table schema.Tabler, on ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l limitUserMasterDo) Group(cols ...field.Expr) ILimitUserMasterDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l limitUserMasterDo) Having(conds ...gen.Condition) ILimitUserMasterDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l limitUserMasterDo) Limit(limit int) ILimitUserMasterDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l limitUserMasterDo) Offset(offset int) ILimitUserMasterDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l limitUserMasterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILimitUserMasterDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l limitUserMasterDo) Unscoped() ILimitUserMasterDo {
	return l.withDO(l.DO.Unscoped())
}

func (l limitUserMasterDo) Create(values ...*model.LimitUserMaster) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l limitUserMasterDo) CreateInBatches(values []*model.LimitUserMaster, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l limitUserMasterDo) Save(values ...*model.LimitUserMaster) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l limitUserMasterDo) First() (*model.LimitUserMaster, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LimitUserMaster), nil
	}
}

func (l limitUserMasterDo) Take() (*model.LimitUserMaster, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LimitUserMaster), nil
	}
}

func (l limitUserMasterDo) Last() (*model.LimitUserMaster, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LimitUserMaster), nil
	}
}

func (l limitUserMasterDo) Find() ([]*model.LimitUserMaster, error) {
	result, err := l.DO.Find()
	return result.([]*model.LimitUserMaster), err
}

func (l limitUserMasterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LimitUserMaster, err error) {
	buf := make([]*model.LimitUserMaster, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l limitUserMasterDo) FindInBatches(result *[]*model.LimitUserMaster, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l limitUserMasterDo) Attrs(attrs ...field.AssignExpr) ILimitUserMasterDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l limitUserMasterDo) Assign(attrs ...field.AssignExpr) ILimitUserMasterDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l limitUserMasterDo) Joins(fields ...field.RelationField) ILimitUserMasterDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l limitUserMasterDo) Preload(fields ...field.RelationField) ILimitUserMasterDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l limitUserMasterDo) FirstOrInit() (*model.LimitUserMaster, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LimitUserMaster), nil
	}
}

func (l limitUserMasterDo) FirstOrCreate() (*model.LimitUserMaster, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LimitUserMaster), nil
	}
}

func (l limitUserMasterDo) FindByPage(offset int, limit int) (result []*model.LimitUserMaster, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l limitUserMasterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l limitUserMasterDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l limitUserMasterDo) Delete(models ...*model.LimitUserMaster) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *limitUserMasterDo) withDO(do gen.Dao) *limitUserMasterDo {
	l.DO = *do.(*gen.DO)
	return l
}
