// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_old_seatcode(db *gorm.DB, opts ...gen.DOOption) hCV_old_seatcode {
	_hCV_old_seatcode := hCV_old_seatcode{}

	_hCV_old_seatcode.hCV_old_seatcodeDo.UseDB(db, opts...)
	_hCV_old_seatcode.hCV_old_seatcodeDo.UseModel(&model.HCV_old_seatcode{})

	tableName := _hCV_old_seatcode.hCV_old_seatcodeDo.TableName()
	_hCV_old_seatcode.ALL = field.NewAsterisk(tableName)
	_hCV_old_seatcode.Seatno = field.NewInt64(tableName, "seatno")
	_hCV_old_seatcode.Name = field.NewString(tableName, "name")
	_hCV_old_seatcode.Sname = field.NewString(tableName, "sname")
	_hCV_old_seatcode.EnName = field.NewString(tableName, "en_name")
	_hCV_old_seatcode.Sectorno = field.NewInt64(tableName, "sectorno")
	_hCV_old_seatcode.Viewsectorno = field.NewInt64(tableName, "viewsectorno")
	_hCV_old_seatcode.Status = field.NewInt64(tableName, "status")
	_hCV_old_seatcode.Bookable = field.NewInt64(tableName, "bookable")
	_hCV_old_seatcode.Color = field.NewInt64(tableName, "color")
	_hCV_old_seatcode.Posx = field.NewInt64(tableName, "posx")
	_hCV_old_seatcode.Posy = field.NewInt64(tableName, "posy")
	_hCV_old_seatcode.Iconname = field.NewString(tableName, "iconname")
	_hCV_old_seatcode.Grseatmin = field.NewInt64(tableName, "grseatmin")
	_hCV_old_seatcode.Grseatmax = field.NewInt64(tableName, "grseatmax")
	_hCV_old_seatcode.Mediatypes = field.NewInt64(tableName, "mediatypes")
	_hCV_old_seatcode.Seatshapecd = field.NewInt64(tableName, "seatshapecd")
	_hCV_old_seatcode.Seatviewname = field.NewString(tableName, "seatviewname")
	_hCV_old_seatcode.Istwin = field.NewInt64(tableName, "istwin")
	_hCV_old_seatcode.Seatmappoint = field.NewInt64(tableName, "seatmappoint")

	_hCV_old_seatcode.fillFieldMap()

	return _hCV_old_seatcode
}

type hCV_old_seatcode struct {
	hCV_old_seatcodeDo

	ALL          field.Asterisk
	Seatno       field.Int64
	Name         field.String
	Sname        field.String
	EnName       field.String
	Sectorno     field.Int64
	Viewsectorno field.Int64
	Status       field.Int64
	Bookable     field.Int64
	Color        field.Int64
	Posx         field.Int64
	Posy         field.Int64
	Iconname     field.String
	Grseatmin    field.Int64
	Grseatmax    field.Int64
	Mediatypes   field.Int64
	Seatshapecd  field.Int64
	Seatviewname field.String
	Istwin       field.Int64
	Seatmappoint field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_old_seatcode) Table(newTableName string) *hCV_old_seatcode {
	h.hCV_old_seatcodeDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_old_seatcode) As(alias string) *hCV_old_seatcode {
	h.hCV_old_seatcodeDo.DO = *(h.hCV_old_seatcodeDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_old_seatcode) updateTableName(table string) *hCV_old_seatcode {
	h.ALL = field.NewAsterisk(table)
	h.Seatno = field.NewInt64(table, "seatno")
	h.Name = field.NewString(table, "name")
	h.Sname = field.NewString(table, "sname")
	h.EnName = field.NewString(table, "en_name")
	h.Sectorno = field.NewInt64(table, "sectorno")
	h.Viewsectorno = field.NewInt64(table, "viewsectorno")
	h.Status = field.NewInt64(table, "status")
	h.Bookable = field.NewInt64(table, "bookable")
	h.Color = field.NewInt64(table, "color")
	h.Posx = field.NewInt64(table, "posx")
	h.Posy = field.NewInt64(table, "posy")
	h.Iconname = field.NewString(table, "iconname")
	h.Grseatmin = field.NewInt64(table, "grseatmin")
	h.Grseatmax = field.NewInt64(table, "grseatmax")
	h.Mediatypes = field.NewInt64(table, "mediatypes")
	h.Seatshapecd = field.NewInt64(table, "seatshapecd")
	h.Seatviewname = field.NewString(table, "seatviewname")
	h.Istwin = field.NewInt64(table, "istwin")
	h.Seatmappoint = field.NewInt64(table, "seatmappoint")

	h.fillFieldMap()

	return h
}

func (h *hCV_old_seatcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_old_seatcode) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 19)
	h.fieldMap["seatno"] = h.Seatno
	h.fieldMap["name"] = h.Name
	h.fieldMap["sname"] = h.Sname
	h.fieldMap["en_name"] = h.EnName
	h.fieldMap["sectorno"] = h.Sectorno
	h.fieldMap["viewsectorno"] = h.Viewsectorno
	h.fieldMap["status"] = h.Status
	h.fieldMap["bookable"] = h.Bookable
	h.fieldMap["color"] = h.Color
	h.fieldMap["posx"] = h.Posx
	h.fieldMap["posy"] = h.Posy
	h.fieldMap["iconname"] = h.Iconname
	h.fieldMap["grseatmin"] = h.Grseatmin
	h.fieldMap["grseatmax"] = h.Grseatmax
	h.fieldMap["mediatypes"] = h.Mediatypes
	h.fieldMap["seatshapecd"] = h.Seatshapecd
	h.fieldMap["seatviewname"] = h.Seatviewname
	h.fieldMap["istwin"] = h.Istwin
	h.fieldMap["seatmappoint"] = h.Seatmappoint
}

func (h hCV_old_seatcode) clone(db *gorm.DB) hCV_old_seatcode {
	h.hCV_old_seatcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_old_seatcode) replaceDB(db *gorm.DB) hCV_old_seatcode {
	h.hCV_old_seatcodeDo.ReplaceDB(db)
	return h
}

type hCV_old_seatcodeDo struct{ gen.DO }

type IHCV_old_seatcodeDo interface {
	gen.SubQuery
	Debug() IHCV_old_seatcodeDo
	WithContext(ctx context.Context) IHCV_old_seatcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_old_seatcodeDo
	WriteDB() IHCV_old_seatcodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_old_seatcodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_old_seatcodeDo
	Not(conds ...gen.Condition) IHCV_old_seatcodeDo
	Or(conds ...gen.Condition) IHCV_old_seatcodeDo
	Select(conds ...field.Expr) IHCV_old_seatcodeDo
	Where(conds ...gen.Condition) IHCV_old_seatcodeDo
	Order(conds ...field.Expr) IHCV_old_seatcodeDo
	Distinct(cols ...field.Expr) IHCV_old_seatcodeDo
	Omit(cols ...field.Expr) IHCV_old_seatcodeDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo
	Group(cols ...field.Expr) IHCV_old_seatcodeDo
	Having(conds ...gen.Condition) IHCV_old_seatcodeDo
	Limit(limit int) IHCV_old_seatcodeDo
	Offset(offset int) IHCV_old_seatcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_seatcodeDo
	Unscoped() IHCV_old_seatcodeDo
	Create(values ...*model.HCV_old_seatcode) error
	CreateInBatches(values []*model.HCV_old_seatcode, batchSize int) error
	Save(values ...*model.HCV_old_seatcode) error
	First() (*model.HCV_old_seatcode, error)
	Take() (*model.HCV_old_seatcode, error)
	Last() (*model.HCV_old_seatcode, error)
	Find() ([]*model.HCV_old_seatcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_seatcode, err error)
	FindInBatches(result *[]*model.HCV_old_seatcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_old_seatcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_old_seatcodeDo
	Assign(attrs ...field.AssignExpr) IHCV_old_seatcodeDo
	Joins(fields ...field.RelationField) IHCV_old_seatcodeDo
	Preload(fields ...field.RelationField) IHCV_old_seatcodeDo
	FirstOrInit() (*model.HCV_old_seatcode, error)
	FirstOrCreate() (*model.HCV_old_seatcode, error)
	FindByPage(offset int, limit int) (result []*model.HCV_old_seatcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_old_seatcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_old_seatcodeDo) Debug() IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_old_seatcodeDo) WithContext(ctx context.Context) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_old_seatcodeDo) ReadDB() IHCV_old_seatcodeDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_old_seatcodeDo) WriteDB() IHCV_old_seatcodeDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_old_seatcodeDo) Session(config *gorm.Session) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_old_seatcodeDo) Clauses(conds ...clause.Expression) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_old_seatcodeDo) Returning(value interface{}, columns ...string) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_old_seatcodeDo) Not(conds ...gen.Condition) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_old_seatcodeDo) Or(conds ...gen.Condition) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_old_seatcodeDo) Select(conds ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_old_seatcodeDo) Where(conds ...gen.Condition) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_old_seatcodeDo) Order(conds ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_old_seatcodeDo) Distinct(cols ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_old_seatcodeDo) Omit(cols ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_old_seatcodeDo) Join(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_old_seatcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_old_seatcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_old_seatcodeDo) Group(cols ...field.Expr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_old_seatcodeDo) Having(conds ...gen.Condition) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_old_seatcodeDo) Limit(limit int) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_old_seatcodeDo) Offset(offset int) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_old_seatcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_old_seatcodeDo) Unscoped() IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_old_seatcodeDo) Create(values ...*model.HCV_old_seatcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_old_seatcodeDo) CreateInBatches(values []*model.HCV_old_seatcode, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_old_seatcodeDo) Save(values ...*model.HCV_old_seatcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_old_seatcodeDo) First() (*model.HCV_old_seatcode, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_seatcode), nil
	}
}

func (h hCV_old_seatcodeDo) Take() (*model.HCV_old_seatcode, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_seatcode), nil
	}
}

func (h hCV_old_seatcodeDo) Last() (*model.HCV_old_seatcode, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_seatcode), nil
	}
}

func (h hCV_old_seatcodeDo) Find() ([]*model.HCV_old_seatcode, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_old_seatcode), err
}

func (h hCV_old_seatcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_seatcode, err error) {
	buf := make([]*model.HCV_old_seatcode, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_old_seatcodeDo) FindInBatches(result *[]*model.HCV_old_seatcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_old_seatcodeDo) Attrs(attrs ...field.AssignExpr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_old_seatcodeDo) Assign(attrs ...field.AssignExpr) IHCV_old_seatcodeDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_old_seatcodeDo) Joins(fields ...field.RelationField) IHCV_old_seatcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_old_seatcodeDo) Preload(fields ...field.RelationField) IHCV_old_seatcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_old_seatcodeDo) FirstOrInit() (*model.HCV_old_seatcode, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_seatcode), nil
	}
}

func (h hCV_old_seatcodeDo) FirstOrCreate() (*model.HCV_old_seatcode, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_seatcode), nil
	}
}

func (h hCV_old_seatcodeDo) FindByPage(offset int, limit int) (result []*model.HCV_old_seatcode, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_old_seatcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_old_seatcodeDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_old_seatcodeDo) Delete(models ...*model.HCV_old_seatcode) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_old_seatcodeDo) withDO(do gen.Dao) *hCV_old_seatcodeDo {
	h.DO = *do.(*gen.DO)
	return h
}
