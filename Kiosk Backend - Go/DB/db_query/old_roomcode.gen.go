// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_old_roomcode(db *gorm.DB, opts ...gen.DOOption) hCV_old_roomcode {
	_hCV_old_roomcode := hCV_old_roomcode{}

	_hCV_old_roomcode.hCV_old_roomcodeDo.UseDB(db, opts...)
	_hCV_old_roomcode.hCV_old_roomcodeDo.UseModel(&model.HCV_old_roomcode{})

	tableName := _hCV_old_roomcode.hCV_old_roomcodeDo.TableName()
	_hCV_old_roomcode.ALL = field.NewAsterisk(tableName)
	_hCV_old_roomcode.Roomno = field.NewInt64(tableName, "roomno")
	_hCV_old_roomcode.Name = field.NewString(tableName, "name")
	_hCV_old_roomcode.EnName = field.NewString(tableName, "en_name")
	_hCV_old_roomcode.Floor = field.NewInt64(tableName, "floor")
	_hCV_old_roomcode.Libno = field.NewString(tableName, "libno")
	_hCV_old_roomcode.Bookable = field.NewInt64(tableName, "bookable")
	_hCV_old_roomcode.OpenType = field.NewInt64(tableName, "open_type")
	_hCV_old_roomcode.UserPos = field.NewString(tableName, "user_pos")
	_hCV_old_roomcode.UserStatus = field.NewString(tableName, "user_status")
	_hCV_old_roomcode.MaxUseCnt = field.NewInt64(tableName, "max_use_cnt")
	_hCV_old_roomcode.ApplyQuota = field.NewInt64(tableName, "apply_quota")
	_hCV_old_roomcode.DefUseMin = field.NewInt64(tableName, "def_use_min")
	_hCV_old_roomcode.MaxUseMin = field.NewInt64(tableName, "max_use_min")
	_hCV_old_roomcode.CanExtendTime = field.NewInt64(tableName, "can_extend_time")
	_hCV_old_roomcode.MaxExtendMin = field.NewInt64(tableName, "max_extend_min")
	_hCV_old_roomcode.MaxExtendCnt = field.NewInt64(tableName, "max_extend_cnt")
	_hCV_old_roomcode.MaxBookCnt = field.NewInt64(tableName, "max_book_cnt")
	_hCV_old_roomcode.MinSeatMin = field.NewInt64(tableName, "min_seat_min")
	_hCV_old_roomcode.MaxSeatEachMin = field.NewInt64(tableName, "max_seat_each_min")
	_hCV_old_roomcode.RsvBreakChk = field.NewInt64(tableName, "rsv_break_chk")
	_hCV_old_roomcode.AllDayReserve = field.NewInt64(tableName, "all_day_reserve")
	_hCV_old_roomcode.AllDayAssign = field.NewInt64(tableName, "all_day_assign")
	_hCV_old_roomcode.UseReservePeriod = field.NewInt64(tableName, "use_reserve_period")
	_hCV_old_roomcode.RoomBookAutoCancelMin = field.NewInt64(tableName, "room_book_auto_cancel_min")

	_hCV_old_roomcode.fillFieldMap()

	return _hCV_old_roomcode
}

type hCV_old_roomcode struct {
	hCV_old_roomcodeDo

	ALL                   field.Asterisk
	Roomno                field.Int64
	Name                  field.String
	EnName                field.String
	Floor                 field.Int64
	Libno                 field.String
	Bookable              field.Int64
	OpenType              field.Int64
	UserPos               field.String
	UserStatus            field.String
	MaxUseCnt             field.Int64
	ApplyQuota            field.Int64
	DefUseMin             field.Int64
	MaxUseMin             field.Int64
	CanExtendTime         field.Int64
	MaxExtendMin          field.Int64
	MaxExtendCnt          field.Int64
	MaxBookCnt            field.Int64
	MinSeatMin            field.Int64
	MaxSeatEachMin        field.Int64
	RsvBreakChk           field.Int64
	AllDayReserve         field.Int64
	AllDayAssign          field.Int64
	UseReservePeriod      field.Int64
	RoomBookAutoCancelMin field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_old_roomcode) Table(newTableName string) *hCV_old_roomcode {
	h.hCV_old_roomcodeDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_old_roomcode) As(alias string) *hCV_old_roomcode {
	h.hCV_old_roomcodeDo.DO = *(h.hCV_old_roomcodeDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_old_roomcode) updateTableName(table string) *hCV_old_roomcode {
	h.ALL = field.NewAsterisk(table)
	h.Roomno = field.NewInt64(table, "roomno")
	h.Name = field.NewString(table, "name")
	h.EnName = field.NewString(table, "en_name")
	h.Floor = field.NewInt64(table, "floor")
	h.Libno = field.NewString(table, "libno")
	h.Bookable = field.NewInt64(table, "bookable")
	h.OpenType = field.NewInt64(table, "open_type")
	h.UserPos = field.NewString(table, "user_pos")
	h.UserStatus = field.NewString(table, "user_status")
	h.MaxUseCnt = field.NewInt64(table, "max_use_cnt")
	h.ApplyQuota = field.NewInt64(table, "apply_quota")
	h.DefUseMin = field.NewInt64(table, "def_use_min")
	h.MaxUseMin = field.NewInt64(table, "max_use_min")
	h.CanExtendTime = field.NewInt64(table, "can_extend_time")
	h.MaxExtendMin = field.NewInt64(table, "max_extend_min")
	h.MaxExtendCnt = field.NewInt64(table, "max_extend_cnt")
	h.MaxBookCnt = field.NewInt64(table, "max_book_cnt")
	h.MinSeatMin = field.NewInt64(table, "min_seat_min")
	h.MaxSeatEachMin = field.NewInt64(table, "max_seat_each_min")
	h.RsvBreakChk = field.NewInt64(table, "rsv_break_chk")
	h.AllDayReserve = field.NewInt64(table, "all_day_reserve")
	h.AllDayAssign = field.NewInt64(table, "all_day_assign")
	h.UseReservePeriod = field.NewInt64(table, "use_reserve_period")
	h.RoomBookAutoCancelMin = field.NewInt64(table, "room_book_auto_cancel_min")

	h.fillFieldMap()

	return h
}

func (h *hCV_old_roomcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_old_roomcode) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 24)
	h.fieldMap["roomno"] = h.Roomno
	h.fieldMap["name"] = h.Name
	h.fieldMap["en_name"] = h.EnName
	h.fieldMap["floor"] = h.Floor
	h.fieldMap["libno"] = h.Libno
	h.fieldMap["bookable"] = h.Bookable
	h.fieldMap["open_type"] = h.OpenType
	h.fieldMap["user_pos"] = h.UserPos
	h.fieldMap["user_status"] = h.UserStatus
	h.fieldMap["max_use_cnt"] = h.MaxUseCnt
	h.fieldMap["apply_quota"] = h.ApplyQuota
	h.fieldMap["def_use_min"] = h.DefUseMin
	h.fieldMap["max_use_min"] = h.MaxUseMin
	h.fieldMap["can_extend_time"] = h.CanExtendTime
	h.fieldMap["max_extend_min"] = h.MaxExtendMin
	h.fieldMap["max_extend_cnt"] = h.MaxExtendCnt
	h.fieldMap["max_book_cnt"] = h.MaxBookCnt
	h.fieldMap["min_seat_min"] = h.MinSeatMin
	h.fieldMap["max_seat_each_min"] = h.MaxSeatEachMin
	h.fieldMap["rsv_break_chk"] = h.RsvBreakChk
	h.fieldMap["all_day_reserve"] = h.AllDayReserve
	h.fieldMap["all_day_assign"] = h.AllDayAssign
	h.fieldMap["use_reserve_period"] = h.UseReservePeriod
	h.fieldMap["room_book_auto_cancel_min"] = h.RoomBookAutoCancelMin
}

func (h hCV_old_roomcode) clone(db *gorm.DB) hCV_old_roomcode {
	h.hCV_old_roomcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_old_roomcode) replaceDB(db *gorm.DB) hCV_old_roomcode {
	h.hCV_old_roomcodeDo.ReplaceDB(db)
	return h
}

type hCV_old_roomcodeDo struct{ gen.DO }

type IHCV_old_roomcodeDo interface {
	gen.SubQuery
	Debug() IHCV_old_roomcodeDo
	WithContext(ctx context.Context) IHCV_old_roomcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_old_roomcodeDo
	WriteDB() IHCV_old_roomcodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_old_roomcodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_old_roomcodeDo
	Not(conds ...gen.Condition) IHCV_old_roomcodeDo
	Or(conds ...gen.Condition) IHCV_old_roomcodeDo
	Select(conds ...field.Expr) IHCV_old_roomcodeDo
	Where(conds ...gen.Condition) IHCV_old_roomcodeDo
	Order(conds ...field.Expr) IHCV_old_roomcodeDo
	Distinct(cols ...field.Expr) IHCV_old_roomcodeDo
	Omit(cols ...field.Expr) IHCV_old_roomcodeDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo
	Group(cols ...field.Expr) IHCV_old_roomcodeDo
	Having(conds ...gen.Condition) IHCV_old_roomcodeDo
	Limit(limit int) IHCV_old_roomcodeDo
	Offset(offset int) IHCV_old_roomcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_roomcodeDo
	Unscoped() IHCV_old_roomcodeDo
	Create(values ...*model.HCV_old_roomcode) error
	CreateInBatches(values []*model.HCV_old_roomcode, batchSize int) error
	Save(values ...*model.HCV_old_roomcode) error
	First() (*model.HCV_old_roomcode, error)
	Take() (*model.HCV_old_roomcode, error)
	Last() (*model.HCV_old_roomcode, error)
	Find() ([]*model.HCV_old_roomcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_roomcode, err error)
	FindInBatches(result *[]*model.HCV_old_roomcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_old_roomcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_old_roomcodeDo
	Assign(attrs ...field.AssignExpr) IHCV_old_roomcodeDo
	Joins(fields ...field.RelationField) IHCV_old_roomcodeDo
	Preload(fields ...field.RelationField) IHCV_old_roomcodeDo
	FirstOrInit() (*model.HCV_old_roomcode, error)
	FirstOrCreate() (*model.HCV_old_roomcode, error)
	FindByPage(offset int, limit int) (result []*model.HCV_old_roomcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_old_roomcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_old_roomcodeDo) Debug() IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_old_roomcodeDo) WithContext(ctx context.Context) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_old_roomcodeDo) ReadDB() IHCV_old_roomcodeDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_old_roomcodeDo) WriteDB() IHCV_old_roomcodeDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_old_roomcodeDo) Session(config *gorm.Session) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_old_roomcodeDo) Clauses(conds ...clause.Expression) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_old_roomcodeDo) Returning(value interface{}, columns ...string) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_old_roomcodeDo) Not(conds ...gen.Condition) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_old_roomcodeDo) Or(conds ...gen.Condition) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_old_roomcodeDo) Select(conds ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_old_roomcodeDo) Where(conds ...gen.Condition) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_old_roomcodeDo) Order(conds ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_old_roomcodeDo) Distinct(cols ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_old_roomcodeDo) Omit(cols ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_old_roomcodeDo) Join(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_old_roomcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_old_roomcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_old_roomcodeDo) Group(cols ...field.Expr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_old_roomcodeDo) Having(conds ...gen.Condition) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_old_roomcodeDo) Limit(limit int) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_old_roomcodeDo) Offset(offset int) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_old_roomcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_old_roomcodeDo) Unscoped() IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_old_roomcodeDo) Create(values ...*model.HCV_old_roomcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_old_roomcodeDo) CreateInBatches(values []*model.HCV_old_roomcode, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_old_roomcodeDo) Save(values ...*model.HCV_old_roomcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_old_roomcodeDo) First() (*model.HCV_old_roomcode, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_roomcode), nil
	}
}

func (h hCV_old_roomcodeDo) Take() (*model.HCV_old_roomcode, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_roomcode), nil
	}
}

func (h hCV_old_roomcodeDo) Last() (*model.HCV_old_roomcode, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_roomcode), nil
	}
}

func (h hCV_old_roomcodeDo) Find() ([]*model.HCV_old_roomcode, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_old_roomcode), err
}

func (h hCV_old_roomcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_roomcode, err error) {
	buf := make([]*model.HCV_old_roomcode, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_old_roomcodeDo) FindInBatches(result *[]*model.HCV_old_roomcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_old_roomcodeDo) Attrs(attrs ...field.AssignExpr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_old_roomcodeDo) Assign(attrs ...field.AssignExpr) IHCV_old_roomcodeDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_old_roomcodeDo) Joins(fields ...field.RelationField) IHCV_old_roomcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_old_roomcodeDo) Preload(fields ...field.RelationField) IHCV_old_roomcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_old_roomcodeDo) FirstOrInit() (*model.HCV_old_roomcode, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_roomcode), nil
	}
}

func (h hCV_old_roomcodeDo) FirstOrCreate() (*model.HCV_old_roomcode, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_roomcode), nil
	}
}

func (h hCV_old_roomcodeDo) FindByPage(offset int, limit int) (result []*model.HCV_old_roomcode, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_old_roomcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_old_roomcodeDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_old_roomcodeDo) Delete(models ...*model.HCV_old_roomcode) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_old_roomcodeDo) withDO(do gen.Dao) *hCV_old_roomcodeDo {
	h.DO = *do.(*gen.DO)
	return h
}
