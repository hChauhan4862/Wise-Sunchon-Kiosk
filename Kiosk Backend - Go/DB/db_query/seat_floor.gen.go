// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatFloor(db *gorm.DB, opts ...gen.DOOption) seatFloor {
	_seatFloor := seatFloor{}

	_seatFloor.seatFloorDo.UseDB(db, opts...)
	_seatFloor.seatFloorDo.UseModel(&model.SeatFloor{})

	tableName := _seatFloor.seatFloorDo.TableName()
	_seatFloor.ALL = field.NewAsterisk(tableName)
	_seatFloor.FLOORNO = field.NewInt64(tableName, "FLOORNO")
	_seatFloor.NAME = field.NewString(tableName, "NAME")
	_seatFloor.ENNAME = field.NewString(tableName, "EN_NAME")
	_seatFloor.FLOORIMAGE = field.NewString(tableName, "FLOOR_IMAGE")
	_seatFloor.LIBNO = field.NewInt64(tableName, "LIBNO")
	_seatFloor.FLOORIMAGE2 = field.NewString(tableName, "FLOOR_IMAGE2")
	_seatFloor.FLOOR = field.NewInt64(tableName, "FLOOR")

	_seatFloor.fillFieldMap()

	return _seatFloor
}

type seatFloor struct {
	seatFloorDo

	ALL         field.Asterisk
	FLOORNO     field.Int64
	NAME        field.String
	ENNAME      field.String
	FLOORIMAGE  field.String
	LIBNO       field.Int64
	FLOORIMAGE2 field.String
	FLOOR       field.Int64

	fieldMap map[string]field.Expr
}

func (s seatFloor) Table(newTableName string) *seatFloor {
	s.seatFloorDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatFloor) As(alias string) *seatFloor {
	s.seatFloorDo.DO = *(s.seatFloorDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatFloor) updateTableName(table string) *seatFloor {
	s.ALL = field.NewAsterisk(table)
	s.FLOORNO = field.NewInt64(table, "FLOORNO")
	s.NAME = field.NewString(table, "NAME")
	s.ENNAME = field.NewString(table, "EN_NAME")
	s.FLOORIMAGE = field.NewString(table, "FLOOR_IMAGE")
	s.LIBNO = field.NewInt64(table, "LIBNO")
	s.FLOORIMAGE2 = field.NewString(table, "FLOOR_IMAGE2")
	s.FLOOR = field.NewInt64(table, "FLOOR")

	s.fillFieldMap()

	return s
}

func (s *seatFloor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatFloor) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["FLOORNO"] = s.FLOORNO
	s.fieldMap["NAME"] = s.NAME
	s.fieldMap["EN_NAME"] = s.ENNAME
	s.fieldMap["FLOOR_IMAGE"] = s.FLOORIMAGE
	s.fieldMap["LIBNO"] = s.LIBNO
	s.fieldMap["FLOOR_IMAGE2"] = s.FLOORIMAGE2
	s.fieldMap["FLOOR"] = s.FLOOR
}

func (s seatFloor) clone(db *gorm.DB) seatFloor {
	s.seatFloorDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatFloor) replaceDB(db *gorm.DB) seatFloor {
	s.seatFloorDo.ReplaceDB(db)
	return s
}

type seatFloorDo struct{ gen.DO }

type ISeatFloorDo interface {
	gen.SubQuery
	Debug() ISeatFloorDo
	WithContext(ctx context.Context) ISeatFloorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatFloorDo
	WriteDB() ISeatFloorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatFloorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatFloorDo
	Not(conds ...gen.Condition) ISeatFloorDo
	Or(conds ...gen.Condition) ISeatFloorDo
	Select(conds ...field.Expr) ISeatFloorDo
	Where(conds ...gen.Condition) ISeatFloorDo
	Order(conds ...field.Expr) ISeatFloorDo
	Distinct(cols ...field.Expr) ISeatFloorDo
	Omit(cols ...field.Expr) ISeatFloorDo
	Join(table schema.Tabler, on ...field.Expr) ISeatFloorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatFloorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatFloorDo
	Group(cols ...field.Expr) ISeatFloorDo
	Having(conds ...gen.Condition) ISeatFloorDo
	Limit(limit int) ISeatFloorDo
	Offset(offset int) ISeatFloorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatFloorDo
	Unscoped() ISeatFloorDo
	Create(values ...*model.SeatFloor) error
	CreateInBatches(values []*model.SeatFloor, batchSize int) error
	Save(values ...*model.SeatFloor) error
	First() (*model.SeatFloor, error)
	Take() (*model.SeatFloor, error)
	Last() (*model.SeatFloor, error)
	Find() ([]*model.SeatFloor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatFloor, err error)
	FindInBatches(result *[]*model.SeatFloor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatFloor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatFloorDo
	Assign(attrs ...field.AssignExpr) ISeatFloorDo
	Joins(fields ...field.RelationField) ISeatFloorDo
	Preload(fields ...field.RelationField) ISeatFloorDo
	FirstOrInit() (*model.SeatFloor, error)
	FirstOrCreate() (*model.SeatFloor, error)
	FindByPage(offset int, limit int) (result []*model.SeatFloor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatFloorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatFloorDo) Debug() ISeatFloorDo {
	return s.withDO(s.DO.Debug())
}

func (s seatFloorDo) WithContext(ctx context.Context) ISeatFloorDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatFloorDo) ReadDB() ISeatFloorDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatFloorDo) WriteDB() ISeatFloorDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatFloorDo) Session(config *gorm.Session) ISeatFloorDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatFloorDo) Clauses(conds ...clause.Expression) ISeatFloorDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatFloorDo) Returning(value interface{}, columns ...string) ISeatFloorDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatFloorDo) Not(conds ...gen.Condition) ISeatFloorDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatFloorDo) Or(conds ...gen.Condition) ISeatFloorDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatFloorDo) Select(conds ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatFloorDo) Where(conds ...gen.Condition) ISeatFloorDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatFloorDo) Order(conds ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatFloorDo) Distinct(cols ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatFloorDo) Omit(cols ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatFloorDo) Join(table schema.Tabler, on ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatFloorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatFloorDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatFloorDo) Group(cols ...field.Expr) ISeatFloorDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatFloorDo) Having(conds ...gen.Condition) ISeatFloorDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatFloorDo) Limit(limit int) ISeatFloorDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatFloorDo) Offset(offset int) ISeatFloorDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatFloorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatFloorDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatFloorDo) Unscoped() ISeatFloorDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatFloorDo) Create(values ...*model.SeatFloor) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatFloorDo) CreateInBatches(values []*model.SeatFloor, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatFloorDo) Save(values ...*model.SeatFloor) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatFloorDo) First() (*model.SeatFloor, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatFloor), nil
	}
}

func (s seatFloorDo) Take() (*model.SeatFloor, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatFloor), nil
	}
}

func (s seatFloorDo) Last() (*model.SeatFloor, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatFloor), nil
	}
}

func (s seatFloorDo) Find() ([]*model.SeatFloor, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatFloor), err
}

func (s seatFloorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatFloor, err error) {
	buf := make([]*model.SeatFloor, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatFloorDo) FindInBatches(result *[]*model.SeatFloor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatFloorDo) Attrs(attrs ...field.AssignExpr) ISeatFloorDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatFloorDo) Assign(attrs ...field.AssignExpr) ISeatFloorDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatFloorDo) Joins(fields ...field.RelationField) ISeatFloorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatFloorDo) Preload(fields ...field.RelationField) ISeatFloorDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatFloorDo) FirstOrInit() (*model.SeatFloor, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatFloor), nil
	}
}

func (s seatFloorDo) FirstOrCreate() (*model.SeatFloor, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatFloor), nil
	}
}

func (s seatFloorDo) FindByPage(offset int, limit int) (result []*model.SeatFloor, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatFloorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatFloorDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatFloorDo) Delete(models ...*model.SeatFloor) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatFloorDo) withDO(do gen.Dao) *seatFloorDo {
	s.DO = *do.(*gen.DO)
	return s
}
