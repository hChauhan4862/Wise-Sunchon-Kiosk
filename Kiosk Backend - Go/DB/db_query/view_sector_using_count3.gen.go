// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_VIEW_SECTOR_USING_COUNT3(db *gorm.DB, opts ...gen.DOOption) hCV_VIEW_SECTOR_USING_COUNT3 {
	_hCV_VIEW_SECTOR_USING_COUNT3 := hCV_VIEW_SECTOR_USING_COUNT3{}

	_hCV_VIEW_SECTOR_USING_COUNT3.hCV_VIEW_SECTOR_USING_COUNT3Do.UseDB(db, opts...)
	_hCV_VIEW_SECTOR_USING_COUNT3.hCV_VIEW_SECTOR_USING_COUNT3Do.UseModel(&model.HCV_VIEW_SECTOR_USING_COUNT3{})

	tableName := _hCV_VIEW_SECTOR_USING_COUNT3.hCV_VIEW_SECTOR_USING_COUNT3Do.TableName()
	_hCV_VIEW_SECTOR_USING_COUNT3.ALL = field.NewAsterisk(tableName)
	_hCV_VIEW_SECTOR_USING_COUNT3.LIBNO = field.NewInt64(tableName, "LIBNO")
	_hCV_VIEW_SECTOR_USING_COUNT3.FLOOR = field.NewInt64(tableName, "FLOOR")
	_hCV_VIEW_SECTOR_USING_COUNT3.ROOMNO = field.NewInt64(tableName, "ROOMNO")
	_hCV_VIEW_SECTOR_USING_COUNT3.FLOORENNAME = field.NewString(tableName, "FLOOR_EN_NAME")
	_hCV_VIEW_SECTOR_USING_COUNT3.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_hCV_VIEW_SECTOR_USING_COUNT3.USECNT = field.NewInt64(tableName, "USE_CNT")
	_hCV_VIEW_SECTOR_USING_COUNT3.FIXCNT = field.NewInt64(tableName, "FIX_CNT")
	_hCV_VIEW_SECTOR_USING_COUNT3.TOTALCNT = field.NewInt64(tableName, "TOTAL_CNT")
	_hCV_VIEW_SECTOR_USING_COUNT3.USECNT2 = field.NewInt64(tableName, "USE_CNT2")
	_hCV_VIEW_SECTOR_USING_COUNT3.REMAINCNT = field.NewInt64(tableName, "REMAIN_CNT")
	_hCV_VIEW_SECTOR_USING_COUNT3.SECTORNO = field.NewInt64(tableName, "SECTORNO")
	_hCV_VIEW_SECTOR_USING_COUNT3.SECTORNAME = field.NewString(tableName, "SECTOR_NAME")
	_hCV_VIEW_SECTOR_USING_COUNT3.TYPENO = field.NewInt64(tableName, "TYPENO")
	_hCV_VIEW_SECTOR_USING_COUNT3.FLOORNAME = field.NewString(tableName, "FLOOR_NAME")
	_hCV_VIEW_SECTOR_USING_COUNT3.LIBNAME = field.NewString(tableName, "LIB_NAME")

	_hCV_VIEW_SECTOR_USING_COUNT3.fillFieldMap()

	return _hCV_VIEW_SECTOR_USING_COUNT3
}

type hCV_VIEW_SECTOR_USING_COUNT3 struct {
	hCV_VIEW_SECTOR_USING_COUNT3Do

	ALL         field.Asterisk
	LIBNO       field.Int64
	FLOOR       field.Int64
	ROOMNO      field.Int64
	FLOORENNAME field.String
	ROOMNAME    field.String
	USECNT      field.Int64
	FIXCNT      field.Int64
	TOTALCNT    field.Int64
	USECNT2     field.Int64
	REMAINCNT   field.Int64
	SECTORNO    field.Int64
	SECTORNAME  field.String
	TYPENO      field.Int64
	FLOORNAME   field.String
	LIBNAME     field.String

	fieldMap map[string]field.Expr
}

func (h hCV_VIEW_SECTOR_USING_COUNT3) Table(newTableName string) *hCV_VIEW_SECTOR_USING_COUNT3 {
	h.hCV_VIEW_SECTOR_USING_COUNT3Do.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3) As(alias string) *hCV_VIEW_SECTOR_USING_COUNT3 {
	h.hCV_VIEW_SECTOR_USING_COUNT3Do.DO = *(h.hCV_VIEW_SECTOR_USING_COUNT3Do.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_VIEW_SECTOR_USING_COUNT3) updateTableName(table string) *hCV_VIEW_SECTOR_USING_COUNT3 {
	h.ALL = field.NewAsterisk(table)
	h.LIBNO = field.NewInt64(table, "LIBNO")
	h.FLOOR = field.NewInt64(table, "FLOOR")
	h.ROOMNO = field.NewInt64(table, "ROOMNO")
	h.FLOORENNAME = field.NewString(table, "FLOOR_EN_NAME")
	h.ROOMNAME = field.NewString(table, "ROOM_NAME")
	h.USECNT = field.NewInt64(table, "USE_CNT")
	h.FIXCNT = field.NewInt64(table, "FIX_CNT")
	h.TOTALCNT = field.NewInt64(table, "TOTAL_CNT")
	h.USECNT2 = field.NewInt64(table, "USE_CNT2")
	h.REMAINCNT = field.NewInt64(table, "REMAIN_CNT")
	h.SECTORNO = field.NewInt64(table, "SECTORNO")
	h.SECTORNAME = field.NewString(table, "SECTOR_NAME")
	h.TYPENO = field.NewInt64(table, "TYPENO")
	h.FLOORNAME = field.NewString(table, "FLOOR_NAME")
	h.LIBNAME = field.NewString(table, "LIB_NAME")

	h.fillFieldMap()

	return h
}

func (h *hCV_VIEW_SECTOR_USING_COUNT3) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_VIEW_SECTOR_USING_COUNT3) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 15)
	h.fieldMap["LIBNO"] = h.LIBNO
	h.fieldMap["FLOOR"] = h.FLOOR
	h.fieldMap["ROOMNO"] = h.ROOMNO
	h.fieldMap["FLOOR_EN_NAME"] = h.FLOORENNAME
	h.fieldMap["ROOM_NAME"] = h.ROOMNAME
	h.fieldMap["USE_CNT"] = h.USECNT
	h.fieldMap["FIX_CNT"] = h.FIXCNT
	h.fieldMap["TOTAL_CNT"] = h.TOTALCNT
	h.fieldMap["USE_CNT2"] = h.USECNT2
	h.fieldMap["REMAIN_CNT"] = h.REMAINCNT
	h.fieldMap["SECTORNO"] = h.SECTORNO
	h.fieldMap["SECTOR_NAME"] = h.SECTORNAME
	h.fieldMap["TYPENO"] = h.TYPENO
	h.fieldMap["FLOOR_NAME"] = h.FLOORNAME
	h.fieldMap["LIB_NAME"] = h.LIBNAME
}

func (h hCV_VIEW_SECTOR_USING_COUNT3) clone(db *gorm.DB) hCV_VIEW_SECTOR_USING_COUNT3 {
	h.hCV_VIEW_SECTOR_USING_COUNT3Do.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_VIEW_SECTOR_USING_COUNT3) replaceDB(db *gorm.DB) hCV_VIEW_SECTOR_USING_COUNT3 {
	h.hCV_VIEW_SECTOR_USING_COUNT3Do.ReplaceDB(db)
	return h
}

type hCV_VIEW_SECTOR_USING_COUNT3Do struct{ gen.DO }

type IHCV_VIEW_SECTOR_USING_COUNT3Do interface {
	gen.SubQuery
	Debug() IHCV_VIEW_SECTOR_USING_COUNT3Do
	WithContext(ctx context.Context) IHCV_VIEW_SECTOR_USING_COUNT3Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_VIEW_SECTOR_USING_COUNT3Do
	WriteDB() IHCV_VIEW_SECTOR_USING_COUNT3Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Not(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Or(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Select(conds ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Where(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Order(conds ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Distinct(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Omit(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Join(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Group(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Having(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Limit(limit int) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Offset(offset int) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Unscoped() IHCV_VIEW_SECTOR_USING_COUNT3Do
	Create(values ...*model.HCV_VIEW_SECTOR_USING_COUNT3) error
	CreateInBatches(values []*model.HCV_VIEW_SECTOR_USING_COUNT3, batchSize int) error
	Save(values ...*model.HCV_VIEW_SECTOR_USING_COUNT3) error
	First() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	Take() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	Last() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	Find() ([]*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VIEW_SECTOR_USING_COUNT3, err error)
	FindInBatches(result *[]*model.HCV_VIEW_SECTOR_USING_COUNT3, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_VIEW_SECTOR_USING_COUNT3) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Assign(attrs ...field.AssignExpr) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Joins(fields ...field.RelationField) IHCV_VIEW_SECTOR_USING_COUNT3Do
	Preload(fields ...field.RelationField) IHCV_VIEW_SECTOR_USING_COUNT3Do
	FirstOrInit() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	FirstOrCreate() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error)
	FindByPage(offset int, limit int) (result []*model.HCV_VIEW_SECTOR_USING_COUNT3, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_VIEW_SECTOR_USING_COUNT3Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Debug() IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Debug())
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) WithContext(ctx context.Context) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) ReadDB() IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) WriteDB() IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Session(config *gorm.Session) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Clauses(conds ...clause.Expression) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Returning(value interface{}, columns ...string) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Not(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Or(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Select(conds ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Where(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Order(conds ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Distinct(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Omit(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Join(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Group(cols ...field.Expr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Having(conds ...gen.Condition) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Limit(limit int) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Offset(offset int) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Unscoped() IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Create(values ...*model.HCV_VIEW_SECTOR_USING_COUNT3) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) CreateInBatches(values []*model.HCV_VIEW_SECTOR_USING_COUNT3, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Save(values ...*model.HCV_VIEW_SECTOR_USING_COUNT3) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) First() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_SECTOR_USING_COUNT3), nil
	}
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Take() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_SECTOR_USING_COUNT3), nil
	}
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Last() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_SECTOR_USING_COUNT3), nil
	}
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Find() ([]*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_VIEW_SECTOR_USING_COUNT3), err
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VIEW_SECTOR_USING_COUNT3, err error) {
	buf := make([]*model.HCV_VIEW_SECTOR_USING_COUNT3, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) FindInBatches(result *[]*model.HCV_VIEW_SECTOR_USING_COUNT3, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Attrs(attrs ...field.AssignExpr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Assign(attrs ...field.AssignExpr) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Joins(fields ...field.RelationField) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Preload(fields ...field.RelationField) IHCV_VIEW_SECTOR_USING_COUNT3Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) FirstOrInit() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_SECTOR_USING_COUNT3), nil
	}
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) FirstOrCreate() (*model.HCV_VIEW_SECTOR_USING_COUNT3, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_SECTOR_USING_COUNT3), nil
	}
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) FindByPage(offset int, limit int) (result []*model.HCV_VIEW_SECTOR_USING_COUNT3, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_VIEW_SECTOR_USING_COUNT3Do) Delete(models ...*model.HCV_VIEW_SECTOR_USING_COUNT3) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_VIEW_SECTOR_USING_COUNT3Do) withDO(do gen.Dao) *hCV_VIEW_SECTOR_USING_COUNT3Do {
	h.DO = *do.(*gen.DO)
	return h
}
