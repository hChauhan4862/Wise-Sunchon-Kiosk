// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_view_seat_room(db *gorm.DB, opts ...gen.DOOption) hCV_view_seat_room {
	_hCV_view_seat_room := hCV_view_seat_room{}

	_hCV_view_seat_room.hCV_view_seat_roomDo.UseDB(db, opts...)
	_hCV_view_seat_room.hCV_view_seat_roomDo.UseModel(&model.HCV_view_seat_room{})

	tableName := _hCV_view_seat_room.hCV_view_seat_roomDo.TableName()
	_hCV_view_seat_room.ALL = field.NewAsterisk(tableName)
	_hCV_view_seat_room.ROOMNO = field.NewInt64(tableName, "ROOMNO")
	_hCV_view_seat_room.NAME = field.NewString(tableName, "NAME")
	_hCV_view_seat_room.ENNAME = field.NewString(tableName, "EN_NAME")
	_hCV_view_seat_room.FLOORNO = field.NewInt64(tableName, "FLOORNO")
	_hCV_view_seat_room.APPROVALYN = field.NewString(tableName, "APPROVAL_YN")
	_hCV_view_seat_room.BOOKINGYN = field.NewString(tableName, "BOOKING_YN")
	_hCV_view_seat_room.OPENTYPE = field.NewInt64(tableName, "OPEN_TYPE")
	_hCV_view_seat_room.USEMIN = field.NewInt64(tableName, "USE_MIN")
	_hCV_view_seat_room.CANCONTMIN = field.NewInt64(tableName, "CAN_CONT_MIN")
	_hCV_view_seat_room.CONTMIN = field.NewInt64(tableName, "CONT_MIN")
	_hCV_view_seat_room.MAXCONTCNT = field.NewInt64(tableName, "MAX_CONT_CNT")
	_hCV_view_seat_room.USERPOS = field.NewString(tableName, "USER_POS")
	_hCV_view_seat_room.USERDEPT = field.NewString(tableName, "USER_DEPT")
	_hCV_view_seat_room.USERSTATUS = field.NewString(tableName, "USER_STATUS")
	_hCV_view_seat_room.NOSHOWYN = field.NewString(tableName, "NOSHOW_YN")
	_hCV_view_seat_room.NOSHOWMIN = field.NewInt64(tableName, "NOSHOW_MIN")
	_hCV_view_seat_room.Floor = field.NewString(tableName, "Floor")
	_hCV_view_seat_room.OPENTIME = field.NewTime(tableName, "OPENTIME")
	_hCV_view_seat_room.CLOSETIME = field.NewTime(tableName, "CLOSETIME")
	_hCV_view_seat_room.OPERATIONMIN = field.NewInt64(tableName, "OPERATION_MIN")
	_hCV_view_seat_room.LIBNO = field.NewInt64(tableName, "LIBNO")
	_hCV_view_seat_room.LIBNAME = field.NewString(tableName, "LIB_NAME")
	_hCV_view_seat_room.LibCloseRemark = field.NewString(tableName, "LibCloseRemark")
	_hCV_view_seat_room.IsLibClose = field.NewInt64(tableName, "IsLibClose")
	_hCV_view_seat_room.CLOSEDTFR = field.NewString(tableName, "CLOSE_DT_FR")
	_hCV_view_seat_room.CLOSEDTTO = field.NewString(tableName, "CLOSE_DT_TO")
	_hCV_view_seat_room.TodayAbleAssignMin = field.NewInt64(tableName, "TodayAbleAssignMin")
	_hCV_view_seat_room.IsRoomOpen = field.NewInt64(tableName, "IsRoomOpen")

	_hCV_view_seat_room.fillFieldMap()

	return _hCV_view_seat_room
}

type hCV_view_seat_room struct {
	hCV_view_seat_roomDo

	ALL                field.Asterisk
	ROOMNO             field.Int64
	NAME               field.String
	ENNAME             field.String
	FLOORNO            field.Int64
	APPROVALYN         field.String
	BOOKINGYN          field.String
	OPENTYPE           field.Int64
	USEMIN             field.Int64
	CANCONTMIN         field.Int64
	CONTMIN            field.Int64
	MAXCONTCNT         field.Int64
	USERPOS            field.String
	USERDEPT           field.String
	USERSTATUS         field.String
	NOSHOWYN           field.String
	NOSHOWMIN          field.Int64
	Floor              field.String
	OPENTIME           field.Time
	CLOSETIME          field.Time
	OPERATIONMIN       field.Int64
	LIBNO              field.Int64
	LIBNAME            field.String
	LibCloseRemark     field.String
	IsLibClose         field.Int64
	CLOSEDTFR          field.String
	CLOSEDTTO          field.String
	TodayAbleAssignMin field.Int64
	IsRoomOpen         field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_view_seat_room) Table(newTableName string) *hCV_view_seat_room {
	h.hCV_view_seat_roomDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_view_seat_room) As(alias string) *hCV_view_seat_room {
	h.hCV_view_seat_roomDo.DO = *(h.hCV_view_seat_roomDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_view_seat_room) updateTableName(table string) *hCV_view_seat_room {
	h.ALL = field.NewAsterisk(table)
	h.ROOMNO = field.NewInt64(table, "ROOMNO")
	h.NAME = field.NewString(table, "NAME")
	h.ENNAME = field.NewString(table, "EN_NAME")
	h.FLOORNO = field.NewInt64(table, "FLOORNO")
	h.APPROVALYN = field.NewString(table, "APPROVAL_YN")
	h.BOOKINGYN = field.NewString(table, "BOOKING_YN")
	h.OPENTYPE = field.NewInt64(table, "OPEN_TYPE")
	h.USEMIN = field.NewInt64(table, "USE_MIN")
	h.CANCONTMIN = field.NewInt64(table, "CAN_CONT_MIN")
	h.CONTMIN = field.NewInt64(table, "CONT_MIN")
	h.MAXCONTCNT = field.NewInt64(table, "MAX_CONT_CNT")
	h.USERPOS = field.NewString(table, "USER_POS")
	h.USERDEPT = field.NewString(table, "USER_DEPT")
	h.USERSTATUS = field.NewString(table, "USER_STATUS")
	h.NOSHOWYN = field.NewString(table, "NOSHOW_YN")
	h.NOSHOWMIN = field.NewInt64(table, "NOSHOW_MIN")
	h.Floor = field.NewString(table, "Floor")
	h.OPENTIME = field.NewTime(table, "OPENTIME")
	h.CLOSETIME = field.NewTime(table, "CLOSETIME")
	h.OPERATIONMIN = field.NewInt64(table, "OPERATION_MIN")
	h.LIBNO = field.NewInt64(table, "LIBNO")
	h.LIBNAME = field.NewString(table, "LIB_NAME")
	h.LibCloseRemark = field.NewString(table, "LibCloseRemark")
	h.IsLibClose = field.NewInt64(table, "IsLibClose")
	h.CLOSEDTFR = field.NewString(table, "CLOSE_DT_FR")
	h.CLOSEDTTO = field.NewString(table, "CLOSE_DT_TO")
	h.TodayAbleAssignMin = field.NewInt64(table, "TodayAbleAssignMin")
	h.IsRoomOpen = field.NewInt64(table, "IsRoomOpen")

	h.fillFieldMap()

	return h
}

func (h *hCV_view_seat_room) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_view_seat_room) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 28)
	h.fieldMap["ROOMNO"] = h.ROOMNO
	h.fieldMap["NAME"] = h.NAME
	h.fieldMap["EN_NAME"] = h.ENNAME
	h.fieldMap["FLOORNO"] = h.FLOORNO
	h.fieldMap["APPROVAL_YN"] = h.APPROVALYN
	h.fieldMap["BOOKING_YN"] = h.BOOKINGYN
	h.fieldMap["OPEN_TYPE"] = h.OPENTYPE
	h.fieldMap["USE_MIN"] = h.USEMIN
	h.fieldMap["CAN_CONT_MIN"] = h.CANCONTMIN
	h.fieldMap["CONT_MIN"] = h.CONTMIN
	h.fieldMap["MAX_CONT_CNT"] = h.MAXCONTCNT
	h.fieldMap["USER_POS"] = h.USERPOS
	h.fieldMap["USER_DEPT"] = h.USERDEPT
	h.fieldMap["USER_STATUS"] = h.USERSTATUS
	h.fieldMap["NOSHOW_YN"] = h.NOSHOWYN
	h.fieldMap["NOSHOW_MIN"] = h.NOSHOWMIN
	h.fieldMap["Floor"] = h.Floor
	h.fieldMap["OPENTIME"] = h.OPENTIME
	h.fieldMap["CLOSETIME"] = h.CLOSETIME
	h.fieldMap["OPERATION_MIN"] = h.OPERATIONMIN
	h.fieldMap["LIBNO"] = h.LIBNO
	h.fieldMap["LIB_NAME"] = h.LIBNAME
	h.fieldMap["LibCloseRemark"] = h.LibCloseRemark
	h.fieldMap["IsLibClose"] = h.IsLibClose
	h.fieldMap["CLOSE_DT_FR"] = h.CLOSEDTFR
	h.fieldMap["CLOSE_DT_TO"] = h.CLOSEDTTO
	h.fieldMap["TodayAbleAssignMin"] = h.TodayAbleAssignMin
	h.fieldMap["IsRoomOpen"] = h.IsRoomOpen
}

func (h hCV_view_seat_room) clone(db *gorm.DB) hCV_view_seat_room {
	h.hCV_view_seat_roomDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_view_seat_room) replaceDB(db *gorm.DB) hCV_view_seat_room {
	h.hCV_view_seat_roomDo.ReplaceDB(db)
	return h
}

type hCV_view_seat_roomDo struct{ gen.DO }

type IHCV_view_seat_roomDo interface {
	gen.SubQuery
	Debug() IHCV_view_seat_roomDo
	WithContext(ctx context.Context) IHCV_view_seat_roomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_view_seat_roomDo
	WriteDB() IHCV_view_seat_roomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_view_seat_roomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_view_seat_roomDo
	Not(conds ...gen.Condition) IHCV_view_seat_roomDo
	Or(conds ...gen.Condition) IHCV_view_seat_roomDo
	Select(conds ...field.Expr) IHCV_view_seat_roomDo
	Where(conds ...gen.Condition) IHCV_view_seat_roomDo
	Order(conds ...field.Expr) IHCV_view_seat_roomDo
	Distinct(cols ...field.Expr) IHCV_view_seat_roomDo
	Omit(cols ...field.Expr) IHCV_view_seat_roomDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo
	Group(cols ...field.Expr) IHCV_view_seat_roomDo
	Having(conds ...gen.Condition) IHCV_view_seat_roomDo
	Limit(limit int) IHCV_view_seat_roomDo
	Offset(offset int) IHCV_view_seat_roomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_roomDo
	Unscoped() IHCV_view_seat_roomDo
	Create(values ...*model.HCV_view_seat_room) error
	CreateInBatches(values []*model.HCV_view_seat_room, batchSize int) error
	Save(values ...*model.HCV_view_seat_room) error
	First() (*model.HCV_view_seat_room, error)
	Take() (*model.HCV_view_seat_room, error)
	Last() (*model.HCV_view_seat_room, error)
	Find() ([]*model.HCV_view_seat_room, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_room, err error)
	FindInBatches(result *[]*model.HCV_view_seat_room, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_view_seat_room) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_view_seat_roomDo
	Assign(attrs ...field.AssignExpr) IHCV_view_seat_roomDo
	Joins(fields ...field.RelationField) IHCV_view_seat_roomDo
	Preload(fields ...field.RelationField) IHCV_view_seat_roomDo
	FirstOrInit() (*model.HCV_view_seat_room, error)
	FirstOrCreate() (*model.HCV_view_seat_room, error)
	FindByPage(offset int, limit int) (result []*model.HCV_view_seat_room, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_view_seat_roomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_view_seat_roomDo) Debug() IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_view_seat_roomDo) WithContext(ctx context.Context) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_view_seat_roomDo) ReadDB() IHCV_view_seat_roomDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_view_seat_roomDo) WriteDB() IHCV_view_seat_roomDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_view_seat_roomDo) Session(config *gorm.Session) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_view_seat_roomDo) Clauses(conds ...clause.Expression) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_view_seat_roomDo) Returning(value interface{}, columns ...string) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_view_seat_roomDo) Not(conds ...gen.Condition) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_view_seat_roomDo) Or(conds ...gen.Condition) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_view_seat_roomDo) Select(conds ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_view_seat_roomDo) Where(conds ...gen.Condition) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_view_seat_roomDo) Order(conds ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_view_seat_roomDo) Distinct(cols ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_view_seat_roomDo) Omit(cols ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_view_seat_roomDo) Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_view_seat_roomDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_view_seat_roomDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_view_seat_roomDo) Group(cols ...field.Expr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_view_seat_roomDo) Having(conds ...gen.Condition) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_view_seat_roomDo) Limit(limit int) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_view_seat_roomDo) Offset(offset int) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_view_seat_roomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_view_seat_roomDo) Unscoped() IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_view_seat_roomDo) Create(values ...*model.HCV_view_seat_room) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_view_seat_roomDo) CreateInBatches(values []*model.HCV_view_seat_room, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_view_seat_roomDo) Save(values ...*model.HCV_view_seat_room) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_view_seat_roomDo) First() (*model.HCV_view_seat_room, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_room), nil
	}
}

func (h hCV_view_seat_roomDo) Take() (*model.HCV_view_seat_room, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_room), nil
	}
}

func (h hCV_view_seat_roomDo) Last() (*model.HCV_view_seat_room, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_room), nil
	}
}

func (h hCV_view_seat_roomDo) Find() ([]*model.HCV_view_seat_room, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_view_seat_room), err
}

func (h hCV_view_seat_roomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_room, err error) {
	buf := make([]*model.HCV_view_seat_room, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_view_seat_roomDo) FindInBatches(result *[]*model.HCV_view_seat_room, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_view_seat_roomDo) Attrs(attrs ...field.AssignExpr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_view_seat_roomDo) Assign(attrs ...field.AssignExpr) IHCV_view_seat_roomDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_view_seat_roomDo) Joins(fields ...field.RelationField) IHCV_view_seat_roomDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_view_seat_roomDo) Preload(fields ...field.RelationField) IHCV_view_seat_roomDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_view_seat_roomDo) FirstOrInit() (*model.HCV_view_seat_room, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_room), nil
	}
}

func (h hCV_view_seat_roomDo) FirstOrCreate() (*model.HCV_view_seat_room, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_room), nil
	}
}

func (h hCV_view_seat_roomDo) FindByPage(offset int, limit int) (result []*model.HCV_view_seat_room, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_view_seat_roomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_view_seat_roomDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_view_seat_roomDo) Delete(models ...*model.HCV_view_seat_room) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_view_seat_roomDo) withDO(do gen.Dao) *hCV_view_seat_roomDo {
	h.DO = *do.(*gen.DO)
	return h
}
