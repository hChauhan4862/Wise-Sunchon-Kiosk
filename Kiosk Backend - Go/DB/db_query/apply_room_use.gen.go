// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newAPPLYROOMUSE(db *gorm.DB, opts ...gen.DOOption) aPPLYROOMUSE {
	_aPPLYROOMUSE := aPPLYROOMUSE{}

	_aPPLYROOMUSE.aPPLYROOMUSEDo.UseDB(db, opts...)
	_aPPLYROOMUSE.aPPLYROOMUSEDo.UseModel(&model.APPLYROOMUSE{})

	tableName := _aPPLYROOMUSE.aPPLYROOMUSEDo.TableName()
	_aPPLYROOMUSE.ALL = field.NewAsterisk(tableName)
	_aPPLYROOMUSE.ACYEAR = field.NewString(tableName, "AC_YEAR")
	_aPPLYROOMUSE.ACTERM = field.NewString(tableName, "AC_TERM")
	_aPPLYROOMUSE.DEGREE = field.NewString(tableName, "DEGREE")
	_aPPLYROOMUSE.SECTION = field.NewString(tableName, "SECTION")
	_aPPLYROOMUSE.COURSECODE = field.NewString(tableName, "COURSE_CODE")
	_aPPLYROOMUSE.CLASSDATE = field.NewString(tableName, "CLASS_DATE")
	_aPPLYROOMUSE.STUDENTID = field.NewString(tableName, "STUDENT_ID")
	_aPPLYROOMUSE.STARTTIME = field.NewString(tableName, "START_TIME")
	_aPPLYROOMUSE.ENDTIME = field.NewString(tableName, "END_TIME")
	_aPPLYROOMUSE.KIOSKNO = field.NewString(tableName, "KIOSK_NO")
	_aPPLYROOMUSE.ROOMNAME = field.NewString(tableName, "ROOM_NAME")
	_aPPLYROOMUSE.SEATNO = field.NewString(tableName, "SEAT_NO")
	_aPPLYROOMUSE.STUDENTNAME = field.NewString(tableName, "STUDENT_NAME")
	_aPPLYROOMUSE.STUDENTPHOTO = field.NewString(tableName, "STUDENT_PHOTO")
	_aPPLYROOMUSE.INSERTDATE = field.NewString(tableName, "INSERT_DATE")
	_aPPLYROOMUSE.UPDATEDATE = field.NewString(tableName, "UPDATE_DATE")
	_aPPLYROOMUSE.BIGO = field.NewString(tableName, "BIGO")

	_aPPLYROOMUSE.fillFieldMap()

	return _aPPLYROOMUSE
}

type aPPLYROOMUSE struct {
	aPPLYROOMUSEDo

	ALL          field.Asterisk
	ACYEAR       field.String
	ACTERM       field.String
	DEGREE       field.String
	SECTION      field.String
	COURSECODE   field.String
	CLASSDATE    field.String
	STUDENTID    field.String
	STARTTIME    field.String
	ENDTIME      field.String
	KIOSKNO      field.String
	ROOMNAME     field.String
	SEATNO       field.String
	STUDENTNAME  field.String
	STUDENTPHOTO field.String
	INSERTDATE   field.String
	UPDATEDATE   field.String
	BIGO         field.String

	fieldMap map[string]field.Expr
}

func (a aPPLYROOMUSE) Table(newTableName string) *aPPLYROOMUSE {
	a.aPPLYROOMUSEDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPPLYROOMUSE) As(alias string) *aPPLYROOMUSE {
	a.aPPLYROOMUSEDo.DO = *(a.aPPLYROOMUSEDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPPLYROOMUSE) updateTableName(table string) *aPPLYROOMUSE {
	a.ALL = field.NewAsterisk(table)
	a.ACYEAR = field.NewString(table, "AC_YEAR")
	a.ACTERM = field.NewString(table, "AC_TERM")
	a.DEGREE = field.NewString(table, "DEGREE")
	a.SECTION = field.NewString(table, "SECTION")
	a.COURSECODE = field.NewString(table, "COURSE_CODE")
	a.CLASSDATE = field.NewString(table, "CLASS_DATE")
	a.STUDENTID = field.NewString(table, "STUDENT_ID")
	a.STARTTIME = field.NewString(table, "START_TIME")
	a.ENDTIME = field.NewString(table, "END_TIME")
	a.KIOSKNO = field.NewString(table, "KIOSK_NO")
	a.ROOMNAME = field.NewString(table, "ROOM_NAME")
	a.SEATNO = field.NewString(table, "SEAT_NO")
	a.STUDENTNAME = field.NewString(table, "STUDENT_NAME")
	a.STUDENTPHOTO = field.NewString(table, "STUDENT_PHOTO")
	a.INSERTDATE = field.NewString(table, "INSERT_DATE")
	a.UPDATEDATE = field.NewString(table, "UPDATE_DATE")
	a.BIGO = field.NewString(table, "BIGO")

	a.fillFieldMap()

	return a
}

func (a *aPPLYROOMUSE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPPLYROOMUSE) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 17)
	a.fieldMap["AC_YEAR"] = a.ACYEAR
	a.fieldMap["AC_TERM"] = a.ACTERM
	a.fieldMap["DEGREE"] = a.DEGREE
	a.fieldMap["SECTION"] = a.SECTION
	a.fieldMap["COURSE_CODE"] = a.COURSECODE
	a.fieldMap["CLASS_DATE"] = a.CLASSDATE
	a.fieldMap["STUDENT_ID"] = a.STUDENTID
	a.fieldMap["START_TIME"] = a.STARTTIME
	a.fieldMap["END_TIME"] = a.ENDTIME
	a.fieldMap["KIOSK_NO"] = a.KIOSKNO
	a.fieldMap["ROOM_NAME"] = a.ROOMNAME
	a.fieldMap["SEAT_NO"] = a.SEATNO
	a.fieldMap["STUDENT_NAME"] = a.STUDENTNAME
	a.fieldMap["STUDENT_PHOTO"] = a.STUDENTPHOTO
	a.fieldMap["INSERT_DATE"] = a.INSERTDATE
	a.fieldMap["UPDATE_DATE"] = a.UPDATEDATE
	a.fieldMap["BIGO"] = a.BIGO
}

func (a aPPLYROOMUSE) clone(db *gorm.DB) aPPLYROOMUSE {
	a.aPPLYROOMUSEDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPPLYROOMUSE) replaceDB(db *gorm.DB) aPPLYROOMUSE {
	a.aPPLYROOMUSEDo.ReplaceDB(db)
	return a
}

type aPPLYROOMUSEDo struct{ gen.DO }

type IAPPLYROOMUSEDo interface {
	gen.SubQuery
	Debug() IAPPLYROOMUSEDo
	WithContext(ctx context.Context) IAPPLYROOMUSEDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPPLYROOMUSEDo
	WriteDB() IAPPLYROOMUSEDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPPLYROOMUSEDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPPLYROOMUSEDo
	Not(conds ...gen.Condition) IAPPLYROOMUSEDo
	Or(conds ...gen.Condition) IAPPLYROOMUSEDo
	Select(conds ...field.Expr) IAPPLYROOMUSEDo
	Where(conds ...gen.Condition) IAPPLYROOMUSEDo
	Order(conds ...field.Expr) IAPPLYROOMUSEDo
	Distinct(cols ...field.Expr) IAPPLYROOMUSEDo
	Omit(cols ...field.Expr) IAPPLYROOMUSEDo
	Join(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo
	Group(cols ...field.Expr) IAPPLYROOMUSEDo
	Having(conds ...gen.Condition) IAPPLYROOMUSEDo
	Limit(limit int) IAPPLYROOMUSEDo
	Offset(offset int) IAPPLYROOMUSEDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYROOMUSEDo
	Unscoped() IAPPLYROOMUSEDo
	Create(values ...*model.APPLYROOMUSE) error
	CreateInBatches(values []*model.APPLYROOMUSE, batchSize int) error
	Save(values ...*model.APPLYROOMUSE) error
	First() (*model.APPLYROOMUSE, error)
	Take() (*model.APPLYROOMUSE, error)
	Last() (*model.APPLYROOMUSE, error)
	Find() ([]*model.APPLYROOMUSE, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYROOMUSE, err error)
	FindInBatches(result *[]*model.APPLYROOMUSE, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.APPLYROOMUSE) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPPLYROOMUSEDo
	Assign(attrs ...field.AssignExpr) IAPPLYROOMUSEDo
	Joins(fields ...field.RelationField) IAPPLYROOMUSEDo
	Preload(fields ...field.RelationField) IAPPLYROOMUSEDo
	FirstOrInit() (*model.APPLYROOMUSE, error)
	FirstOrCreate() (*model.APPLYROOMUSE, error)
	FindByPage(offset int, limit int) (result []*model.APPLYROOMUSE, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPPLYROOMUSEDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPPLYROOMUSEDo) Debug() IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Debug())
}

func (a aPPLYROOMUSEDo) WithContext(ctx context.Context) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPPLYROOMUSEDo) ReadDB() IAPPLYROOMUSEDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPPLYROOMUSEDo) WriteDB() IAPPLYROOMUSEDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPPLYROOMUSEDo) Session(config *gorm.Session) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPPLYROOMUSEDo) Clauses(conds ...clause.Expression) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPPLYROOMUSEDo) Returning(value interface{}, columns ...string) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPPLYROOMUSEDo) Not(conds ...gen.Condition) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPPLYROOMUSEDo) Or(conds ...gen.Condition) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPPLYROOMUSEDo) Select(conds ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPPLYROOMUSEDo) Where(conds ...gen.Condition) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPPLYROOMUSEDo) Order(conds ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPPLYROOMUSEDo) Distinct(cols ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPPLYROOMUSEDo) Omit(cols ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPPLYROOMUSEDo) Join(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPPLYROOMUSEDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPPLYROOMUSEDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPPLYROOMUSEDo) Group(cols ...field.Expr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPPLYROOMUSEDo) Having(conds ...gen.Condition) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPPLYROOMUSEDo) Limit(limit int) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPPLYROOMUSEDo) Offset(offset int) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPPLYROOMUSEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPPLYROOMUSEDo) Unscoped() IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPPLYROOMUSEDo) Create(values ...*model.APPLYROOMUSE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPPLYROOMUSEDo) CreateInBatches(values []*model.APPLYROOMUSE, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPPLYROOMUSEDo) Save(values ...*model.APPLYROOMUSE) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPPLYROOMUSEDo) First() (*model.APPLYROOMUSE, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYROOMUSE), nil
	}
}

func (a aPPLYROOMUSEDo) Take() (*model.APPLYROOMUSE, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYROOMUSE), nil
	}
}

func (a aPPLYROOMUSEDo) Last() (*model.APPLYROOMUSE, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYROOMUSE), nil
	}
}

func (a aPPLYROOMUSEDo) Find() ([]*model.APPLYROOMUSE, error) {
	result, err := a.DO.Find()
	return result.([]*model.APPLYROOMUSE), err
}

func (a aPPLYROOMUSEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.APPLYROOMUSE, err error) {
	buf := make([]*model.APPLYROOMUSE, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPPLYROOMUSEDo) FindInBatches(result *[]*model.APPLYROOMUSE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPPLYROOMUSEDo) Attrs(attrs ...field.AssignExpr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPPLYROOMUSEDo) Assign(attrs ...field.AssignExpr) IAPPLYROOMUSEDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPPLYROOMUSEDo) Joins(fields ...field.RelationField) IAPPLYROOMUSEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPPLYROOMUSEDo) Preload(fields ...field.RelationField) IAPPLYROOMUSEDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPPLYROOMUSEDo) FirstOrInit() (*model.APPLYROOMUSE, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYROOMUSE), nil
	}
}

func (a aPPLYROOMUSEDo) FirstOrCreate() (*model.APPLYROOMUSE, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.APPLYROOMUSE), nil
	}
}

func (a aPPLYROOMUSEDo) FindByPage(offset int, limit int) (result []*model.APPLYROOMUSE, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPPLYROOMUSEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPPLYROOMUSEDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPPLYROOMUSEDo) Delete(models ...*model.APPLYROOMUSE) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPPLYROOMUSEDo) withDO(do gen.Dao) *aPPLYROOMUSEDo {
	a.DO = *do.(*gen.DO)
	return a
}
