// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseDroomLimit(db *gorm.DB, opts ...gen.DOOption) wiseDroomLimit {
	_wiseDroomLimit := wiseDroomLimit{}

	_wiseDroomLimit.wiseDroomLimitDo.UseDB(db, opts...)
	_wiseDroomLimit.wiseDroomLimitDo.UseModel(&model.WiseDroomLimit{})

	tableName := _wiseDroomLimit.wiseDroomLimitDo.TableName()
	_wiseDroomLimit.ALL = field.NewAsterisk(tableName)
	_wiseDroomLimit.DroomNo = field.NewInt64(tableName, "droom_no")
	_wiseDroomLimit.DroomName = field.NewString(tableName, "droom_name")
	_wiseDroomLimit.StartDate = field.NewString(tableName, "start_date")
	_wiseDroomLimit.EndDate = field.NewString(tableName, "end_date")
	_wiseDroomLimit.ComStime = field.NewString(tableName, "com_stime")
	_wiseDroomLimit.ComEtime = field.NewString(tableName, "com_etime")
	_wiseDroomLimit.SatStime = field.NewString(tableName, "sat_stime")
	_wiseDroomLimit.SatEtime = field.NewString(tableName, "sat_etime")
	_wiseDroomLimit.SatUseYn = field.NewString(tableName, "sat_use_yn")
	_wiseDroomLimit.ReserveDayCnt = field.NewInt64(tableName, "reserve_day_cnt")
	_wiseDroomLimit.InputTime = field.NewString(tableName, "input_time")
	_wiseDroomLimit.Bigo = field.NewString(tableName, "bigo")
	_wiseDroomLimit.SunStime = field.NewString(tableName, "sun_stime")
	_wiseDroomLimit.SunEtime = field.NewString(tableName, "sun_etime")
	_wiseDroomLimit.SunUseYn = field.NewString(tableName, "sun_use_yn")
	_wiseDroomLimit.PatLimit = field.NewString(tableName, "pat_limit")

	_wiseDroomLimit.fillFieldMap()

	return _wiseDroomLimit
}

type wiseDroomLimit struct {
	wiseDroomLimitDo

	ALL           field.Asterisk
	DroomNo       field.Int64
	DroomName     field.String
	StartDate     field.String
	EndDate       field.String
	ComStime      field.String
	ComEtime      field.String
	SatStime      field.String
	SatEtime      field.String
	SatUseYn      field.String
	ReserveDayCnt field.Int64
	InputTime     field.String
	Bigo          field.String
	SunStime      field.String
	SunEtime      field.String
	SunUseYn      field.String
	PatLimit      field.String

	fieldMap map[string]field.Expr
}

func (w wiseDroomLimit) Table(newTableName string) *wiseDroomLimit {
	w.wiseDroomLimitDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseDroomLimit) As(alias string) *wiseDroomLimit {
	w.wiseDroomLimitDo.DO = *(w.wiseDroomLimitDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseDroomLimit) updateTableName(table string) *wiseDroomLimit {
	w.ALL = field.NewAsterisk(table)
	w.DroomNo = field.NewInt64(table, "droom_no")
	w.DroomName = field.NewString(table, "droom_name")
	w.StartDate = field.NewString(table, "start_date")
	w.EndDate = field.NewString(table, "end_date")
	w.ComStime = field.NewString(table, "com_stime")
	w.ComEtime = field.NewString(table, "com_etime")
	w.SatStime = field.NewString(table, "sat_stime")
	w.SatEtime = field.NewString(table, "sat_etime")
	w.SatUseYn = field.NewString(table, "sat_use_yn")
	w.ReserveDayCnt = field.NewInt64(table, "reserve_day_cnt")
	w.InputTime = field.NewString(table, "input_time")
	w.Bigo = field.NewString(table, "bigo")
	w.SunStime = field.NewString(table, "sun_stime")
	w.SunEtime = field.NewString(table, "sun_etime")
	w.SunUseYn = field.NewString(table, "sun_use_yn")
	w.PatLimit = field.NewString(table, "pat_limit")

	w.fillFieldMap()

	return w
}

func (w *wiseDroomLimit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseDroomLimit) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["droom_no"] = w.DroomNo
	w.fieldMap["droom_name"] = w.DroomName
	w.fieldMap["start_date"] = w.StartDate
	w.fieldMap["end_date"] = w.EndDate
	w.fieldMap["com_stime"] = w.ComStime
	w.fieldMap["com_etime"] = w.ComEtime
	w.fieldMap["sat_stime"] = w.SatStime
	w.fieldMap["sat_etime"] = w.SatEtime
	w.fieldMap["sat_use_yn"] = w.SatUseYn
	w.fieldMap["reserve_day_cnt"] = w.ReserveDayCnt
	w.fieldMap["input_time"] = w.InputTime
	w.fieldMap["bigo"] = w.Bigo
	w.fieldMap["sun_stime"] = w.SunStime
	w.fieldMap["sun_etime"] = w.SunEtime
	w.fieldMap["sun_use_yn"] = w.SunUseYn
	w.fieldMap["pat_limit"] = w.PatLimit
}

func (w wiseDroomLimit) clone(db *gorm.DB) wiseDroomLimit {
	w.wiseDroomLimitDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseDroomLimit) replaceDB(db *gorm.DB) wiseDroomLimit {
	w.wiseDroomLimitDo.ReplaceDB(db)
	return w
}

type wiseDroomLimitDo struct{ gen.DO }

type IWiseDroomLimitDo interface {
	gen.SubQuery
	Debug() IWiseDroomLimitDo
	WithContext(ctx context.Context) IWiseDroomLimitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseDroomLimitDo
	WriteDB() IWiseDroomLimitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseDroomLimitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseDroomLimitDo
	Not(conds ...gen.Condition) IWiseDroomLimitDo
	Or(conds ...gen.Condition) IWiseDroomLimitDo
	Select(conds ...field.Expr) IWiseDroomLimitDo
	Where(conds ...gen.Condition) IWiseDroomLimitDo
	Order(conds ...field.Expr) IWiseDroomLimitDo
	Distinct(cols ...field.Expr) IWiseDroomLimitDo
	Omit(cols ...field.Expr) IWiseDroomLimitDo
	Join(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo
	Group(cols ...field.Expr) IWiseDroomLimitDo
	Having(conds ...gen.Condition) IWiseDroomLimitDo
	Limit(limit int) IWiseDroomLimitDo
	Offset(offset int) IWiseDroomLimitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseDroomLimitDo
	Unscoped() IWiseDroomLimitDo
	Create(values ...*model.WiseDroomLimit) error
	CreateInBatches(values []*model.WiseDroomLimit, batchSize int) error
	Save(values ...*model.WiseDroomLimit) error
	First() (*model.WiseDroomLimit, error)
	Take() (*model.WiseDroomLimit, error)
	Last() (*model.WiseDroomLimit, error)
	Find() ([]*model.WiseDroomLimit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseDroomLimit, err error)
	FindInBatches(result *[]*model.WiseDroomLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseDroomLimit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseDroomLimitDo
	Assign(attrs ...field.AssignExpr) IWiseDroomLimitDo
	Joins(fields ...field.RelationField) IWiseDroomLimitDo
	Preload(fields ...field.RelationField) IWiseDroomLimitDo
	FirstOrInit() (*model.WiseDroomLimit, error)
	FirstOrCreate() (*model.WiseDroomLimit, error)
	FindByPage(offset int, limit int) (result []*model.WiseDroomLimit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseDroomLimitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseDroomLimitDo) Debug() IWiseDroomLimitDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseDroomLimitDo) WithContext(ctx context.Context) IWiseDroomLimitDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseDroomLimitDo) ReadDB() IWiseDroomLimitDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseDroomLimitDo) WriteDB() IWiseDroomLimitDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseDroomLimitDo) Session(config *gorm.Session) IWiseDroomLimitDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseDroomLimitDo) Clauses(conds ...clause.Expression) IWiseDroomLimitDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseDroomLimitDo) Returning(value interface{}, columns ...string) IWiseDroomLimitDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseDroomLimitDo) Not(conds ...gen.Condition) IWiseDroomLimitDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseDroomLimitDo) Or(conds ...gen.Condition) IWiseDroomLimitDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseDroomLimitDo) Select(conds ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseDroomLimitDo) Where(conds ...gen.Condition) IWiseDroomLimitDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseDroomLimitDo) Order(conds ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseDroomLimitDo) Distinct(cols ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseDroomLimitDo) Omit(cols ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseDroomLimitDo) Join(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseDroomLimitDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseDroomLimitDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseDroomLimitDo) Group(cols ...field.Expr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseDroomLimitDo) Having(conds ...gen.Condition) IWiseDroomLimitDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseDroomLimitDo) Limit(limit int) IWiseDroomLimitDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseDroomLimitDo) Offset(offset int) IWiseDroomLimitDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseDroomLimitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseDroomLimitDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseDroomLimitDo) Unscoped() IWiseDroomLimitDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseDroomLimitDo) Create(values ...*model.WiseDroomLimit) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseDroomLimitDo) CreateInBatches(values []*model.WiseDroomLimit, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseDroomLimitDo) Save(values ...*model.WiseDroomLimit) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseDroomLimitDo) First() (*model.WiseDroomLimit, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomLimit), nil
	}
}

func (w wiseDroomLimitDo) Take() (*model.WiseDroomLimit, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomLimit), nil
	}
}

func (w wiseDroomLimitDo) Last() (*model.WiseDroomLimit, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomLimit), nil
	}
}

func (w wiseDroomLimitDo) Find() ([]*model.WiseDroomLimit, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseDroomLimit), err
}

func (w wiseDroomLimitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseDroomLimit, err error) {
	buf := make([]*model.WiseDroomLimit, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseDroomLimitDo) FindInBatches(result *[]*model.WiseDroomLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseDroomLimitDo) Attrs(attrs ...field.AssignExpr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseDroomLimitDo) Assign(attrs ...field.AssignExpr) IWiseDroomLimitDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseDroomLimitDo) Joins(fields ...field.RelationField) IWiseDroomLimitDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseDroomLimitDo) Preload(fields ...field.RelationField) IWiseDroomLimitDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseDroomLimitDo) FirstOrInit() (*model.WiseDroomLimit, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomLimit), nil
	}
}

func (w wiseDroomLimitDo) FirstOrCreate() (*model.WiseDroomLimit, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseDroomLimit), nil
	}
}

func (w wiseDroomLimitDo) FindByPage(offset int, limit int) (result []*model.WiseDroomLimit, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseDroomLimitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseDroomLimitDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseDroomLimitDo) Delete(models ...*model.WiseDroomLimit) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseDroomLimitDo) withDO(do gen.Dao) *wiseDroomLimitDo {
	w.DO = *do.(*gen.DO)
	return w
}
