// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatUse(db *gorm.DB, opts ...gen.DOOption) seatUse {
	_seatUse := seatUse{}

	_seatUse.seatUseDo.UseDB(db, opts...)
	_seatUse.seatUseDo.UseModel(&model.SeatUse{})

	tableName := _seatUse.seatUseDo.TableName()
	_seatUse.ALL = field.NewAsterisk(tableName)
	_seatUse.KioskNo = field.NewInt64(tableName, "kiosk_no")
	_seatUse.RoomNo = field.NewInt64(tableName, "room_no")
	_seatUse.SeatNo = field.NewInt64(tableName, "seat_no")
	_seatUse.UserID = field.NewString(tableName, "user_id")
	_seatUse.StartTime = field.NewString(tableName, "start_time")
	_seatUse.EndTime = field.NewString(tableName, "end_time")
	_seatUse.ContCnt = field.NewInt64(tableName, "cont_cnt")
	_seatUse.PatType = field.NewString(tableName, "pat_type")
	_seatUse.DeptCode = field.NewString(tableName, "dept_code")
	_seatUse.SeatBigo = field.NewString(tableName, "seat_bigo")
	_seatUse.ManGubun = field.NewString(tableName, "man_gubun")
	_seatUse.GateOutTime = field.NewString(tableName, "gate_out_time")
	_seatUse.GateInTime = field.NewString(tableName, "gate_in_time")
	_seatUse.ReserveTime = field.NewString(tableName, "reserve_time")

	_seatUse.fillFieldMap()

	return _seatUse
}

type seatUse struct {
	seatUseDo

	ALL         field.Asterisk
	KioskNo     field.Int64
	RoomNo      field.Int64
	SeatNo      field.Int64
	UserID      field.String
	StartTime   field.String
	EndTime     field.String
	ContCnt     field.Int64
	PatType     field.String
	DeptCode    field.String
	SeatBigo    field.String
	ManGubun    field.String
	GateOutTime field.String
	GateInTime  field.String
	ReserveTime field.String

	fieldMap map[string]field.Expr
}

func (s seatUse) Table(newTableName string) *seatUse {
	s.seatUseDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatUse) As(alias string) *seatUse {
	s.seatUseDo.DO = *(s.seatUseDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatUse) updateTableName(table string) *seatUse {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "kiosk_no")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.UserID = field.NewString(table, "user_id")
	s.StartTime = field.NewString(table, "start_time")
	s.EndTime = field.NewString(table, "end_time")
	s.ContCnt = field.NewInt64(table, "cont_cnt")
	s.PatType = field.NewString(table, "pat_type")
	s.DeptCode = field.NewString(table, "dept_code")
	s.SeatBigo = field.NewString(table, "seat_bigo")
	s.ManGubun = field.NewString(table, "man_gubun")
	s.GateOutTime = field.NewString(table, "gate_out_time")
	s.GateInTime = field.NewString(table, "gate_in_time")
	s.ReserveTime = field.NewString(table, "reserve_time")

	s.fillFieldMap()

	return s
}

func (s *seatUse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatUse) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["kiosk_no"] = s.KioskNo
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["start_time"] = s.StartTime
	s.fieldMap["end_time"] = s.EndTime
	s.fieldMap["cont_cnt"] = s.ContCnt
	s.fieldMap["pat_type"] = s.PatType
	s.fieldMap["dept_code"] = s.DeptCode
	s.fieldMap["seat_bigo"] = s.SeatBigo
	s.fieldMap["man_gubun"] = s.ManGubun
	s.fieldMap["gate_out_time"] = s.GateOutTime
	s.fieldMap["gate_in_time"] = s.GateInTime
	s.fieldMap["reserve_time"] = s.ReserveTime
}

func (s seatUse) clone(db *gorm.DB) seatUse {
	s.seatUseDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatUse) replaceDB(db *gorm.DB) seatUse {
	s.seatUseDo.ReplaceDB(db)
	return s
}

type seatUseDo struct{ gen.DO }

type ISeatUseDo interface {
	gen.SubQuery
	Debug() ISeatUseDo
	WithContext(ctx context.Context) ISeatUseDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatUseDo
	WriteDB() ISeatUseDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatUseDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatUseDo
	Not(conds ...gen.Condition) ISeatUseDo
	Or(conds ...gen.Condition) ISeatUseDo
	Select(conds ...field.Expr) ISeatUseDo
	Where(conds ...gen.Condition) ISeatUseDo
	Order(conds ...field.Expr) ISeatUseDo
	Distinct(cols ...field.Expr) ISeatUseDo
	Omit(cols ...field.Expr) ISeatUseDo
	Join(table schema.Tabler, on ...field.Expr) ISeatUseDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatUseDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatUseDo
	Group(cols ...field.Expr) ISeatUseDo
	Having(conds ...gen.Condition) ISeatUseDo
	Limit(limit int) ISeatUseDo
	Offset(offset int) ISeatUseDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatUseDo
	Unscoped() ISeatUseDo
	Create(values ...*model.SeatUse) error
	CreateInBatches(values []*model.SeatUse, batchSize int) error
	Save(values ...*model.SeatUse) error
	First() (*model.SeatUse, error)
	Take() (*model.SeatUse, error)
	Last() (*model.SeatUse, error)
	Find() ([]*model.SeatUse, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatUse, err error)
	FindInBatches(result *[]*model.SeatUse, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatUse) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatUseDo
	Assign(attrs ...field.AssignExpr) ISeatUseDo
	Joins(fields ...field.RelationField) ISeatUseDo
	Preload(fields ...field.RelationField) ISeatUseDo
	FirstOrInit() (*model.SeatUse, error)
	FirstOrCreate() (*model.SeatUse, error)
	FindByPage(offset int, limit int) (result []*model.SeatUse, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatUseDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatUseDo) Debug() ISeatUseDo {
	return s.withDO(s.DO.Debug())
}

func (s seatUseDo) WithContext(ctx context.Context) ISeatUseDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatUseDo) ReadDB() ISeatUseDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatUseDo) WriteDB() ISeatUseDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatUseDo) Session(config *gorm.Session) ISeatUseDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatUseDo) Clauses(conds ...clause.Expression) ISeatUseDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatUseDo) Returning(value interface{}, columns ...string) ISeatUseDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatUseDo) Not(conds ...gen.Condition) ISeatUseDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatUseDo) Or(conds ...gen.Condition) ISeatUseDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatUseDo) Select(conds ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatUseDo) Where(conds ...gen.Condition) ISeatUseDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatUseDo) Order(conds ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatUseDo) Distinct(cols ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatUseDo) Omit(cols ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatUseDo) Join(table schema.Tabler, on ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatUseDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatUseDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatUseDo) Group(cols ...field.Expr) ISeatUseDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatUseDo) Having(conds ...gen.Condition) ISeatUseDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatUseDo) Limit(limit int) ISeatUseDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatUseDo) Offset(offset int) ISeatUseDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatUseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatUseDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatUseDo) Unscoped() ISeatUseDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatUseDo) Create(values ...*model.SeatUse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatUseDo) CreateInBatches(values []*model.SeatUse, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatUseDo) Save(values ...*model.SeatUse) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatUseDo) First() (*model.SeatUse, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUse), nil
	}
}

func (s seatUseDo) Take() (*model.SeatUse, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUse), nil
	}
}

func (s seatUseDo) Last() (*model.SeatUse, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUse), nil
	}
}

func (s seatUseDo) Find() ([]*model.SeatUse, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatUse), err
}

func (s seatUseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatUse, err error) {
	buf := make([]*model.SeatUse, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatUseDo) FindInBatches(result *[]*model.SeatUse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatUseDo) Attrs(attrs ...field.AssignExpr) ISeatUseDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatUseDo) Assign(attrs ...field.AssignExpr) ISeatUseDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatUseDo) Joins(fields ...field.RelationField) ISeatUseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatUseDo) Preload(fields ...field.RelationField) ISeatUseDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatUseDo) FirstOrInit() (*model.SeatUse, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUse), nil
	}
}

func (s seatUseDo) FirstOrCreate() (*model.SeatUse, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatUse), nil
	}
}

func (s seatUseDo) FindByPage(offset int, limit int) (result []*model.SeatUse, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatUseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatUseDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatUseDo) Delete(models ...*model.SeatUse) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatUseDo) withDO(do gen.Dao) *seatUseDo {
	s.DO = *do.(*gen.DO)
	return s
}
