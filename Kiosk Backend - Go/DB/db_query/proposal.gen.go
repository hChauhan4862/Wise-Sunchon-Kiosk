// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newProposal(db *gorm.DB, opts ...gen.DOOption) proposal {
	_proposal := proposal{}

	_proposal.proposalDo.UseDB(db, opts...)
	_proposal.proposalDo.UseModel(&model.Proposal{})

	tableName := _proposal.proposalDo.TableName()
	_proposal.ALL = field.NewAsterisk(tableName)
	_proposal.PropID = field.NewInt64(tableName, "prop_id")
	_proposal.UserID = field.NewString(tableName, "user_id")
	_proposal.UserName = field.NewString(tableName, "user_name")
	_proposal.PropTitle = field.NewString(tableName, "prop_title")
	_proposal.PropContent = field.NewString(tableName, "prop_content")
	_proposal.DelYn = field.NewString(tableName, "del_yn")
	_proposal.RegDt = field.NewString(tableName, "reg_dt")
	_proposal.ANSWERYN = field.NewString(tableName, "ANSWER_YN")

	_proposal.fillFieldMap()

	return _proposal
}

type proposal struct {
	proposalDo

	ALL         field.Asterisk
	PropID      field.Int64
	UserID      field.String
	UserName    field.String
	PropTitle   field.String
	PropContent field.String
	DelYn       field.String
	RegDt       field.String
	ANSWERYN    field.String

	fieldMap map[string]field.Expr
}

func (p proposal) Table(newTableName string) *proposal {
	p.proposalDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proposal) As(alias string) *proposal {
	p.proposalDo.DO = *(p.proposalDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proposal) updateTableName(table string) *proposal {
	p.ALL = field.NewAsterisk(table)
	p.PropID = field.NewInt64(table, "prop_id")
	p.UserID = field.NewString(table, "user_id")
	p.UserName = field.NewString(table, "user_name")
	p.PropTitle = field.NewString(table, "prop_title")
	p.PropContent = field.NewString(table, "prop_content")
	p.DelYn = field.NewString(table, "del_yn")
	p.RegDt = field.NewString(table, "reg_dt")
	p.ANSWERYN = field.NewString(table, "ANSWER_YN")

	p.fillFieldMap()

	return p
}

func (p *proposal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proposal) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["prop_id"] = p.PropID
	p.fieldMap["user_id"] = p.UserID
	p.fieldMap["user_name"] = p.UserName
	p.fieldMap["prop_title"] = p.PropTitle
	p.fieldMap["prop_content"] = p.PropContent
	p.fieldMap["del_yn"] = p.DelYn
	p.fieldMap["reg_dt"] = p.RegDt
	p.fieldMap["ANSWER_YN"] = p.ANSWERYN
}

func (p proposal) clone(db *gorm.DB) proposal {
	p.proposalDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proposal) replaceDB(db *gorm.DB) proposal {
	p.proposalDo.ReplaceDB(db)
	return p
}

type proposalDo struct{ gen.DO }

type IProposalDo interface {
	gen.SubQuery
	Debug() IProposalDo
	WithContext(ctx context.Context) IProposalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProposalDo
	WriteDB() IProposalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProposalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProposalDo
	Not(conds ...gen.Condition) IProposalDo
	Or(conds ...gen.Condition) IProposalDo
	Select(conds ...field.Expr) IProposalDo
	Where(conds ...gen.Condition) IProposalDo
	Order(conds ...field.Expr) IProposalDo
	Distinct(cols ...field.Expr) IProposalDo
	Omit(cols ...field.Expr) IProposalDo
	Join(table schema.Tabler, on ...field.Expr) IProposalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProposalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProposalDo
	Group(cols ...field.Expr) IProposalDo
	Having(conds ...gen.Condition) IProposalDo
	Limit(limit int) IProposalDo
	Offset(offset int) IProposalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProposalDo
	Unscoped() IProposalDo
	Create(values ...*model.Proposal) error
	CreateInBatches(values []*model.Proposal, batchSize int) error
	Save(values ...*model.Proposal) error
	First() (*model.Proposal, error)
	Take() (*model.Proposal, error)
	Last() (*model.Proposal, error)
	Find() ([]*model.Proposal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Proposal, err error)
	FindInBatches(result *[]*model.Proposal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Proposal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProposalDo
	Assign(attrs ...field.AssignExpr) IProposalDo
	Joins(fields ...field.RelationField) IProposalDo
	Preload(fields ...field.RelationField) IProposalDo
	FirstOrInit() (*model.Proposal, error)
	FirstOrCreate() (*model.Proposal, error)
	FindByPage(offset int, limit int) (result []*model.Proposal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProposalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p proposalDo) Debug() IProposalDo {
	return p.withDO(p.DO.Debug())
}

func (p proposalDo) WithContext(ctx context.Context) IProposalDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proposalDo) ReadDB() IProposalDo {
	return p.Clauses(dbresolver.Read)
}

func (p proposalDo) WriteDB() IProposalDo {
	return p.Clauses(dbresolver.Write)
}

func (p proposalDo) Session(config *gorm.Session) IProposalDo {
	return p.withDO(p.DO.Session(config))
}

func (p proposalDo) Clauses(conds ...clause.Expression) IProposalDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proposalDo) Returning(value interface{}, columns ...string) IProposalDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proposalDo) Not(conds ...gen.Condition) IProposalDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proposalDo) Or(conds ...gen.Condition) IProposalDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proposalDo) Select(conds ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proposalDo) Where(conds ...gen.Condition) IProposalDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proposalDo) Order(conds ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proposalDo) Distinct(cols ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proposalDo) Omit(cols ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proposalDo) Join(table schema.Tabler, on ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proposalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProposalDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proposalDo) RightJoin(table schema.Tabler, on ...field.Expr) IProposalDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proposalDo) Group(cols ...field.Expr) IProposalDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proposalDo) Having(conds ...gen.Condition) IProposalDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proposalDo) Limit(limit int) IProposalDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proposalDo) Offset(offset int) IProposalDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proposalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProposalDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proposalDo) Unscoped() IProposalDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proposalDo) Create(values ...*model.Proposal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proposalDo) CreateInBatches(values []*model.Proposal, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proposalDo) Save(values ...*model.Proposal) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proposalDo) First() (*model.Proposal, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proposal), nil
	}
}

func (p proposalDo) Take() (*model.Proposal, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proposal), nil
	}
}

func (p proposalDo) Last() (*model.Proposal, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proposal), nil
	}
}

func (p proposalDo) Find() ([]*model.Proposal, error) {
	result, err := p.DO.Find()
	return result.([]*model.Proposal), err
}

func (p proposalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Proposal, err error) {
	buf := make([]*model.Proposal, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proposalDo) FindInBatches(result *[]*model.Proposal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proposalDo) Attrs(attrs ...field.AssignExpr) IProposalDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proposalDo) Assign(attrs ...field.AssignExpr) IProposalDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proposalDo) Joins(fields ...field.RelationField) IProposalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proposalDo) Preload(fields ...field.RelationField) IProposalDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proposalDo) FirstOrInit() (*model.Proposal, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proposal), nil
	}
}

func (p proposalDo) FirstOrCreate() (*model.Proposal, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Proposal), nil
	}
}

func (p proposalDo) FindByPage(offset int, limit int) (result []*model.Proposal, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proposalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proposalDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proposalDo) Delete(models ...*model.Proposal) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proposalDo) withDO(do gen.Dao) *proposalDo {
	p.DO = *do.(*gen.DO)
	return p
}
