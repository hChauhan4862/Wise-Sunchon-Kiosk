// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseRroomReserve(db *gorm.DB, opts ...gen.DOOption) wiseRroomReserve {
	_wiseRroomReserve := wiseRroomReserve{}

	_wiseRroomReserve.wiseRroomReserveDo.UseDB(db, opts...)
	_wiseRroomReserve.wiseRroomReserveDo.UseModel(&model.WiseRroomReserve{})

	tableName := _wiseRroomReserve.wiseRroomReserveDo.TableName()
	_wiseRroomReserve.ALL = field.NewAsterisk(tableName)
	_wiseRroomReserve.RroomNo = field.NewInt64(tableName, "rroom_no")
	_wiseRroomReserve.RroomName = field.NewString(tableName, "rroom_name")
	_wiseRroomReserve.RroomGubun = field.NewString(tableName, "rroom_gubun")
	_wiseRroomReserve.RroomType = field.NewInt64(tableName, "rroom_type")
	_wiseRroomReserve.UserID = field.NewString(tableName, "user_id")
	_wiseRroomReserve.UserName = field.NewString(tableName, "user_name")
	_wiseRroomReserve.PhoneNumber = field.NewString(tableName, "phone_number")
	_wiseRroomReserve.WaitNo = field.NewInt64(tableName, "wait_no")
	_wiseRroomReserve.ReserveStat = field.NewInt64(tableName, "reserve_stat")
	_wiseRroomReserve.ReserveTime = field.NewString(tableName, "reserve_time")
	_wiseRroomReserve.UseDay = field.NewInt64(tableName, "use_day")
	_wiseRroomReserve.UserComment = field.NewString(tableName, "user_comment")
	_wiseRroomReserve.StartTime = field.NewString(tableName, "start_time")
	_wiseRroomReserve.EndTime = field.NewString(tableName, "end_time")
	_wiseRroomReserve.Bigo = field.NewString(tableName, "bigo")
	_wiseRroomReserve.RroomIndex = field.NewString(tableName, "rroom_index")

	_wiseRroomReserve.fillFieldMap()

	return _wiseRroomReserve
}

type wiseRroomReserve struct {
	wiseRroomReserveDo

	ALL         field.Asterisk
	RroomNo     field.Int64
	RroomName   field.String
	RroomGubun  field.String
	RroomType   field.Int64
	UserID      field.String
	UserName    field.String
	PhoneNumber field.String
	WaitNo      field.Int64
	ReserveStat field.Int64
	ReserveTime field.String
	UseDay      field.Int64
	UserComment field.String
	StartTime   field.String
	EndTime     field.String
	Bigo        field.String
	RroomIndex  field.String

	fieldMap map[string]field.Expr
}

func (w wiseRroomReserve) Table(newTableName string) *wiseRroomReserve {
	w.wiseRroomReserveDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseRroomReserve) As(alias string) *wiseRroomReserve {
	w.wiseRroomReserveDo.DO = *(w.wiseRroomReserveDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseRroomReserve) updateTableName(table string) *wiseRroomReserve {
	w.ALL = field.NewAsterisk(table)
	w.RroomNo = field.NewInt64(table, "rroom_no")
	w.RroomName = field.NewString(table, "rroom_name")
	w.RroomGubun = field.NewString(table, "rroom_gubun")
	w.RroomType = field.NewInt64(table, "rroom_type")
	w.UserID = field.NewString(table, "user_id")
	w.UserName = field.NewString(table, "user_name")
	w.PhoneNumber = field.NewString(table, "phone_number")
	w.WaitNo = field.NewInt64(table, "wait_no")
	w.ReserveStat = field.NewInt64(table, "reserve_stat")
	w.ReserveTime = field.NewString(table, "reserve_time")
	w.UseDay = field.NewInt64(table, "use_day")
	w.UserComment = field.NewString(table, "user_comment")
	w.StartTime = field.NewString(table, "start_time")
	w.EndTime = field.NewString(table, "end_time")
	w.Bigo = field.NewString(table, "bigo")
	w.RroomIndex = field.NewString(table, "rroom_index")

	w.fillFieldMap()

	return w
}

func (w *wiseRroomReserve) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseRroomReserve) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["rroom_no"] = w.RroomNo
	w.fieldMap["rroom_name"] = w.RroomName
	w.fieldMap["rroom_gubun"] = w.RroomGubun
	w.fieldMap["rroom_type"] = w.RroomType
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["user_name"] = w.UserName
	w.fieldMap["phone_number"] = w.PhoneNumber
	w.fieldMap["wait_no"] = w.WaitNo
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["reserve_time"] = w.ReserveTime
	w.fieldMap["use_day"] = w.UseDay
	w.fieldMap["user_comment"] = w.UserComment
	w.fieldMap["start_time"] = w.StartTime
	w.fieldMap["end_time"] = w.EndTime
	w.fieldMap["bigo"] = w.Bigo
	w.fieldMap["rroom_index"] = w.RroomIndex
}

func (w wiseRroomReserve) clone(db *gorm.DB) wiseRroomReserve {
	w.wiseRroomReserveDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseRroomReserve) replaceDB(db *gorm.DB) wiseRroomReserve {
	w.wiseRroomReserveDo.ReplaceDB(db)
	return w
}

type wiseRroomReserveDo struct{ gen.DO }

type IWiseRroomReserveDo interface {
	gen.SubQuery
	Debug() IWiseRroomReserveDo
	WithContext(ctx context.Context) IWiseRroomReserveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseRroomReserveDo
	WriteDB() IWiseRroomReserveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseRroomReserveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseRroomReserveDo
	Not(conds ...gen.Condition) IWiseRroomReserveDo
	Or(conds ...gen.Condition) IWiseRroomReserveDo
	Select(conds ...field.Expr) IWiseRroomReserveDo
	Where(conds ...gen.Condition) IWiseRroomReserveDo
	Order(conds ...field.Expr) IWiseRroomReserveDo
	Distinct(cols ...field.Expr) IWiseRroomReserveDo
	Omit(cols ...field.Expr) IWiseRroomReserveDo
	Join(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo
	Group(cols ...field.Expr) IWiseRroomReserveDo
	Having(conds ...gen.Condition) IWiseRroomReserveDo
	Limit(limit int) IWiseRroomReserveDo
	Offset(offset int) IWiseRroomReserveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomReserveDo
	Unscoped() IWiseRroomReserveDo
	Create(values ...*model.WiseRroomReserve) error
	CreateInBatches(values []*model.WiseRroomReserve, batchSize int) error
	Save(values ...*model.WiseRroomReserve) error
	First() (*model.WiseRroomReserve, error)
	Take() (*model.WiseRroomReserve, error)
	Last() (*model.WiseRroomReserve, error)
	Find() ([]*model.WiseRroomReserve, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroomReserve, err error)
	FindInBatches(result *[]*model.WiseRroomReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseRroomReserve) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseRroomReserveDo
	Assign(attrs ...field.AssignExpr) IWiseRroomReserveDo
	Joins(fields ...field.RelationField) IWiseRroomReserveDo
	Preload(fields ...field.RelationField) IWiseRroomReserveDo
	FirstOrInit() (*model.WiseRroomReserve, error)
	FirstOrCreate() (*model.WiseRroomReserve, error)
	FindByPage(offset int, limit int) (result []*model.WiseRroomReserve, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseRroomReserveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseRroomReserveDo) Debug() IWiseRroomReserveDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseRroomReserveDo) WithContext(ctx context.Context) IWiseRroomReserveDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseRroomReserveDo) ReadDB() IWiseRroomReserveDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseRroomReserveDo) WriteDB() IWiseRroomReserveDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseRroomReserveDo) Session(config *gorm.Session) IWiseRroomReserveDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseRroomReserveDo) Clauses(conds ...clause.Expression) IWiseRroomReserveDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseRroomReserveDo) Returning(value interface{}, columns ...string) IWiseRroomReserveDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseRroomReserveDo) Not(conds ...gen.Condition) IWiseRroomReserveDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseRroomReserveDo) Or(conds ...gen.Condition) IWiseRroomReserveDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseRroomReserveDo) Select(conds ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseRroomReserveDo) Where(conds ...gen.Condition) IWiseRroomReserveDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseRroomReserveDo) Order(conds ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseRroomReserveDo) Distinct(cols ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseRroomReserveDo) Omit(cols ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseRroomReserveDo) Join(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseRroomReserveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseRroomReserveDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseRroomReserveDo) Group(cols ...field.Expr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseRroomReserveDo) Having(conds ...gen.Condition) IWiseRroomReserveDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseRroomReserveDo) Limit(limit int) IWiseRroomReserveDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseRroomReserveDo) Offset(offset int) IWiseRroomReserveDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseRroomReserveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomReserveDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseRroomReserveDo) Unscoped() IWiseRroomReserveDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseRroomReserveDo) Create(values ...*model.WiseRroomReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseRroomReserveDo) CreateInBatches(values []*model.WiseRroomReserve, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseRroomReserveDo) Save(values ...*model.WiseRroomReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseRroomReserveDo) First() (*model.WiseRroomReserve, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomReserve), nil
	}
}

func (w wiseRroomReserveDo) Take() (*model.WiseRroomReserve, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomReserve), nil
	}
}

func (w wiseRroomReserveDo) Last() (*model.WiseRroomReserve, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomReserve), nil
	}
}

func (w wiseRroomReserveDo) Find() ([]*model.WiseRroomReserve, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseRroomReserve), err
}

func (w wiseRroomReserveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroomReserve, err error) {
	buf := make([]*model.WiseRroomReserve, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseRroomReserveDo) FindInBatches(result *[]*model.WiseRroomReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseRroomReserveDo) Attrs(attrs ...field.AssignExpr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseRroomReserveDo) Assign(attrs ...field.AssignExpr) IWiseRroomReserveDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseRroomReserveDo) Joins(fields ...field.RelationField) IWiseRroomReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseRroomReserveDo) Preload(fields ...field.RelationField) IWiseRroomReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseRroomReserveDo) FirstOrInit() (*model.WiseRroomReserve, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomReserve), nil
	}
}

func (w wiseRroomReserveDo) FirstOrCreate() (*model.WiseRroomReserve, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomReserve), nil
	}
}

func (w wiseRroomReserveDo) FindByPage(offset int, limit int) (result []*model.WiseRroomReserve, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseRroomReserveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseRroomReserveDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseRroomReserveDo) Delete(models ...*model.WiseRroomReserve) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseRroomReserveDo) withDO(do gen.Dao) *wiseRroomReserveDo {
	w.DO = *do.(*gen.DO)
	return w
}
