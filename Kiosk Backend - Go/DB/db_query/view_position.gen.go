// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_VIEW_POSITION(db *gorm.DB, opts ...gen.DOOption) hCV_VIEW_POSITION {
	_hCV_VIEW_POSITION := hCV_VIEW_POSITION{}

	_hCV_VIEW_POSITION.hCV_VIEW_POSITIONDo.UseDB(db, opts...)
	_hCV_VIEW_POSITION.hCV_VIEW_POSITIONDo.UseModel(&model.HCV_VIEW_POSITION{})

	tableName := _hCV_VIEW_POSITION.hCV_VIEW_POSITIONDo.TableName()
	_hCV_VIEW_POSITION.ALL = field.NewAsterisk(tableName)
	_hCV_VIEW_POSITION.CODE = field.NewString(tableName, "CODE")
	_hCV_VIEW_POSITION.CODENM = field.NewString(tableName, "CODE_NM")
	_hCV_VIEW_POSITION.DISPORDER = field.NewInt64(tableName, "DISP_ORDER")

	_hCV_VIEW_POSITION.fillFieldMap()

	return _hCV_VIEW_POSITION
}

type hCV_VIEW_POSITION struct {
	hCV_VIEW_POSITIONDo

	ALL       field.Asterisk
	CODE      field.String
	CODENM    field.String
	DISPORDER field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_VIEW_POSITION) Table(newTableName string) *hCV_VIEW_POSITION {
	h.hCV_VIEW_POSITIONDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_VIEW_POSITION) As(alias string) *hCV_VIEW_POSITION {
	h.hCV_VIEW_POSITIONDo.DO = *(h.hCV_VIEW_POSITIONDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_VIEW_POSITION) updateTableName(table string) *hCV_VIEW_POSITION {
	h.ALL = field.NewAsterisk(table)
	h.CODE = field.NewString(table, "CODE")
	h.CODENM = field.NewString(table, "CODE_NM")
	h.DISPORDER = field.NewInt64(table, "DISP_ORDER")

	h.fillFieldMap()

	return h
}

func (h *hCV_VIEW_POSITION) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_VIEW_POSITION) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 3)
	h.fieldMap["CODE"] = h.CODE
	h.fieldMap["CODE_NM"] = h.CODENM
	h.fieldMap["DISP_ORDER"] = h.DISPORDER
}

func (h hCV_VIEW_POSITION) clone(db *gorm.DB) hCV_VIEW_POSITION {
	h.hCV_VIEW_POSITIONDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_VIEW_POSITION) replaceDB(db *gorm.DB) hCV_VIEW_POSITION {
	h.hCV_VIEW_POSITIONDo.ReplaceDB(db)
	return h
}

type hCV_VIEW_POSITIONDo struct{ gen.DO }

type IHCV_VIEW_POSITIONDo interface {
	gen.SubQuery
	Debug() IHCV_VIEW_POSITIONDo
	WithContext(ctx context.Context) IHCV_VIEW_POSITIONDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_VIEW_POSITIONDo
	WriteDB() IHCV_VIEW_POSITIONDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_VIEW_POSITIONDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_VIEW_POSITIONDo
	Not(conds ...gen.Condition) IHCV_VIEW_POSITIONDo
	Or(conds ...gen.Condition) IHCV_VIEW_POSITIONDo
	Select(conds ...field.Expr) IHCV_VIEW_POSITIONDo
	Where(conds ...gen.Condition) IHCV_VIEW_POSITIONDo
	Order(conds ...field.Expr) IHCV_VIEW_POSITIONDo
	Distinct(cols ...field.Expr) IHCV_VIEW_POSITIONDo
	Omit(cols ...field.Expr) IHCV_VIEW_POSITIONDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo
	Group(cols ...field.Expr) IHCV_VIEW_POSITIONDo
	Having(conds ...gen.Condition) IHCV_VIEW_POSITIONDo
	Limit(limit int) IHCV_VIEW_POSITIONDo
	Offset(offset int) IHCV_VIEW_POSITIONDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VIEW_POSITIONDo
	Unscoped() IHCV_VIEW_POSITIONDo
	Create(values ...*model.HCV_VIEW_POSITION) error
	CreateInBatches(values []*model.HCV_VIEW_POSITION, batchSize int) error
	Save(values ...*model.HCV_VIEW_POSITION) error
	First() (*model.HCV_VIEW_POSITION, error)
	Take() (*model.HCV_VIEW_POSITION, error)
	Last() (*model.HCV_VIEW_POSITION, error)
	Find() ([]*model.HCV_VIEW_POSITION, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VIEW_POSITION, err error)
	FindInBatches(result *[]*model.HCV_VIEW_POSITION, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_VIEW_POSITION) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_VIEW_POSITIONDo
	Assign(attrs ...field.AssignExpr) IHCV_VIEW_POSITIONDo
	Joins(fields ...field.RelationField) IHCV_VIEW_POSITIONDo
	Preload(fields ...field.RelationField) IHCV_VIEW_POSITIONDo
	FirstOrInit() (*model.HCV_VIEW_POSITION, error)
	FirstOrCreate() (*model.HCV_VIEW_POSITION, error)
	FindByPage(offset int, limit int) (result []*model.HCV_VIEW_POSITION, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_VIEW_POSITIONDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_VIEW_POSITIONDo) Debug() IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_VIEW_POSITIONDo) WithContext(ctx context.Context) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_VIEW_POSITIONDo) ReadDB() IHCV_VIEW_POSITIONDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_VIEW_POSITIONDo) WriteDB() IHCV_VIEW_POSITIONDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_VIEW_POSITIONDo) Session(config *gorm.Session) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_VIEW_POSITIONDo) Clauses(conds ...clause.Expression) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_VIEW_POSITIONDo) Returning(value interface{}, columns ...string) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_VIEW_POSITIONDo) Not(conds ...gen.Condition) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_VIEW_POSITIONDo) Or(conds ...gen.Condition) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_VIEW_POSITIONDo) Select(conds ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_VIEW_POSITIONDo) Where(conds ...gen.Condition) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_VIEW_POSITIONDo) Order(conds ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_VIEW_POSITIONDo) Distinct(cols ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_VIEW_POSITIONDo) Omit(cols ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_VIEW_POSITIONDo) Join(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_VIEW_POSITIONDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_VIEW_POSITIONDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_VIEW_POSITIONDo) Group(cols ...field.Expr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_VIEW_POSITIONDo) Having(conds ...gen.Condition) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_VIEW_POSITIONDo) Limit(limit int) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_VIEW_POSITIONDo) Offset(offset int) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_VIEW_POSITIONDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_VIEW_POSITIONDo) Unscoped() IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_VIEW_POSITIONDo) Create(values ...*model.HCV_VIEW_POSITION) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_VIEW_POSITIONDo) CreateInBatches(values []*model.HCV_VIEW_POSITION, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_VIEW_POSITIONDo) Save(values ...*model.HCV_VIEW_POSITION) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_VIEW_POSITIONDo) First() (*model.HCV_VIEW_POSITION, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_POSITION), nil
	}
}

func (h hCV_VIEW_POSITIONDo) Take() (*model.HCV_VIEW_POSITION, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_POSITION), nil
	}
}

func (h hCV_VIEW_POSITIONDo) Last() (*model.HCV_VIEW_POSITION, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_POSITION), nil
	}
}

func (h hCV_VIEW_POSITIONDo) Find() ([]*model.HCV_VIEW_POSITION, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_VIEW_POSITION), err
}

func (h hCV_VIEW_POSITIONDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VIEW_POSITION, err error) {
	buf := make([]*model.HCV_VIEW_POSITION, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_VIEW_POSITIONDo) FindInBatches(result *[]*model.HCV_VIEW_POSITION, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_VIEW_POSITIONDo) Attrs(attrs ...field.AssignExpr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_VIEW_POSITIONDo) Assign(attrs ...field.AssignExpr) IHCV_VIEW_POSITIONDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_VIEW_POSITIONDo) Joins(fields ...field.RelationField) IHCV_VIEW_POSITIONDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_VIEW_POSITIONDo) Preload(fields ...field.RelationField) IHCV_VIEW_POSITIONDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_VIEW_POSITIONDo) FirstOrInit() (*model.HCV_VIEW_POSITION, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_POSITION), nil
	}
}

func (h hCV_VIEW_POSITIONDo) FirstOrCreate() (*model.HCV_VIEW_POSITION, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VIEW_POSITION), nil
	}
}

func (h hCV_VIEW_POSITIONDo) FindByPage(offset int, limit int) (result []*model.HCV_VIEW_POSITION, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_VIEW_POSITIONDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_VIEW_POSITIONDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_VIEW_POSITIONDo) Delete(models ...*model.HCV_VIEW_POSITION) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_VIEW_POSITIONDo) withDO(do gen.Dao) *hCV_VIEW_POSITIONDo {
	h.DO = *do.(*gen.DO)
	return h
}
