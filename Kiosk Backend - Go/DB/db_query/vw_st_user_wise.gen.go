// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_VW_ST_USER_WISE(db *gorm.DB, opts ...gen.DOOption) hCV_VW_ST_USER_WISE {
	_hCV_VW_ST_USER_WISE := hCV_VW_ST_USER_WISE{}

	_hCV_VW_ST_USER_WISE.hCV_VW_ST_USER_WISEDo.UseDB(db, opts...)
	_hCV_VW_ST_USER_WISE.hCV_VW_ST_USER_WISEDo.UseModel(&model.HCV_VW_ST_USER_WISE{})

	tableName := _hCV_VW_ST_USER_WISE.hCV_VW_ST_USER_WISEDo.TableName()
	_hCV_VW_ST_USER_WISE.ALL = field.NewAsterisk(tableName)
	_hCV_VW_ST_USER_WISE.USERID = field.NewString(tableName, "USER_ID")
	_hCV_VW_ST_USER_WISE.SCHOOLNO = field.NewString(tableName, "SCHOOL_NO")
	_hCV_VW_ST_USER_WISE.USERNAME = field.NewString(tableName, "USER_NAME")
	_hCV_VW_ST_USER_WISE.DEPTCODE = field.NewString(tableName, "DEPT_CODE")
	_hCV_VW_ST_USER_WISE.DEPTNAME = field.NewString(tableName, "DEPT_NAME")
	_hCV_VW_ST_USER_WISE.USERPOSITION = field.NewString(tableName, "USER_POSITION")
	_hCV_VW_ST_USER_WISE.USERPOSITIONNAME = field.NewString(tableName, "USER_POSITION_NAME")
	_hCV_VW_ST_USER_WISE.TELNO = field.NewString(tableName, "TEL_NO")
	_hCV_VW_ST_USER_WISE.DEVICEGB = field.NewString(tableName, "DEVICE_GB")
	_hCV_VW_ST_USER_WISE.PASSWD = field.NewString(tableName, "PASS_WD")
	_hCV_VW_ST_USER_WISE.PUSHKEY = field.NewString(tableName, "PUSH_KEY")
	_hCV_VW_ST_USER_WISE.PHOTOURL = field.NewString(tableName, "PHOTO_URL")
	_hCV_VW_ST_USER_WISE.DESCRIPT = field.NewString(tableName, "DESCRIPT")
	_hCV_VW_ST_USER_WISE.FSTREGDT = field.NewString(tableName, "FST_REG_DT")
	_hCV_VW_ST_USER_WISE.UPDDT = field.NewString(tableName, "UPD_DT")
	_hCV_VW_ST_USER_WISE.DELDT = field.NewString(tableName, "DEL_DT")

	_hCV_VW_ST_USER_WISE.fillFieldMap()

	return _hCV_VW_ST_USER_WISE
}

type hCV_VW_ST_USER_WISE struct {
	hCV_VW_ST_USER_WISEDo

	ALL              field.Asterisk
	USERID           field.String
	SCHOOLNO         field.String
	USERNAME         field.String
	DEPTCODE         field.String
	DEPTNAME         field.String
	USERPOSITION     field.String
	USERPOSITIONNAME field.String
	TELNO            field.String
	DEVICEGB         field.String
	PASSWD           field.String
	PUSHKEY          field.String
	PHOTOURL         field.String
	DESCRIPT         field.String
	FSTREGDT         field.String
	UPDDT            field.String
	DELDT            field.String

	fieldMap map[string]field.Expr
}

func (h hCV_VW_ST_USER_WISE) Table(newTableName string) *hCV_VW_ST_USER_WISE {
	h.hCV_VW_ST_USER_WISEDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_VW_ST_USER_WISE) As(alias string) *hCV_VW_ST_USER_WISE {
	h.hCV_VW_ST_USER_WISEDo.DO = *(h.hCV_VW_ST_USER_WISEDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_VW_ST_USER_WISE) updateTableName(table string) *hCV_VW_ST_USER_WISE {
	h.ALL = field.NewAsterisk(table)
	h.USERID = field.NewString(table, "USER_ID")
	h.SCHOOLNO = field.NewString(table, "SCHOOL_NO")
	h.USERNAME = field.NewString(table, "USER_NAME")
	h.DEPTCODE = field.NewString(table, "DEPT_CODE")
	h.DEPTNAME = field.NewString(table, "DEPT_NAME")
	h.USERPOSITION = field.NewString(table, "USER_POSITION")
	h.USERPOSITIONNAME = field.NewString(table, "USER_POSITION_NAME")
	h.TELNO = field.NewString(table, "TEL_NO")
	h.DEVICEGB = field.NewString(table, "DEVICE_GB")
	h.PASSWD = field.NewString(table, "PASS_WD")
	h.PUSHKEY = field.NewString(table, "PUSH_KEY")
	h.PHOTOURL = field.NewString(table, "PHOTO_URL")
	h.DESCRIPT = field.NewString(table, "DESCRIPT")
	h.FSTREGDT = field.NewString(table, "FST_REG_DT")
	h.UPDDT = field.NewString(table, "UPD_DT")
	h.DELDT = field.NewString(table, "DEL_DT")

	h.fillFieldMap()

	return h
}

func (h *hCV_VW_ST_USER_WISE) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_VW_ST_USER_WISE) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 16)
	h.fieldMap["USER_ID"] = h.USERID
	h.fieldMap["SCHOOL_NO"] = h.SCHOOLNO
	h.fieldMap["USER_NAME"] = h.USERNAME
	h.fieldMap["DEPT_CODE"] = h.DEPTCODE
	h.fieldMap["DEPT_NAME"] = h.DEPTNAME
	h.fieldMap["USER_POSITION"] = h.USERPOSITION
	h.fieldMap["USER_POSITION_NAME"] = h.USERPOSITIONNAME
	h.fieldMap["TEL_NO"] = h.TELNO
	h.fieldMap["DEVICE_GB"] = h.DEVICEGB
	h.fieldMap["PASS_WD"] = h.PASSWD
	h.fieldMap["PUSH_KEY"] = h.PUSHKEY
	h.fieldMap["PHOTO_URL"] = h.PHOTOURL
	h.fieldMap["DESCRIPT"] = h.DESCRIPT
	h.fieldMap["FST_REG_DT"] = h.FSTREGDT
	h.fieldMap["UPD_DT"] = h.UPDDT
	h.fieldMap["DEL_DT"] = h.DELDT
}

func (h hCV_VW_ST_USER_WISE) clone(db *gorm.DB) hCV_VW_ST_USER_WISE {
	h.hCV_VW_ST_USER_WISEDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_VW_ST_USER_WISE) replaceDB(db *gorm.DB) hCV_VW_ST_USER_WISE {
	h.hCV_VW_ST_USER_WISEDo.ReplaceDB(db)
	return h
}

type hCV_VW_ST_USER_WISEDo struct{ gen.DO }

type IHCV_VW_ST_USER_WISEDo interface {
	gen.SubQuery
	Debug() IHCV_VW_ST_USER_WISEDo
	WithContext(ctx context.Context) IHCV_VW_ST_USER_WISEDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_VW_ST_USER_WISEDo
	WriteDB() IHCV_VW_ST_USER_WISEDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_VW_ST_USER_WISEDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_VW_ST_USER_WISEDo
	Not(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo
	Or(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo
	Select(conds ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Where(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo
	Order(conds ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Distinct(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Omit(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Group(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo
	Having(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo
	Limit(limit int) IHCV_VW_ST_USER_WISEDo
	Offset(offset int) IHCV_VW_ST_USER_WISEDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VW_ST_USER_WISEDo
	Unscoped() IHCV_VW_ST_USER_WISEDo
	Create(values ...*model.HCV_VW_ST_USER_WISE) error
	CreateInBatches(values []*model.HCV_VW_ST_USER_WISE, batchSize int) error
	Save(values ...*model.HCV_VW_ST_USER_WISE) error
	First() (*model.HCV_VW_ST_USER_WISE, error)
	Take() (*model.HCV_VW_ST_USER_WISE, error)
	Last() (*model.HCV_VW_ST_USER_WISE, error)
	Find() ([]*model.HCV_VW_ST_USER_WISE, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VW_ST_USER_WISE, err error)
	FindInBatches(result *[]*model.HCV_VW_ST_USER_WISE, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_VW_ST_USER_WISE) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_VW_ST_USER_WISEDo
	Assign(attrs ...field.AssignExpr) IHCV_VW_ST_USER_WISEDo
	Joins(fields ...field.RelationField) IHCV_VW_ST_USER_WISEDo
	Preload(fields ...field.RelationField) IHCV_VW_ST_USER_WISEDo
	FirstOrInit() (*model.HCV_VW_ST_USER_WISE, error)
	FirstOrCreate() (*model.HCV_VW_ST_USER_WISE, error)
	FindByPage(offset int, limit int) (result []*model.HCV_VW_ST_USER_WISE, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_VW_ST_USER_WISEDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_VW_ST_USER_WISEDo) Debug() IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_VW_ST_USER_WISEDo) WithContext(ctx context.Context) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_VW_ST_USER_WISEDo) ReadDB() IHCV_VW_ST_USER_WISEDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_VW_ST_USER_WISEDo) WriteDB() IHCV_VW_ST_USER_WISEDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_VW_ST_USER_WISEDo) Session(config *gorm.Session) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_VW_ST_USER_WISEDo) Clauses(conds ...clause.Expression) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Returning(value interface{}, columns ...string) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_VW_ST_USER_WISEDo) Not(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Or(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Select(conds ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Where(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Order(conds ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Distinct(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_VW_ST_USER_WISEDo) Omit(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_VW_ST_USER_WISEDo) Join(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_VW_ST_USER_WISEDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_VW_ST_USER_WISEDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_VW_ST_USER_WISEDo) Group(cols ...field.Expr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_VW_ST_USER_WISEDo) Having(conds ...gen.Condition) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_VW_ST_USER_WISEDo) Limit(limit int) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_VW_ST_USER_WISEDo) Offset(offset int) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_VW_ST_USER_WISEDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_VW_ST_USER_WISEDo) Unscoped() IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_VW_ST_USER_WISEDo) Create(values ...*model.HCV_VW_ST_USER_WISE) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_VW_ST_USER_WISEDo) CreateInBatches(values []*model.HCV_VW_ST_USER_WISE, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_VW_ST_USER_WISEDo) Save(values ...*model.HCV_VW_ST_USER_WISE) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_VW_ST_USER_WISEDo) First() (*model.HCV_VW_ST_USER_WISE, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VW_ST_USER_WISE), nil
	}
}

func (h hCV_VW_ST_USER_WISEDo) Take() (*model.HCV_VW_ST_USER_WISE, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VW_ST_USER_WISE), nil
	}
}

func (h hCV_VW_ST_USER_WISEDo) Last() (*model.HCV_VW_ST_USER_WISE, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VW_ST_USER_WISE), nil
	}
}

func (h hCV_VW_ST_USER_WISEDo) Find() ([]*model.HCV_VW_ST_USER_WISE, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_VW_ST_USER_WISE), err
}

func (h hCV_VW_ST_USER_WISEDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_VW_ST_USER_WISE, err error) {
	buf := make([]*model.HCV_VW_ST_USER_WISE, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_VW_ST_USER_WISEDo) FindInBatches(result *[]*model.HCV_VW_ST_USER_WISE, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_VW_ST_USER_WISEDo) Attrs(attrs ...field.AssignExpr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_VW_ST_USER_WISEDo) Assign(attrs ...field.AssignExpr) IHCV_VW_ST_USER_WISEDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_VW_ST_USER_WISEDo) Joins(fields ...field.RelationField) IHCV_VW_ST_USER_WISEDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_VW_ST_USER_WISEDo) Preload(fields ...field.RelationField) IHCV_VW_ST_USER_WISEDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_VW_ST_USER_WISEDo) FirstOrInit() (*model.HCV_VW_ST_USER_WISE, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VW_ST_USER_WISE), nil
	}
}

func (h hCV_VW_ST_USER_WISEDo) FirstOrCreate() (*model.HCV_VW_ST_USER_WISE, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_VW_ST_USER_WISE), nil
	}
}

func (h hCV_VW_ST_USER_WISEDo) FindByPage(offset int, limit int) (result []*model.HCV_VW_ST_USER_WISE, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_VW_ST_USER_WISEDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_VW_ST_USER_WISEDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_VW_ST_USER_WISEDo) Delete(models ...*model.HCV_VW_ST_USER_WISE) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_VW_ST_USER_WISEDo) withDO(do gen.Dao) *hCV_VW_ST_USER_WISEDo {
	h.DO = *do.(*gen.DO)
	return h
}
