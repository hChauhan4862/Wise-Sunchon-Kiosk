// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseCarrel(db *gorm.DB, opts ...gen.DOOption) wiseCarrel {
	_wiseCarrel := wiseCarrel{}

	_wiseCarrel.wiseCarrelDo.UseDB(db, opts...)
	_wiseCarrel.wiseCarrelDo.UseModel(&model.WiseCarrel{})

	tableName := _wiseCarrel.wiseCarrelDo.TableName()
	_wiseCarrel.ALL = field.NewAsterisk(tableName)
	_wiseCarrel.CarrelNo = field.NewInt64(tableName, "carrel_no")
	_wiseCarrel.CarrelName = field.NewString(tableName, "carrel_name")
	_wiseCarrel.CarrelGubun = field.NewString(tableName, "carrel_gubun")
	_wiseCarrel.CarrelType = field.NewInt64(tableName, "carrel_type")
	_wiseCarrel.UseYn = field.NewString(tableName, "use_yn")
	_wiseCarrel.BlockYn = field.NewString(tableName, "block_yn")
	_wiseCarrel.BlockDay = field.NewInt64(tableName, "block_day")
	_wiseCarrel.BlockMin = field.NewInt64(tableName, "block_min")
	_wiseCarrel.Bigo = field.NewString(tableName, "bigo")

	_wiseCarrel.fillFieldMap()

	return _wiseCarrel
}

type wiseCarrel struct {
	wiseCarrelDo

	ALL         field.Asterisk
	CarrelNo    field.Int64
	CarrelName  field.String
	CarrelGubun field.String
	CarrelType  field.Int64
	UseYn       field.String
	BlockYn     field.String
	BlockDay    field.Int64
	BlockMin    field.Int64
	Bigo        field.String

	fieldMap map[string]field.Expr
}

func (w wiseCarrel) Table(newTableName string) *wiseCarrel {
	w.wiseCarrelDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseCarrel) As(alias string) *wiseCarrel {
	w.wiseCarrelDo.DO = *(w.wiseCarrelDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseCarrel) updateTableName(table string) *wiseCarrel {
	w.ALL = field.NewAsterisk(table)
	w.CarrelNo = field.NewInt64(table, "carrel_no")
	w.CarrelName = field.NewString(table, "carrel_name")
	w.CarrelGubun = field.NewString(table, "carrel_gubun")
	w.CarrelType = field.NewInt64(table, "carrel_type")
	w.UseYn = field.NewString(table, "use_yn")
	w.BlockYn = field.NewString(table, "block_yn")
	w.BlockDay = field.NewInt64(table, "block_day")
	w.BlockMin = field.NewInt64(table, "block_min")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseCarrel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseCarrel) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["carrel_no"] = w.CarrelNo
	w.fieldMap["carrel_name"] = w.CarrelName
	w.fieldMap["carrel_gubun"] = w.CarrelGubun
	w.fieldMap["carrel_type"] = w.CarrelType
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["block_yn"] = w.BlockYn
	w.fieldMap["block_day"] = w.BlockDay
	w.fieldMap["block_min"] = w.BlockMin
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseCarrel) clone(db *gorm.DB) wiseCarrel {
	w.wiseCarrelDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseCarrel) replaceDB(db *gorm.DB) wiseCarrel {
	w.wiseCarrelDo.ReplaceDB(db)
	return w
}

type wiseCarrelDo struct{ gen.DO }

type IWiseCarrelDo interface {
	gen.SubQuery
	Debug() IWiseCarrelDo
	WithContext(ctx context.Context) IWiseCarrelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseCarrelDo
	WriteDB() IWiseCarrelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseCarrelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseCarrelDo
	Not(conds ...gen.Condition) IWiseCarrelDo
	Or(conds ...gen.Condition) IWiseCarrelDo
	Select(conds ...field.Expr) IWiseCarrelDo
	Where(conds ...gen.Condition) IWiseCarrelDo
	Order(conds ...field.Expr) IWiseCarrelDo
	Distinct(cols ...field.Expr) IWiseCarrelDo
	Omit(cols ...field.Expr) IWiseCarrelDo
	Join(table schema.Tabler, on ...field.Expr) IWiseCarrelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelDo
	Group(cols ...field.Expr) IWiseCarrelDo
	Having(conds ...gen.Condition) IWiseCarrelDo
	Limit(limit int) IWiseCarrelDo
	Offset(offset int) IWiseCarrelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelDo
	Unscoped() IWiseCarrelDo
	Create(values ...*model.WiseCarrel) error
	CreateInBatches(values []*model.WiseCarrel, batchSize int) error
	Save(values ...*model.WiseCarrel) error
	First() (*model.WiseCarrel, error)
	Take() (*model.WiseCarrel, error)
	Last() (*model.WiseCarrel, error)
	Find() ([]*model.WiseCarrel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrel, err error)
	FindInBatches(result *[]*model.WiseCarrel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseCarrel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseCarrelDo
	Assign(attrs ...field.AssignExpr) IWiseCarrelDo
	Joins(fields ...field.RelationField) IWiseCarrelDo
	Preload(fields ...field.RelationField) IWiseCarrelDo
	FirstOrInit() (*model.WiseCarrel, error)
	FirstOrCreate() (*model.WiseCarrel, error)
	FindByPage(offset int, limit int) (result []*model.WiseCarrel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseCarrelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseCarrelDo) Debug() IWiseCarrelDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseCarrelDo) WithContext(ctx context.Context) IWiseCarrelDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseCarrelDo) ReadDB() IWiseCarrelDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseCarrelDo) WriteDB() IWiseCarrelDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseCarrelDo) Session(config *gorm.Session) IWiseCarrelDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseCarrelDo) Clauses(conds ...clause.Expression) IWiseCarrelDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseCarrelDo) Returning(value interface{}, columns ...string) IWiseCarrelDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseCarrelDo) Not(conds ...gen.Condition) IWiseCarrelDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseCarrelDo) Or(conds ...gen.Condition) IWiseCarrelDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseCarrelDo) Select(conds ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseCarrelDo) Where(conds ...gen.Condition) IWiseCarrelDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseCarrelDo) Order(conds ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseCarrelDo) Distinct(cols ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseCarrelDo) Omit(cols ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseCarrelDo) Join(table schema.Tabler, on ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseCarrelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseCarrelDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseCarrelDo) Group(cols ...field.Expr) IWiseCarrelDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseCarrelDo) Having(conds ...gen.Condition) IWiseCarrelDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseCarrelDo) Limit(limit int) IWiseCarrelDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseCarrelDo) Offset(offset int) IWiseCarrelDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseCarrelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseCarrelDo) Unscoped() IWiseCarrelDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseCarrelDo) Create(values ...*model.WiseCarrel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseCarrelDo) CreateInBatches(values []*model.WiseCarrel, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseCarrelDo) Save(values ...*model.WiseCarrel) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseCarrelDo) First() (*model.WiseCarrel, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrel), nil
	}
}

func (w wiseCarrelDo) Take() (*model.WiseCarrel, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrel), nil
	}
}

func (w wiseCarrelDo) Last() (*model.WiseCarrel, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrel), nil
	}
}

func (w wiseCarrelDo) Find() ([]*model.WiseCarrel, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseCarrel), err
}

func (w wiseCarrelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrel, err error) {
	buf := make([]*model.WiseCarrel, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseCarrelDo) FindInBatches(result *[]*model.WiseCarrel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseCarrelDo) Attrs(attrs ...field.AssignExpr) IWiseCarrelDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseCarrelDo) Assign(attrs ...field.AssignExpr) IWiseCarrelDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseCarrelDo) Joins(fields ...field.RelationField) IWiseCarrelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseCarrelDo) Preload(fields ...field.RelationField) IWiseCarrelDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseCarrelDo) FirstOrInit() (*model.WiseCarrel, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrel), nil
	}
}

func (w wiseCarrelDo) FirstOrCreate() (*model.WiseCarrel, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrel), nil
	}
}

func (w wiseCarrelDo) FindByPage(offset int, limit int) (result []*model.WiseCarrel, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseCarrelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseCarrelDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseCarrelDo) Delete(models ...*model.WiseCarrel) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseCarrelDo) withDO(do gen.Dao) *wiseCarrelDo {
	w.DO = *do.(*gen.DO)
	return w
}
