// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseCarrelReserveSub(db *gorm.DB, opts ...gen.DOOption) wiseCarrelReserveSub {
	_wiseCarrelReserveSub := wiseCarrelReserveSub{}

	_wiseCarrelReserveSub.wiseCarrelReserveSubDo.UseDB(db, opts...)
	_wiseCarrelReserveSub.wiseCarrelReserveSubDo.UseModel(&model.WiseCarrelReserveSub{})

	tableName := _wiseCarrelReserveSub.wiseCarrelReserveSubDo.TableName()
	_wiseCarrelReserveSub.ALL = field.NewAsterisk(tableName)
	_wiseCarrelReserveSub.ReserveNo = field.NewString(tableName, "reserve_no")
	_wiseCarrelReserveSub.ReserveDate = field.NewString(tableName, "reserve_date")
	_wiseCarrelReserveSub.ReserveStat = field.NewString(tableName, "reserve_stat")
	_wiseCarrelReserveSub.CarrelNo = field.NewString(tableName, "carrel_no")
	_wiseCarrelReserveSub.UserID = field.NewString(tableName, "user_id")

	_wiseCarrelReserveSub.fillFieldMap()

	return _wiseCarrelReserveSub
}

type wiseCarrelReserveSub struct {
	wiseCarrelReserveSubDo

	ALL         field.Asterisk
	ReserveNo   field.String
	ReserveDate field.String
	ReserveStat field.String
	CarrelNo    field.String
	UserID      field.String

	fieldMap map[string]field.Expr
}

func (w wiseCarrelReserveSub) Table(newTableName string) *wiseCarrelReserveSub {
	w.wiseCarrelReserveSubDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseCarrelReserveSub) As(alias string) *wiseCarrelReserveSub {
	w.wiseCarrelReserveSubDo.DO = *(w.wiseCarrelReserveSubDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseCarrelReserveSub) updateTableName(table string) *wiseCarrelReserveSub {
	w.ALL = field.NewAsterisk(table)
	w.ReserveNo = field.NewString(table, "reserve_no")
	w.ReserveDate = field.NewString(table, "reserve_date")
	w.ReserveStat = field.NewString(table, "reserve_stat")
	w.CarrelNo = field.NewString(table, "carrel_no")
	w.UserID = field.NewString(table, "user_id")

	w.fillFieldMap()

	return w
}

func (w *wiseCarrelReserveSub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseCarrelReserveSub) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 5)
	w.fieldMap["reserve_no"] = w.ReserveNo
	w.fieldMap["reserve_date"] = w.ReserveDate
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["carrel_no"] = w.CarrelNo
	w.fieldMap["user_id"] = w.UserID
}

func (w wiseCarrelReserveSub) clone(db *gorm.DB) wiseCarrelReserveSub {
	w.wiseCarrelReserveSubDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseCarrelReserveSub) replaceDB(db *gorm.DB) wiseCarrelReserveSub {
	w.wiseCarrelReserveSubDo.ReplaceDB(db)
	return w
}

type wiseCarrelReserveSubDo struct{ gen.DO }

type IWiseCarrelReserveSubDo interface {
	gen.SubQuery
	Debug() IWiseCarrelReserveSubDo
	WithContext(ctx context.Context) IWiseCarrelReserveSubDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseCarrelReserveSubDo
	WriteDB() IWiseCarrelReserveSubDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseCarrelReserveSubDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseCarrelReserveSubDo
	Not(conds ...gen.Condition) IWiseCarrelReserveSubDo
	Or(conds ...gen.Condition) IWiseCarrelReserveSubDo
	Select(conds ...field.Expr) IWiseCarrelReserveSubDo
	Where(conds ...gen.Condition) IWiseCarrelReserveSubDo
	Order(conds ...field.Expr) IWiseCarrelReserveSubDo
	Distinct(cols ...field.Expr) IWiseCarrelReserveSubDo
	Omit(cols ...field.Expr) IWiseCarrelReserveSubDo
	Join(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo
	Group(cols ...field.Expr) IWiseCarrelReserveSubDo
	Having(conds ...gen.Condition) IWiseCarrelReserveSubDo
	Limit(limit int) IWiseCarrelReserveSubDo
	Offset(offset int) IWiseCarrelReserveSubDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelReserveSubDo
	Unscoped() IWiseCarrelReserveSubDo
	Create(values ...*model.WiseCarrelReserveSub) error
	CreateInBatches(values []*model.WiseCarrelReserveSub, batchSize int) error
	Save(values ...*model.WiseCarrelReserveSub) error
	First() (*model.WiseCarrelReserveSub, error)
	Take() (*model.WiseCarrelReserveSub, error)
	Last() (*model.WiseCarrelReserveSub, error)
	Find() ([]*model.WiseCarrelReserveSub, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelReserveSub, err error)
	FindInBatches(result *[]*model.WiseCarrelReserveSub, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseCarrelReserveSub) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseCarrelReserveSubDo
	Assign(attrs ...field.AssignExpr) IWiseCarrelReserveSubDo
	Joins(fields ...field.RelationField) IWiseCarrelReserveSubDo
	Preload(fields ...field.RelationField) IWiseCarrelReserveSubDo
	FirstOrInit() (*model.WiseCarrelReserveSub, error)
	FirstOrCreate() (*model.WiseCarrelReserveSub, error)
	FindByPage(offset int, limit int) (result []*model.WiseCarrelReserveSub, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseCarrelReserveSubDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseCarrelReserveSubDo) Debug() IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseCarrelReserveSubDo) WithContext(ctx context.Context) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseCarrelReserveSubDo) ReadDB() IWiseCarrelReserveSubDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseCarrelReserveSubDo) WriteDB() IWiseCarrelReserveSubDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseCarrelReserveSubDo) Session(config *gorm.Session) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseCarrelReserveSubDo) Clauses(conds ...clause.Expression) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseCarrelReserveSubDo) Returning(value interface{}, columns ...string) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseCarrelReserveSubDo) Not(conds ...gen.Condition) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseCarrelReserveSubDo) Or(conds ...gen.Condition) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseCarrelReserveSubDo) Select(conds ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseCarrelReserveSubDo) Where(conds ...gen.Condition) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseCarrelReserveSubDo) Order(conds ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseCarrelReserveSubDo) Distinct(cols ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseCarrelReserveSubDo) Omit(cols ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseCarrelReserveSubDo) Join(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseCarrelReserveSubDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseCarrelReserveSubDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseCarrelReserveSubDo) Group(cols ...field.Expr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseCarrelReserveSubDo) Having(conds ...gen.Condition) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseCarrelReserveSubDo) Limit(limit int) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseCarrelReserveSubDo) Offset(offset int) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseCarrelReserveSubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseCarrelReserveSubDo) Unscoped() IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseCarrelReserveSubDo) Create(values ...*model.WiseCarrelReserveSub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseCarrelReserveSubDo) CreateInBatches(values []*model.WiseCarrelReserveSub, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseCarrelReserveSubDo) Save(values ...*model.WiseCarrelReserveSub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseCarrelReserveSubDo) First() (*model.WiseCarrelReserveSub, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserveSub), nil
	}
}

func (w wiseCarrelReserveSubDo) Take() (*model.WiseCarrelReserveSub, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserveSub), nil
	}
}

func (w wiseCarrelReserveSubDo) Last() (*model.WiseCarrelReserveSub, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserveSub), nil
	}
}

func (w wiseCarrelReserveSubDo) Find() ([]*model.WiseCarrelReserveSub, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseCarrelReserveSub), err
}

func (w wiseCarrelReserveSubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelReserveSub, err error) {
	buf := make([]*model.WiseCarrelReserveSub, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseCarrelReserveSubDo) FindInBatches(result *[]*model.WiseCarrelReserveSub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseCarrelReserveSubDo) Attrs(attrs ...field.AssignExpr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseCarrelReserveSubDo) Assign(attrs ...field.AssignExpr) IWiseCarrelReserveSubDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseCarrelReserveSubDo) Joins(fields ...field.RelationField) IWiseCarrelReserveSubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseCarrelReserveSubDo) Preload(fields ...field.RelationField) IWiseCarrelReserveSubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseCarrelReserveSubDo) FirstOrInit() (*model.WiseCarrelReserveSub, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserveSub), nil
	}
}

func (w wiseCarrelReserveSubDo) FirstOrCreate() (*model.WiseCarrelReserveSub, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelReserveSub), nil
	}
}

func (w wiseCarrelReserveSubDo) FindByPage(offset int, limit int) (result []*model.WiseCarrelReserveSub, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseCarrelReserveSubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseCarrelReserveSubDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseCarrelReserveSubDo) Delete(models ...*model.WiseCarrelReserveSub) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseCarrelReserveSubDo) withDO(do gen.Dao) *wiseCarrelReserveSubDo {
	w.DO = *do.(*gen.DO)
	return w
}
