// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseLimitCode(db *gorm.DB, opts ...gen.DOOption) wiseLimitCode {
	_wiseLimitCode := wiseLimitCode{}

	_wiseLimitCode.wiseLimitCodeDo.UseDB(db, opts...)
	_wiseLimitCode.wiseLimitCodeDo.UseModel(&model.WiseLimitCode{})

	tableName := _wiseLimitCode.wiseLimitCodeDo.TableName()
	_wiseLimitCode.ALL = field.NewAsterisk(tableName)
	_wiseLimitCode.LimitNo = field.NewInt64(tableName, "limit_no")
	_wiseLimitCode.LimitName = field.NewString(tableName, "limit_name")
	_wiseLimitCode.LimitDay = field.NewInt64(tableName, "limit_day")
	_wiseLimitCode.UseYn = field.NewString(tableName, "use_yn")
	_wiseLimitCode.LimitGubun = field.NewInt64(tableName, "limit_gubun")
	_wiseLimitCode.Bigo = field.NewString(tableName, "bigo")

	_wiseLimitCode.fillFieldMap()

	return _wiseLimitCode
}

type wiseLimitCode struct {
	wiseLimitCodeDo

	ALL        field.Asterisk
	LimitNo    field.Int64
	LimitName  field.String
	LimitDay   field.Int64
	UseYn      field.String
	LimitGubun field.Int64
	Bigo       field.String

	fieldMap map[string]field.Expr
}

func (w wiseLimitCode) Table(newTableName string) *wiseLimitCode {
	w.wiseLimitCodeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseLimitCode) As(alias string) *wiseLimitCode {
	w.wiseLimitCodeDo.DO = *(w.wiseLimitCodeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseLimitCode) updateTableName(table string) *wiseLimitCode {
	w.ALL = field.NewAsterisk(table)
	w.LimitNo = field.NewInt64(table, "limit_no")
	w.LimitName = field.NewString(table, "limit_name")
	w.LimitDay = field.NewInt64(table, "limit_day")
	w.UseYn = field.NewString(table, "use_yn")
	w.LimitGubun = field.NewInt64(table, "limit_gubun")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseLimitCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseLimitCode) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 6)
	w.fieldMap["limit_no"] = w.LimitNo
	w.fieldMap["limit_name"] = w.LimitName
	w.fieldMap["limit_day"] = w.LimitDay
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["limit_gubun"] = w.LimitGubun
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseLimitCode) clone(db *gorm.DB) wiseLimitCode {
	w.wiseLimitCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseLimitCode) replaceDB(db *gorm.DB) wiseLimitCode {
	w.wiseLimitCodeDo.ReplaceDB(db)
	return w
}

type wiseLimitCodeDo struct{ gen.DO }

type IWiseLimitCodeDo interface {
	gen.SubQuery
	Debug() IWiseLimitCodeDo
	WithContext(ctx context.Context) IWiseLimitCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseLimitCodeDo
	WriteDB() IWiseLimitCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseLimitCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseLimitCodeDo
	Not(conds ...gen.Condition) IWiseLimitCodeDo
	Or(conds ...gen.Condition) IWiseLimitCodeDo
	Select(conds ...field.Expr) IWiseLimitCodeDo
	Where(conds ...gen.Condition) IWiseLimitCodeDo
	Order(conds ...field.Expr) IWiseLimitCodeDo
	Distinct(cols ...field.Expr) IWiseLimitCodeDo
	Omit(cols ...field.Expr) IWiseLimitCodeDo
	Join(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo
	Group(cols ...field.Expr) IWiseLimitCodeDo
	Having(conds ...gen.Condition) IWiseLimitCodeDo
	Limit(limit int) IWiseLimitCodeDo
	Offset(offset int) IWiseLimitCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseLimitCodeDo
	Unscoped() IWiseLimitCodeDo
	Create(values ...*model.WiseLimitCode) error
	CreateInBatches(values []*model.WiseLimitCode, batchSize int) error
	Save(values ...*model.WiseLimitCode) error
	First() (*model.WiseLimitCode, error)
	Take() (*model.WiseLimitCode, error)
	Last() (*model.WiseLimitCode, error)
	Find() ([]*model.WiseLimitCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseLimitCode, err error)
	FindInBatches(result *[]*model.WiseLimitCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseLimitCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseLimitCodeDo
	Assign(attrs ...field.AssignExpr) IWiseLimitCodeDo
	Joins(fields ...field.RelationField) IWiseLimitCodeDo
	Preload(fields ...field.RelationField) IWiseLimitCodeDo
	FirstOrInit() (*model.WiseLimitCode, error)
	FirstOrCreate() (*model.WiseLimitCode, error)
	FindByPage(offset int, limit int) (result []*model.WiseLimitCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseLimitCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseLimitCodeDo) Debug() IWiseLimitCodeDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseLimitCodeDo) WithContext(ctx context.Context) IWiseLimitCodeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseLimitCodeDo) ReadDB() IWiseLimitCodeDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseLimitCodeDo) WriteDB() IWiseLimitCodeDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseLimitCodeDo) Session(config *gorm.Session) IWiseLimitCodeDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseLimitCodeDo) Clauses(conds ...clause.Expression) IWiseLimitCodeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseLimitCodeDo) Returning(value interface{}, columns ...string) IWiseLimitCodeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseLimitCodeDo) Not(conds ...gen.Condition) IWiseLimitCodeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseLimitCodeDo) Or(conds ...gen.Condition) IWiseLimitCodeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseLimitCodeDo) Select(conds ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseLimitCodeDo) Where(conds ...gen.Condition) IWiseLimitCodeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseLimitCodeDo) Order(conds ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseLimitCodeDo) Distinct(cols ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseLimitCodeDo) Omit(cols ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseLimitCodeDo) Join(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseLimitCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseLimitCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseLimitCodeDo) Group(cols ...field.Expr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseLimitCodeDo) Having(conds ...gen.Condition) IWiseLimitCodeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseLimitCodeDo) Limit(limit int) IWiseLimitCodeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseLimitCodeDo) Offset(offset int) IWiseLimitCodeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseLimitCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseLimitCodeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseLimitCodeDo) Unscoped() IWiseLimitCodeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseLimitCodeDo) Create(values ...*model.WiseLimitCode) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseLimitCodeDo) CreateInBatches(values []*model.WiseLimitCode, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseLimitCodeDo) Save(values ...*model.WiseLimitCode) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseLimitCodeDo) First() (*model.WiseLimitCode, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseLimitCode), nil
	}
}

func (w wiseLimitCodeDo) Take() (*model.WiseLimitCode, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseLimitCode), nil
	}
}

func (w wiseLimitCodeDo) Last() (*model.WiseLimitCode, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseLimitCode), nil
	}
}

func (w wiseLimitCodeDo) Find() ([]*model.WiseLimitCode, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseLimitCode), err
}

func (w wiseLimitCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseLimitCode, err error) {
	buf := make([]*model.WiseLimitCode, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseLimitCodeDo) FindInBatches(result *[]*model.WiseLimitCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseLimitCodeDo) Attrs(attrs ...field.AssignExpr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseLimitCodeDo) Assign(attrs ...field.AssignExpr) IWiseLimitCodeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseLimitCodeDo) Joins(fields ...field.RelationField) IWiseLimitCodeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseLimitCodeDo) Preload(fields ...field.RelationField) IWiseLimitCodeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseLimitCodeDo) FirstOrInit() (*model.WiseLimitCode, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseLimitCode), nil
	}
}

func (w wiseLimitCodeDo) FirstOrCreate() (*model.WiseLimitCode, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseLimitCode), nil
	}
}

func (w wiseLimitCodeDo) FindByPage(offset int, limit int) (result []*model.WiseLimitCode, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseLimitCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseLimitCodeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseLimitCodeDo) Delete(models ...*model.WiseLimitCode) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseLimitCodeDo) withDO(do gen.Dao) *wiseLimitCodeDo {
	w.DO = *do.(*gen.DO)
	return w
}
