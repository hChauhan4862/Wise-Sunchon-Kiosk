// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatGrbookingID(db *gorm.DB, opts ...gen.DOOption) seatGrbookingID {
	_seatGrbookingID := seatGrbookingID{}

	_seatGrbookingID.seatGrbookingIDDo.UseDB(db, opts...)
	_seatGrbookingID.seatGrbookingIDDo.UseModel(&model.SeatGrbookingID{})

	tableName := _seatGrbookingID.seatGrbookingIDDo.TableName()
	_seatGrbookingID.ALL = field.NewAsterisk(tableName)
	_seatGrbookingID.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_seatGrbookingID.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")

	_seatGrbookingID.fillFieldMap()

	return _seatGrbookingID
}

type seatGrbookingID struct {
	seatGrbookingIDDo

	ALL      field.Asterisk
	BSEQNO   field.Int64
	SCHOOLNO field.String

	fieldMap map[string]field.Expr
}

func (s seatGrbookingID) Table(newTableName string) *seatGrbookingID {
	s.seatGrbookingIDDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatGrbookingID) As(alias string) *seatGrbookingID {
	s.seatGrbookingIDDo.DO = *(s.seatGrbookingIDDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatGrbookingID) updateTableName(table string) *seatGrbookingID {
	s.ALL = field.NewAsterisk(table)
	s.BSEQNO = field.NewInt64(table, "BSEQNO")
	s.SCHOOLNO = field.NewString(table, "SCHOOLNO")

	s.fillFieldMap()

	return s
}

func (s *seatGrbookingID) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatGrbookingID) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["BSEQNO"] = s.BSEQNO
	s.fieldMap["SCHOOLNO"] = s.SCHOOLNO
}

func (s seatGrbookingID) clone(db *gorm.DB) seatGrbookingID {
	s.seatGrbookingIDDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatGrbookingID) replaceDB(db *gorm.DB) seatGrbookingID {
	s.seatGrbookingIDDo.ReplaceDB(db)
	return s
}

type seatGrbookingIDDo struct{ gen.DO }

type ISeatGrbookingIDDo interface {
	gen.SubQuery
	Debug() ISeatGrbookingIDDo
	WithContext(ctx context.Context) ISeatGrbookingIDDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatGrbookingIDDo
	WriteDB() ISeatGrbookingIDDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatGrbookingIDDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatGrbookingIDDo
	Not(conds ...gen.Condition) ISeatGrbookingIDDo
	Or(conds ...gen.Condition) ISeatGrbookingIDDo
	Select(conds ...field.Expr) ISeatGrbookingIDDo
	Where(conds ...gen.Condition) ISeatGrbookingIDDo
	Order(conds ...field.Expr) ISeatGrbookingIDDo
	Distinct(cols ...field.Expr) ISeatGrbookingIDDo
	Omit(cols ...field.Expr) ISeatGrbookingIDDo
	Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo
	Group(cols ...field.Expr) ISeatGrbookingIDDo
	Having(conds ...gen.Condition) ISeatGrbookingIDDo
	Limit(limit int) ISeatGrbookingIDDo
	Offset(offset int) ISeatGrbookingIDDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingIDDo
	Unscoped() ISeatGrbookingIDDo
	Create(values ...*model.SeatGrbookingID) error
	CreateInBatches(values []*model.SeatGrbookingID, batchSize int) error
	Save(values ...*model.SeatGrbookingID) error
	First() (*model.SeatGrbookingID, error)
	Take() (*model.SeatGrbookingID, error)
	Last() (*model.SeatGrbookingID, error)
	Find() ([]*model.SeatGrbookingID, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbookingID, err error)
	FindInBatches(result *[]*model.SeatGrbookingID, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatGrbookingID) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatGrbookingIDDo
	Assign(attrs ...field.AssignExpr) ISeatGrbookingIDDo
	Joins(fields ...field.RelationField) ISeatGrbookingIDDo
	Preload(fields ...field.RelationField) ISeatGrbookingIDDo
	FirstOrInit() (*model.SeatGrbookingID, error)
	FirstOrCreate() (*model.SeatGrbookingID, error)
	FindByPage(offset int, limit int) (result []*model.SeatGrbookingID, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatGrbookingIDDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatGrbookingIDDo) Debug() ISeatGrbookingIDDo {
	return s.withDO(s.DO.Debug())
}

func (s seatGrbookingIDDo) WithContext(ctx context.Context) ISeatGrbookingIDDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatGrbookingIDDo) ReadDB() ISeatGrbookingIDDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatGrbookingIDDo) WriteDB() ISeatGrbookingIDDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatGrbookingIDDo) Session(config *gorm.Session) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatGrbookingIDDo) Clauses(conds ...clause.Expression) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatGrbookingIDDo) Returning(value interface{}, columns ...string) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatGrbookingIDDo) Not(conds ...gen.Condition) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatGrbookingIDDo) Or(conds ...gen.Condition) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatGrbookingIDDo) Select(conds ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatGrbookingIDDo) Where(conds ...gen.Condition) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatGrbookingIDDo) Order(conds ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatGrbookingIDDo) Distinct(cols ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatGrbookingIDDo) Omit(cols ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatGrbookingIDDo) Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatGrbookingIDDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatGrbookingIDDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatGrbookingIDDo) Group(cols ...field.Expr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatGrbookingIDDo) Having(conds ...gen.Condition) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatGrbookingIDDo) Limit(limit int) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatGrbookingIDDo) Offset(offset int) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatGrbookingIDDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatGrbookingIDDo) Unscoped() ISeatGrbookingIDDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatGrbookingIDDo) Create(values ...*model.SeatGrbookingID) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatGrbookingIDDo) CreateInBatches(values []*model.SeatGrbookingID, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatGrbookingIDDo) Save(values ...*model.SeatGrbookingID) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatGrbookingIDDo) First() (*model.SeatGrbookingID, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingID), nil
	}
}

func (s seatGrbookingIDDo) Take() (*model.SeatGrbookingID, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingID), nil
	}
}

func (s seatGrbookingIDDo) Last() (*model.SeatGrbookingID, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingID), nil
	}
}

func (s seatGrbookingIDDo) Find() ([]*model.SeatGrbookingID, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatGrbookingID), err
}

func (s seatGrbookingIDDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbookingID, err error) {
	buf := make([]*model.SeatGrbookingID, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatGrbookingIDDo) FindInBatches(result *[]*model.SeatGrbookingID, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatGrbookingIDDo) Attrs(attrs ...field.AssignExpr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatGrbookingIDDo) Assign(attrs ...field.AssignExpr) ISeatGrbookingIDDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatGrbookingIDDo) Joins(fields ...field.RelationField) ISeatGrbookingIDDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatGrbookingIDDo) Preload(fields ...field.RelationField) ISeatGrbookingIDDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatGrbookingIDDo) FirstOrInit() (*model.SeatGrbookingID, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingID), nil
	}
}

func (s seatGrbookingIDDo) FirstOrCreate() (*model.SeatGrbookingID, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingID), nil
	}
}

func (s seatGrbookingIDDo) FindByPage(offset int, limit int) (result []*model.SeatGrbookingID, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatGrbookingIDDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatGrbookingIDDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatGrbookingIDDo) Delete(models ...*model.SeatGrbookingID) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatGrbookingIDDo) withDO(do gen.Dao) *seatGrbookingIDDo {
	s.DO = *do.(*gen.DO)
	return s
}
