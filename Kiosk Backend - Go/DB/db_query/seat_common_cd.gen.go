// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatCommonCd(db *gorm.DB, opts ...gen.DOOption) seatCommonCd {
	_seatCommonCd := seatCommonCd{}

	_seatCommonCd.seatCommonCdDo.UseDB(db, opts...)
	_seatCommonCd.seatCommonCdDo.UseModel(&model.SeatCommonCd{})

	tableName := _seatCommonCd.seatCommonCdDo.TableName()
	_seatCommonCd.ALL = field.NewAsterisk(tableName)
	_seatCommonCd.CODEGRP = field.NewString(tableName, "CODE_GRP")
	_seatCommonCd.CODE = field.NewString(tableName, "CODE")
	_seatCommonCd.CODENM = field.NewString(tableName, "CODE_NM")
	_seatCommonCd.DISPORDER = field.NewInt64(tableName, "DISP_ORDER")
	_seatCommonCd.REMARK = field.NewString(tableName, "REMARK")
	_seatCommonCd.REGDT = field.NewString(tableName, "REG_DT")
	_seatCommonCd.REGID = field.NewString(tableName, "REG_ID")
	_seatCommonCd.MODDT = field.NewString(tableName, "MOD_DT")
	_seatCommonCd.MODID = field.NewString(tableName, "MOD_ID")

	_seatCommonCd.fillFieldMap()

	return _seatCommonCd
}

type seatCommonCd struct {
	seatCommonCdDo

	ALL       field.Asterisk
	CODEGRP   field.String
	CODE      field.String
	CODENM    field.String
	DISPORDER field.Int64
	REMARK    field.String
	REGDT     field.String
	REGID     field.String
	MODDT     field.String
	MODID     field.String

	fieldMap map[string]field.Expr
}

func (s seatCommonCd) Table(newTableName string) *seatCommonCd {
	s.seatCommonCdDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatCommonCd) As(alias string) *seatCommonCd {
	s.seatCommonCdDo.DO = *(s.seatCommonCdDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatCommonCd) updateTableName(table string) *seatCommonCd {
	s.ALL = field.NewAsterisk(table)
	s.CODEGRP = field.NewString(table, "CODE_GRP")
	s.CODE = field.NewString(table, "CODE")
	s.CODENM = field.NewString(table, "CODE_NM")
	s.DISPORDER = field.NewInt64(table, "DISP_ORDER")
	s.REMARK = field.NewString(table, "REMARK")
	s.REGDT = field.NewString(table, "REG_DT")
	s.REGID = field.NewString(table, "REG_ID")
	s.MODDT = field.NewString(table, "MOD_DT")
	s.MODID = field.NewString(table, "MOD_ID")

	s.fillFieldMap()

	return s
}

func (s *seatCommonCd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatCommonCd) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["CODE_GRP"] = s.CODEGRP
	s.fieldMap["CODE"] = s.CODE
	s.fieldMap["CODE_NM"] = s.CODENM
	s.fieldMap["DISP_ORDER"] = s.DISPORDER
	s.fieldMap["REMARK"] = s.REMARK
	s.fieldMap["REG_DT"] = s.REGDT
	s.fieldMap["REG_ID"] = s.REGID
	s.fieldMap["MOD_DT"] = s.MODDT
	s.fieldMap["MOD_ID"] = s.MODID
}

func (s seatCommonCd) clone(db *gorm.DB) seatCommonCd {
	s.seatCommonCdDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatCommonCd) replaceDB(db *gorm.DB) seatCommonCd {
	s.seatCommonCdDo.ReplaceDB(db)
	return s
}

type seatCommonCdDo struct{ gen.DO }

type ISeatCommonCdDo interface {
	gen.SubQuery
	Debug() ISeatCommonCdDo
	WithContext(ctx context.Context) ISeatCommonCdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatCommonCdDo
	WriteDB() ISeatCommonCdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatCommonCdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatCommonCdDo
	Not(conds ...gen.Condition) ISeatCommonCdDo
	Or(conds ...gen.Condition) ISeatCommonCdDo
	Select(conds ...field.Expr) ISeatCommonCdDo
	Where(conds ...gen.Condition) ISeatCommonCdDo
	Order(conds ...field.Expr) ISeatCommonCdDo
	Distinct(cols ...field.Expr) ISeatCommonCdDo
	Omit(cols ...field.Expr) ISeatCommonCdDo
	Join(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo
	Group(cols ...field.Expr) ISeatCommonCdDo
	Having(conds ...gen.Condition) ISeatCommonCdDo
	Limit(limit int) ISeatCommonCdDo
	Offset(offset int) ISeatCommonCdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatCommonCdDo
	Unscoped() ISeatCommonCdDo
	Create(values ...*model.SeatCommonCd) error
	CreateInBatches(values []*model.SeatCommonCd, batchSize int) error
	Save(values ...*model.SeatCommonCd) error
	First() (*model.SeatCommonCd, error)
	Take() (*model.SeatCommonCd, error)
	Last() (*model.SeatCommonCd, error)
	Find() ([]*model.SeatCommonCd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatCommonCd, err error)
	FindInBatches(result *[]*model.SeatCommonCd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatCommonCd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatCommonCdDo
	Assign(attrs ...field.AssignExpr) ISeatCommonCdDo
	Joins(fields ...field.RelationField) ISeatCommonCdDo
	Preload(fields ...field.RelationField) ISeatCommonCdDo
	FirstOrInit() (*model.SeatCommonCd, error)
	FirstOrCreate() (*model.SeatCommonCd, error)
	FindByPage(offset int, limit int) (result []*model.SeatCommonCd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatCommonCdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatCommonCdDo) Debug() ISeatCommonCdDo {
	return s.withDO(s.DO.Debug())
}

func (s seatCommonCdDo) WithContext(ctx context.Context) ISeatCommonCdDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatCommonCdDo) ReadDB() ISeatCommonCdDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatCommonCdDo) WriteDB() ISeatCommonCdDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatCommonCdDo) Session(config *gorm.Session) ISeatCommonCdDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatCommonCdDo) Clauses(conds ...clause.Expression) ISeatCommonCdDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatCommonCdDo) Returning(value interface{}, columns ...string) ISeatCommonCdDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatCommonCdDo) Not(conds ...gen.Condition) ISeatCommonCdDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatCommonCdDo) Or(conds ...gen.Condition) ISeatCommonCdDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatCommonCdDo) Select(conds ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatCommonCdDo) Where(conds ...gen.Condition) ISeatCommonCdDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatCommonCdDo) Order(conds ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatCommonCdDo) Distinct(cols ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatCommonCdDo) Omit(cols ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatCommonCdDo) Join(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatCommonCdDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatCommonCdDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatCommonCdDo) Group(cols ...field.Expr) ISeatCommonCdDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatCommonCdDo) Having(conds ...gen.Condition) ISeatCommonCdDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatCommonCdDo) Limit(limit int) ISeatCommonCdDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatCommonCdDo) Offset(offset int) ISeatCommonCdDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatCommonCdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatCommonCdDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatCommonCdDo) Unscoped() ISeatCommonCdDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatCommonCdDo) Create(values ...*model.SeatCommonCd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatCommonCdDo) CreateInBatches(values []*model.SeatCommonCd, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatCommonCdDo) Save(values ...*model.SeatCommonCd) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatCommonCdDo) First() (*model.SeatCommonCd, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatCommonCd), nil
	}
}

func (s seatCommonCdDo) Take() (*model.SeatCommonCd, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatCommonCd), nil
	}
}

func (s seatCommonCdDo) Last() (*model.SeatCommonCd, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatCommonCd), nil
	}
}

func (s seatCommonCdDo) Find() ([]*model.SeatCommonCd, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatCommonCd), err
}

func (s seatCommonCdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatCommonCd, err error) {
	buf := make([]*model.SeatCommonCd, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatCommonCdDo) FindInBatches(result *[]*model.SeatCommonCd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatCommonCdDo) Attrs(attrs ...field.AssignExpr) ISeatCommonCdDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatCommonCdDo) Assign(attrs ...field.AssignExpr) ISeatCommonCdDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatCommonCdDo) Joins(fields ...field.RelationField) ISeatCommonCdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatCommonCdDo) Preload(fields ...field.RelationField) ISeatCommonCdDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatCommonCdDo) FirstOrInit() (*model.SeatCommonCd, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatCommonCd), nil
	}
}

func (s seatCommonCdDo) FirstOrCreate() (*model.SeatCommonCd, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatCommonCd), nil
	}
}

func (s seatCommonCdDo) FindByPage(offset int, limit int) (result []*model.SeatCommonCd, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatCommonCdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatCommonCdDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatCommonCdDo) Delete(models ...*model.SeatCommonCd) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatCommonCdDo) withDO(do gen.Dao) *seatCommonCdDo {
	s.DO = *do.(*gen.DO)
	return s
}
