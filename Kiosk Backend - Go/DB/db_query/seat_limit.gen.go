// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatLimit(db *gorm.DB, opts ...gen.DOOption) seatLimit {
	_seatLimit := seatLimit{}

	_seatLimit.seatLimitDo.UseDB(db, opts...)
	_seatLimit.seatLimitDo.UseModel(&model.SeatLimit{})

	tableName := _seatLimit.seatLimitDo.TableName()
	_seatLimit.ALL = field.NewAsterisk(tableName)
	_seatLimit.UserID = field.NewString(tableName, "user_id")
	_seatLimit.MissCnt = field.NewInt64(tableName, "miss_cnt")
	_seatLimit.MissTCnt = field.NewInt64(tableName, "miss_t_cnt")
	_seatLimit.BlockSetDate = field.NewString(tableName, "block_set_date")
	_seatLimit.BlockEndDate = field.NewString(tableName, "block_end_date")
	_seatLimit.LimitBigo = field.NewString(tableName, "limit_bigo")
	_seatLimit.BlockEndTime = field.NewString(tableName, "block_end_time")
	_seatLimit.BlockStartDate = field.NewString(tableName, "block_start_date")
	_seatLimit.BlockStartTime = field.NewString(tableName, "block_start_time")

	_seatLimit.fillFieldMap()

	return _seatLimit
}

type seatLimit struct {
	seatLimitDo

	ALL            field.Asterisk
	UserID         field.String
	MissCnt        field.Int64
	MissTCnt       field.Int64
	BlockSetDate   field.String
	BlockEndDate   field.String
	LimitBigo      field.String
	BlockEndTime   field.String
	BlockStartDate field.String
	BlockStartTime field.String

	fieldMap map[string]field.Expr
}

func (s seatLimit) Table(newTableName string) *seatLimit {
	s.seatLimitDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatLimit) As(alias string) *seatLimit {
	s.seatLimitDo.DO = *(s.seatLimitDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatLimit) updateTableName(table string) *seatLimit {
	s.ALL = field.NewAsterisk(table)
	s.UserID = field.NewString(table, "user_id")
	s.MissCnt = field.NewInt64(table, "miss_cnt")
	s.MissTCnt = field.NewInt64(table, "miss_t_cnt")
	s.BlockSetDate = field.NewString(table, "block_set_date")
	s.BlockEndDate = field.NewString(table, "block_end_date")
	s.LimitBigo = field.NewString(table, "limit_bigo")
	s.BlockEndTime = field.NewString(table, "block_end_time")
	s.BlockStartDate = field.NewString(table, "block_start_date")
	s.BlockStartTime = field.NewString(table, "block_start_time")

	s.fillFieldMap()

	return s
}

func (s *seatLimit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatLimit) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["miss_cnt"] = s.MissCnt
	s.fieldMap["miss_t_cnt"] = s.MissTCnt
	s.fieldMap["block_set_date"] = s.BlockSetDate
	s.fieldMap["block_end_date"] = s.BlockEndDate
	s.fieldMap["limit_bigo"] = s.LimitBigo
	s.fieldMap["block_end_time"] = s.BlockEndTime
	s.fieldMap["block_start_date"] = s.BlockStartDate
	s.fieldMap["block_start_time"] = s.BlockStartTime
}

func (s seatLimit) clone(db *gorm.DB) seatLimit {
	s.seatLimitDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatLimit) replaceDB(db *gorm.DB) seatLimit {
	s.seatLimitDo.ReplaceDB(db)
	return s
}

type seatLimitDo struct{ gen.DO }

type ISeatLimitDo interface {
	gen.SubQuery
	Debug() ISeatLimitDo
	WithContext(ctx context.Context) ISeatLimitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatLimitDo
	WriteDB() ISeatLimitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatLimitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatLimitDo
	Not(conds ...gen.Condition) ISeatLimitDo
	Or(conds ...gen.Condition) ISeatLimitDo
	Select(conds ...field.Expr) ISeatLimitDo
	Where(conds ...gen.Condition) ISeatLimitDo
	Order(conds ...field.Expr) ISeatLimitDo
	Distinct(cols ...field.Expr) ISeatLimitDo
	Omit(cols ...field.Expr) ISeatLimitDo
	Join(table schema.Tabler, on ...field.Expr) ISeatLimitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLimitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatLimitDo
	Group(cols ...field.Expr) ISeatLimitDo
	Having(conds ...gen.Condition) ISeatLimitDo
	Limit(limit int) ISeatLimitDo
	Offset(offset int) ISeatLimitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLimitDo
	Unscoped() ISeatLimitDo
	Create(values ...*model.SeatLimit) error
	CreateInBatches(values []*model.SeatLimit, batchSize int) error
	Save(values ...*model.SeatLimit) error
	First() (*model.SeatLimit, error)
	Take() (*model.SeatLimit, error)
	Last() (*model.SeatLimit, error)
	Find() ([]*model.SeatLimit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLimit, err error)
	FindInBatches(result *[]*model.SeatLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatLimit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatLimitDo
	Assign(attrs ...field.AssignExpr) ISeatLimitDo
	Joins(fields ...field.RelationField) ISeatLimitDo
	Preload(fields ...field.RelationField) ISeatLimitDo
	FirstOrInit() (*model.SeatLimit, error)
	FirstOrCreate() (*model.SeatLimit, error)
	FindByPage(offset int, limit int) (result []*model.SeatLimit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatLimitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatLimitDo) Debug() ISeatLimitDo {
	return s.withDO(s.DO.Debug())
}

func (s seatLimitDo) WithContext(ctx context.Context) ISeatLimitDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatLimitDo) ReadDB() ISeatLimitDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatLimitDo) WriteDB() ISeatLimitDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatLimitDo) Session(config *gorm.Session) ISeatLimitDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatLimitDo) Clauses(conds ...clause.Expression) ISeatLimitDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatLimitDo) Returning(value interface{}, columns ...string) ISeatLimitDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatLimitDo) Not(conds ...gen.Condition) ISeatLimitDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatLimitDo) Or(conds ...gen.Condition) ISeatLimitDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatLimitDo) Select(conds ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatLimitDo) Where(conds ...gen.Condition) ISeatLimitDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatLimitDo) Order(conds ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatLimitDo) Distinct(cols ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatLimitDo) Omit(cols ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatLimitDo) Join(table schema.Tabler, on ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatLimitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatLimitDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatLimitDo) Group(cols ...field.Expr) ISeatLimitDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatLimitDo) Having(conds ...gen.Condition) ISeatLimitDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatLimitDo) Limit(limit int) ISeatLimitDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatLimitDo) Offset(offset int) ISeatLimitDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatLimitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLimitDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatLimitDo) Unscoped() ISeatLimitDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatLimitDo) Create(values ...*model.SeatLimit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatLimitDo) CreateInBatches(values []*model.SeatLimit, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatLimitDo) Save(values ...*model.SeatLimit) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatLimitDo) First() (*model.SeatLimit, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimit), nil
	}
}

func (s seatLimitDo) Take() (*model.SeatLimit, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimit), nil
	}
}

func (s seatLimitDo) Last() (*model.SeatLimit, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimit), nil
	}
}

func (s seatLimitDo) Find() ([]*model.SeatLimit, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatLimit), err
}

func (s seatLimitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLimit, err error) {
	buf := make([]*model.SeatLimit, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatLimitDo) FindInBatches(result *[]*model.SeatLimit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatLimitDo) Attrs(attrs ...field.AssignExpr) ISeatLimitDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatLimitDo) Assign(attrs ...field.AssignExpr) ISeatLimitDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatLimitDo) Joins(fields ...field.RelationField) ISeatLimitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatLimitDo) Preload(fields ...field.RelationField) ISeatLimitDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatLimitDo) FirstOrInit() (*model.SeatLimit, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimit), nil
	}
}

func (s seatLimitDo) FirstOrCreate() (*model.SeatLimit, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimit), nil
	}
}

func (s seatLimitDo) FindByPage(offset int, limit int) (result []*model.SeatLimit, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatLimitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatLimitDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatLimitDo) Delete(models ...*model.SeatLimit) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatLimitDo) withDO(do gen.Dao) *seatLimitDo {
	s.DO = *do.(*gen.DO)
	return s
}
