// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatConfBak(db *gorm.DB, opts ...gen.DOOption) seatConfBak {
	_seatConfBak := seatConfBak{}

	_seatConfBak.seatConfBakDo.UseDB(db, opts...)
	_seatConfBak.seatConfBakDo.UseModel(&model.SeatConfBak{})

	tableName := _seatConfBak.seatConfBakDo.TableName()
	_seatConfBak.ALL = field.NewAsterisk(tableName)
	_seatConfBak.SeatCode = field.NewString(tableName, "seat_code")
	_seatConfBak.CodeValue = field.NewString(tableName, "code_value")

	_seatConfBak.fillFieldMap()

	return _seatConfBak
}

type seatConfBak struct {
	seatConfBakDo

	ALL       field.Asterisk
	SeatCode  field.String
	CodeValue field.String

	fieldMap map[string]field.Expr
}

func (s seatConfBak) Table(newTableName string) *seatConfBak {
	s.seatConfBakDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatConfBak) As(alias string) *seatConfBak {
	s.seatConfBakDo.DO = *(s.seatConfBakDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatConfBak) updateTableName(table string) *seatConfBak {
	s.ALL = field.NewAsterisk(table)
	s.SeatCode = field.NewString(table, "seat_code")
	s.CodeValue = field.NewString(table, "code_value")

	s.fillFieldMap()

	return s
}

func (s *seatConfBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatConfBak) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["seat_code"] = s.SeatCode
	s.fieldMap["code_value"] = s.CodeValue
}

func (s seatConfBak) clone(db *gorm.DB) seatConfBak {
	s.seatConfBakDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatConfBak) replaceDB(db *gorm.DB) seatConfBak {
	s.seatConfBakDo.ReplaceDB(db)
	return s
}

type seatConfBakDo struct{ gen.DO }

type ISeatConfBakDo interface {
	gen.SubQuery
	Debug() ISeatConfBakDo
	WithContext(ctx context.Context) ISeatConfBakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatConfBakDo
	WriteDB() ISeatConfBakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatConfBakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatConfBakDo
	Not(conds ...gen.Condition) ISeatConfBakDo
	Or(conds ...gen.Condition) ISeatConfBakDo
	Select(conds ...field.Expr) ISeatConfBakDo
	Where(conds ...gen.Condition) ISeatConfBakDo
	Order(conds ...field.Expr) ISeatConfBakDo
	Distinct(cols ...field.Expr) ISeatConfBakDo
	Omit(cols ...field.Expr) ISeatConfBakDo
	Join(table schema.Tabler, on ...field.Expr) ISeatConfBakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatConfBakDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatConfBakDo
	Group(cols ...field.Expr) ISeatConfBakDo
	Having(conds ...gen.Condition) ISeatConfBakDo
	Limit(limit int) ISeatConfBakDo
	Offset(offset int) ISeatConfBakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatConfBakDo
	Unscoped() ISeatConfBakDo
	Create(values ...*model.SeatConfBak) error
	CreateInBatches(values []*model.SeatConfBak, batchSize int) error
	Save(values ...*model.SeatConfBak) error
	First() (*model.SeatConfBak, error)
	Take() (*model.SeatConfBak, error)
	Last() (*model.SeatConfBak, error)
	Find() ([]*model.SeatConfBak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatConfBak, err error)
	FindInBatches(result *[]*model.SeatConfBak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatConfBak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatConfBakDo
	Assign(attrs ...field.AssignExpr) ISeatConfBakDo
	Joins(fields ...field.RelationField) ISeatConfBakDo
	Preload(fields ...field.RelationField) ISeatConfBakDo
	FirstOrInit() (*model.SeatConfBak, error)
	FirstOrCreate() (*model.SeatConfBak, error)
	FindByPage(offset int, limit int) (result []*model.SeatConfBak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatConfBakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatConfBakDo) Debug() ISeatConfBakDo {
	return s.withDO(s.DO.Debug())
}

func (s seatConfBakDo) WithContext(ctx context.Context) ISeatConfBakDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatConfBakDo) ReadDB() ISeatConfBakDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatConfBakDo) WriteDB() ISeatConfBakDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatConfBakDo) Session(config *gorm.Session) ISeatConfBakDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatConfBakDo) Clauses(conds ...clause.Expression) ISeatConfBakDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatConfBakDo) Returning(value interface{}, columns ...string) ISeatConfBakDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatConfBakDo) Not(conds ...gen.Condition) ISeatConfBakDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatConfBakDo) Or(conds ...gen.Condition) ISeatConfBakDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatConfBakDo) Select(conds ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatConfBakDo) Where(conds ...gen.Condition) ISeatConfBakDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatConfBakDo) Order(conds ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatConfBakDo) Distinct(cols ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatConfBakDo) Omit(cols ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatConfBakDo) Join(table schema.Tabler, on ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatConfBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatConfBakDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatConfBakDo) Group(cols ...field.Expr) ISeatConfBakDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatConfBakDo) Having(conds ...gen.Condition) ISeatConfBakDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatConfBakDo) Limit(limit int) ISeatConfBakDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatConfBakDo) Offset(offset int) ISeatConfBakDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatConfBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatConfBakDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatConfBakDo) Unscoped() ISeatConfBakDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatConfBakDo) Create(values ...*model.SeatConfBak) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatConfBakDo) CreateInBatches(values []*model.SeatConfBak, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatConfBakDo) Save(values ...*model.SeatConfBak) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatConfBakDo) First() (*model.SeatConfBak, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConfBak), nil
	}
}

func (s seatConfBakDo) Take() (*model.SeatConfBak, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConfBak), nil
	}
}

func (s seatConfBakDo) Last() (*model.SeatConfBak, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConfBak), nil
	}
}

func (s seatConfBakDo) Find() ([]*model.SeatConfBak, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatConfBak), err
}

func (s seatConfBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatConfBak, err error) {
	buf := make([]*model.SeatConfBak, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatConfBakDo) FindInBatches(result *[]*model.SeatConfBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatConfBakDo) Attrs(attrs ...field.AssignExpr) ISeatConfBakDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatConfBakDo) Assign(attrs ...field.AssignExpr) ISeatConfBakDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatConfBakDo) Joins(fields ...field.RelationField) ISeatConfBakDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatConfBakDo) Preload(fields ...field.RelationField) ISeatConfBakDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatConfBakDo) FirstOrInit() (*model.SeatConfBak, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConfBak), nil
	}
}

func (s seatConfBakDo) FirstOrCreate() (*model.SeatConfBak, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConfBak), nil
	}
}

func (s seatConfBakDo) FindByPage(offset int, limit int) (result []*model.SeatConfBak, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatConfBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatConfBakDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatConfBakDo) Delete(models ...*model.SeatConfBak) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatConfBakDo) withDO(do gen.Dao) *seatConfBakDo {
	s.DO = *do.(*gen.DO)
	return s
}
