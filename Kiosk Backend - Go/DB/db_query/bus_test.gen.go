// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBusTest(db *gorm.DB, opts ...gen.DOOption) busTest {
	_busTest := busTest{}

	_busTest.busTestDo.UseDB(db, opts...)
	_busTest.busTestDo.UseModel(&model.BusTest{})

	tableName := _busTest.busTestDo.TableName()
	_busTest.ALL = field.NewAsterisk(tableName)
	_busTest.BusStopID = field.NewInt64(tableName, "busStopID")
	_busTest.StopCoordX = field.NewFloat64(tableName, "stopCoordX")
	_busTest.StopCoordY = field.NewFloat64(tableName, "stopCoordY")
	_busTest.StopName = field.NewString(tableName, "stopName")

	_busTest.fillFieldMap()

	return _busTest
}

type busTest struct {
	busTestDo

	ALL        field.Asterisk
	BusStopID  field.Int64
	StopCoordX field.Float64
	StopCoordY field.Float64
	StopName   field.String

	fieldMap map[string]field.Expr
}

func (b busTest) Table(newTableName string) *busTest {
	b.busTestDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b busTest) As(alias string) *busTest {
	b.busTestDo.DO = *(b.busTestDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *busTest) updateTableName(table string) *busTest {
	b.ALL = field.NewAsterisk(table)
	b.BusStopID = field.NewInt64(table, "busStopID")
	b.StopCoordX = field.NewFloat64(table, "stopCoordX")
	b.StopCoordY = field.NewFloat64(table, "stopCoordY")
	b.StopName = field.NewString(table, "stopName")

	b.fillFieldMap()

	return b
}

func (b *busTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *busTest) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 4)
	b.fieldMap["busStopID"] = b.BusStopID
	b.fieldMap["stopCoordX"] = b.StopCoordX
	b.fieldMap["stopCoordY"] = b.StopCoordY
	b.fieldMap["stopName"] = b.StopName
}

func (b busTest) clone(db *gorm.DB) busTest {
	b.busTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b busTest) replaceDB(db *gorm.DB) busTest {
	b.busTestDo.ReplaceDB(db)
	return b
}

type busTestDo struct{ gen.DO }

type IBusTestDo interface {
	gen.SubQuery
	Debug() IBusTestDo
	WithContext(ctx context.Context) IBusTestDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBusTestDo
	WriteDB() IBusTestDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBusTestDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBusTestDo
	Not(conds ...gen.Condition) IBusTestDo
	Or(conds ...gen.Condition) IBusTestDo
	Select(conds ...field.Expr) IBusTestDo
	Where(conds ...gen.Condition) IBusTestDo
	Order(conds ...field.Expr) IBusTestDo
	Distinct(cols ...field.Expr) IBusTestDo
	Omit(cols ...field.Expr) IBusTestDo
	Join(table schema.Tabler, on ...field.Expr) IBusTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBusTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBusTestDo
	Group(cols ...field.Expr) IBusTestDo
	Having(conds ...gen.Condition) IBusTestDo
	Limit(limit int) IBusTestDo
	Offset(offset int) IBusTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBusTestDo
	Unscoped() IBusTestDo
	Create(values ...*model.BusTest) error
	CreateInBatches(values []*model.BusTest, batchSize int) error
	Save(values ...*model.BusTest) error
	First() (*model.BusTest, error)
	Take() (*model.BusTest, error)
	Last() (*model.BusTest, error)
	Find() ([]*model.BusTest, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusTest, err error)
	FindInBatches(result *[]*model.BusTest, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BusTest) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBusTestDo
	Assign(attrs ...field.AssignExpr) IBusTestDo
	Joins(fields ...field.RelationField) IBusTestDo
	Preload(fields ...field.RelationField) IBusTestDo
	FirstOrInit() (*model.BusTest, error)
	FirstOrCreate() (*model.BusTest, error)
	FindByPage(offset int, limit int) (result []*model.BusTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBusTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b busTestDo) Debug() IBusTestDo {
	return b.withDO(b.DO.Debug())
}

func (b busTestDo) WithContext(ctx context.Context) IBusTestDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b busTestDo) ReadDB() IBusTestDo {
	return b.Clauses(dbresolver.Read)
}

func (b busTestDo) WriteDB() IBusTestDo {
	return b.Clauses(dbresolver.Write)
}

func (b busTestDo) Session(config *gorm.Session) IBusTestDo {
	return b.withDO(b.DO.Session(config))
}

func (b busTestDo) Clauses(conds ...clause.Expression) IBusTestDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b busTestDo) Returning(value interface{}, columns ...string) IBusTestDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b busTestDo) Not(conds ...gen.Condition) IBusTestDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b busTestDo) Or(conds ...gen.Condition) IBusTestDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b busTestDo) Select(conds ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b busTestDo) Where(conds ...gen.Condition) IBusTestDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b busTestDo) Order(conds ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b busTestDo) Distinct(cols ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b busTestDo) Omit(cols ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b busTestDo) Join(table schema.Tabler, on ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b busTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b busTestDo) RightJoin(table schema.Tabler, on ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b busTestDo) Group(cols ...field.Expr) IBusTestDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b busTestDo) Having(conds ...gen.Condition) IBusTestDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b busTestDo) Limit(limit int) IBusTestDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b busTestDo) Offset(offset int) IBusTestDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b busTestDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBusTestDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b busTestDo) Unscoped() IBusTestDo {
	return b.withDO(b.DO.Unscoped())
}

func (b busTestDo) Create(values ...*model.BusTest) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b busTestDo) CreateInBatches(values []*model.BusTest, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b busTestDo) Save(values ...*model.BusTest) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b busTestDo) First() (*model.BusTest, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusTest), nil
	}
}

func (b busTestDo) Take() (*model.BusTest, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusTest), nil
	}
}

func (b busTestDo) Last() (*model.BusTest, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusTest), nil
	}
}

func (b busTestDo) Find() ([]*model.BusTest, error) {
	result, err := b.DO.Find()
	return result.([]*model.BusTest), err
}

func (b busTestDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BusTest, err error) {
	buf := make([]*model.BusTest, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b busTestDo) FindInBatches(result *[]*model.BusTest, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b busTestDo) Attrs(attrs ...field.AssignExpr) IBusTestDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b busTestDo) Assign(attrs ...field.AssignExpr) IBusTestDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b busTestDo) Joins(fields ...field.RelationField) IBusTestDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b busTestDo) Preload(fields ...field.RelationField) IBusTestDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b busTestDo) FirstOrInit() (*model.BusTest, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusTest), nil
	}
}

func (b busTestDo) FirstOrCreate() (*model.BusTest, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BusTest), nil
	}
}

func (b busTestDo) FindByPage(offset int, limit int) (result []*model.BusTest, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b busTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b busTestDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b busTestDo) Delete(models ...*model.BusTest) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *busTestDo) withDO(do gen.Dao) *busTestDo {
	b.DO = *do.(*gen.DO)
	return b
}
