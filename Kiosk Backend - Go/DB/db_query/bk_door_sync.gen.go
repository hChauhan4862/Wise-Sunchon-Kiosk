// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newBKDOORSYNC(db *gorm.DB, opts ...gen.DOOption) bKDOORSYNC {
	_bKDOORSYNC := bKDOORSYNC{}

	_bKDOORSYNC.bKDOORSYNCDo.UseDB(db, opts...)
	_bKDOORSYNC.bKDOORSYNCDo.UseModel(&model.BKDOORSYNC{})

	tableName := _bKDOORSYNC.bKDOORSYNCDo.TableName()
	_bKDOORSYNC.ALL = field.NewAsterisk(tableName)
	_bKDOORSYNC.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_bKDOORSYNC.STATUS = field.NewInt64(tableName, "STATUS")
	_bKDOORSYNC.SCHOOLNO = field.NewString(tableName, "SCHOOLNO")
	_bKDOORSYNC.USESTART = field.NewTime(tableName, "USESTART")
	_bKDOORSYNC.USEEXPIRE = field.NewTime(tableName, "USEEXPIRE")
	_bKDOORSYNC.MEMBERS = field.NewString(tableName, "MEMBERS")
	_bKDOORSYNC.SEATNO = field.NewInt64(tableName, "SEATNO")
	_bKDOORSYNC.SYNCTIME = field.NewTime(tableName, "SYNC_TIME")
	_bKDOORSYNC.SYNCCHECK = field.NewString(tableName, "SYNC_CHECK")

	_bKDOORSYNC.fillFieldMap()

	return _bKDOORSYNC
}

type bKDOORSYNC struct {
	bKDOORSYNCDo

	ALL       field.Asterisk
	BSEQNO    field.Int64
	STATUS    field.Int64
	SCHOOLNO  field.String
	USESTART  field.Time
	USEEXPIRE field.Time
	MEMBERS   field.String
	SEATNO    field.Int64
	SYNCTIME  field.Time
	SYNCCHECK field.String

	fieldMap map[string]field.Expr
}

func (b bKDOORSYNC) Table(newTableName string) *bKDOORSYNC {
	b.bKDOORSYNCDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bKDOORSYNC) As(alias string) *bKDOORSYNC {
	b.bKDOORSYNCDo.DO = *(b.bKDOORSYNCDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bKDOORSYNC) updateTableName(table string) *bKDOORSYNC {
	b.ALL = field.NewAsterisk(table)
	b.BSEQNO = field.NewInt64(table, "BSEQNO")
	b.STATUS = field.NewInt64(table, "STATUS")
	b.SCHOOLNO = field.NewString(table, "SCHOOLNO")
	b.USESTART = field.NewTime(table, "USESTART")
	b.USEEXPIRE = field.NewTime(table, "USEEXPIRE")
	b.MEMBERS = field.NewString(table, "MEMBERS")
	b.SEATNO = field.NewInt64(table, "SEATNO")
	b.SYNCTIME = field.NewTime(table, "SYNC_TIME")
	b.SYNCCHECK = field.NewString(table, "SYNC_CHECK")

	b.fillFieldMap()

	return b
}

func (b *bKDOORSYNC) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bKDOORSYNC) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 9)
	b.fieldMap["BSEQNO"] = b.BSEQNO
	b.fieldMap["STATUS"] = b.STATUS
	b.fieldMap["SCHOOLNO"] = b.SCHOOLNO
	b.fieldMap["USESTART"] = b.USESTART
	b.fieldMap["USEEXPIRE"] = b.USEEXPIRE
	b.fieldMap["MEMBERS"] = b.MEMBERS
	b.fieldMap["SEATNO"] = b.SEATNO
	b.fieldMap["SYNC_TIME"] = b.SYNCTIME
	b.fieldMap["SYNC_CHECK"] = b.SYNCCHECK
}

func (b bKDOORSYNC) clone(db *gorm.DB) bKDOORSYNC {
	b.bKDOORSYNCDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bKDOORSYNC) replaceDB(db *gorm.DB) bKDOORSYNC {
	b.bKDOORSYNCDo.ReplaceDB(db)
	return b
}

type bKDOORSYNCDo struct{ gen.DO }

type IBKDOORSYNCDo interface {
	gen.SubQuery
	Debug() IBKDOORSYNCDo
	WithContext(ctx context.Context) IBKDOORSYNCDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBKDOORSYNCDo
	WriteDB() IBKDOORSYNCDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBKDOORSYNCDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBKDOORSYNCDo
	Not(conds ...gen.Condition) IBKDOORSYNCDo
	Or(conds ...gen.Condition) IBKDOORSYNCDo
	Select(conds ...field.Expr) IBKDOORSYNCDo
	Where(conds ...gen.Condition) IBKDOORSYNCDo
	Order(conds ...field.Expr) IBKDOORSYNCDo
	Distinct(cols ...field.Expr) IBKDOORSYNCDo
	Omit(cols ...field.Expr) IBKDOORSYNCDo
	Join(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo
	Group(cols ...field.Expr) IBKDOORSYNCDo
	Having(conds ...gen.Condition) IBKDOORSYNCDo
	Limit(limit int) IBKDOORSYNCDo
	Offset(offset int) IBKDOORSYNCDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBKDOORSYNCDo
	Unscoped() IBKDOORSYNCDo
	Create(values ...*model.BKDOORSYNC) error
	CreateInBatches(values []*model.BKDOORSYNC, batchSize int) error
	Save(values ...*model.BKDOORSYNC) error
	First() (*model.BKDOORSYNC, error)
	Take() (*model.BKDOORSYNC, error)
	Last() (*model.BKDOORSYNC, error)
	Find() ([]*model.BKDOORSYNC, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BKDOORSYNC, err error)
	FindInBatches(result *[]*model.BKDOORSYNC, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BKDOORSYNC) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBKDOORSYNCDo
	Assign(attrs ...field.AssignExpr) IBKDOORSYNCDo
	Joins(fields ...field.RelationField) IBKDOORSYNCDo
	Preload(fields ...field.RelationField) IBKDOORSYNCDo
	FirstOrInit() (*model.BKDOORSYNC, error)
	FirstOrCreate() (*model.BKDOORSYNC, error)
	FindByPage(offset int, limit int) (result []*model.BKDOORSYNC, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBKDOORSYNCDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bKDOORSYNCDo) Debug() IBKDOORSYNCDo {
	return b.withDO(b.DO.Debug())
}

func (b bKDOORSYNCDo) WithContext(ctx context.Context) IBKDOORSYNCDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bKDOORSYNCDo) ReadDB() IBKDOORSYNCDo {
	return b.Clauses(dbresolver.Read)
}

func (b bKDOORSYNCDo) WriteDB() IBKDOORSYNCDo {
	return b.Clauses(dbresolver.Write)
}

func (b bKDOORSYNCDo) Session(config *gorm.Session) IBKDOORSYNCDo {
	return b.withDO(b.DO.Session(config))
}

func (b bKDOORSYNCDo) Clauses(conds ...clause.Expression) IBKDOORSYNCDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bKDOORSYNCDo) Returning(value interface{}, columns ...string) IBKDOORSYNCDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bKDOORSYNCDo) Not(conds ...gen.Condition) IBKDOORSYNCDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bKDOORSYNCDo) Or(conds ...gen.Condition) IBKDOORSYNCDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bKDOORSYNCDo) Select(conds ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bKDOORSYNCDo) Where(conds ...gen.Condition) IBKDOORSYNCDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bKDOORSYNCDo) Order(conds ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bKDOORSYNCDo) Distinct(cols ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bKDOORSYNCDo) Omit(cols ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bKDOORSYNCDo) Join(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bKDOORSYNCDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bKDOORSYNCDo) RightJoin(table schema.Tabler, on ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bKDOORSYNCDo) Group(cols ...field.Expr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bKDOORSYNCDo) Having(conds ...gen.Condition) IBKDOORSYNCDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bKDOORSYNCDo) Limit(limit int) IBKDOORSYNCDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bKDOORSYNCDo) Offset(offset int) IBKDOORSYNCDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bKDOORSYNCDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBKDOORSYNCDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bKDOORSYNCDo) Unscoped() IBKDOORSYNCDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bKDOORSYNCDo) Create(values ...*model.BKDOORSYNC) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bKDOORSYNCDo) CreateInBatches(values []*model.BKDOORSYNC, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bKDOORSYNCDo) Save(values ...*model.BKDOORSYNC) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bKDOORSYNCDo) First() (*model.BKDOORSYNC, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BKDOORSYNC), nil
	}
}

func (b bKDOORSYNCDo) Take() (*model.BKDOORSYNC, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BKDOORSYNC), nil
	}
}

func (b bKDOORSYNCDo) Last() (*model.BKDOORSYNC, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BKDOORSYNC), nil
	}
}

func (b bKDOORSYNCDo) Find() ([]*model.BKDOORSYNC, error) {
	result, err := b.DO.Find()
	return result.([]*model.BKDOORSYNC), err
}

func (b bKDOORSYNCDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BKDOORSYNC, err error) {
	buf := make([]*model.BKDOORSYNC, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bKDOORSYNCDo) FindInBatches(result *[]*model.BKDOORSYNC, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bKDOORSYNCDo) Attrs(attrs ...field.AssignExpr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bKDOORSYNCDo) Assign(attrs ...field.AssignExpr) IBKDOORSYNCDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bKDOORSYNCDo) Joins(fields ...field.RelationField) IBKDOORSYNCDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bKDOORSYNCDo) Preload(fields ...field.RelationField) IBKDOORSYNCDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bKDOORSYNCDo) FirstOrInit() (*model.BKDOORSYNC, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BKDOORSYNC), nil
	}
}

func (b bKDOORSYNCDo) FirstOrCreate() (*model.BKDOORSYNC, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BKDOORSYNC), nil
	}
}

func (b bKDOORSYNCDo) FindByPage(offset int, limit int) (result []*model.BKDOORSYNC, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bKDOORSYNCDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bKDOORSYNCDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bKDOORSYNCDo) Delete(models ...*model.BKDOORSYNC) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bKDOORSYNCDo) withDO(do gen.Dao) *bKDOORSYNCDo {
	b.DO = *do.(*gen.DO)
	return b
}
