// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatIPSetting(db *gorm.DB, opts ...gen.DOOption) seatIPSetting {
	_seatIPSetting := seatIPSetting{}

	_seatIPSetting.seatIPSettingDo.UseDB(db, opts...)
	_seatIPSetting.seatIPSettingDo.UseModel(&model.SeatIPSetting{})

	tableName := _seatIPSetting.seatIPSettingDo.TableName()
	_seatIPSetting.ALL = field.NewAsterisk(tableName)
	_seatIPSetting.RoomNo = field.NewInt64(tableName, "room_no")
	_seatIPSetting.SeatNo = field.NewInt64(tableName, "seat_no")
	_seatIPSetting.SelfYn = field.NewString(tableName, "self_yn")
	_seatIPSetting.PcIP = field.NewString(tableName, "pc_ip")
	_seatIPSetting.PcMac = field.NewString(tableName, "pc_mac")
	_seatIPSetting.LockPwd = field.NewString(tableName, "lock_pwd")
	_seatIPSetting.DcuNo = field.NewInt64(tableName, "dcu_no")
	_seatIPSetting.DtcNo = field.NewInt64(tableName, "dtc_no")
	_seatIPSetting.UnitNo = field.NewInt64(tableName, "unit_no")
	_seatIPSetting.SeatType = field.NewString(tableName, "seat_type")
	_seatIPSetting.LockerPwd = field.NewString(tableName, "locker_pwd")
	_seatIPSetting.UseYn = field.NewString(tableName, "use_yn")

	_seatIPSetting.fillFieldMap()

	return _seatIPSetting
}

type seatIPSetting struct {
	seatIPSettingDo

	ALL       field.Asterisk
	RoomNo    field.Int64
	SeatNo    field.Int64
	SelfYn    field.String
	PcIP      field.String
	PcMac     field.String
	LockPwd   field.String
	DcuNo     field.Int64
	DtcNo     field.Int64
	UnitNo    field.Int64
	SeatType  field.String
	LockerPwd field.String
	UseYn     field.String

	fieldMap map[string]field.Expr
}

func (s seatIPSetting) Table(newTableName string) *seatIPSetting {
	s.seatIPSettingDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatIPSetting) As(alias string) *seatIPSetting {
	s.seatIPSettingDo.DO = *(s.seatIPSettingDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatIPSetting) updateTableName(table string) *seatIPSetting {
	s.ALL = field.NewAsterisk(table)
	s.RoomNo = field.NewInt64(table, "room_no")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.SelfYn = field.NewString(table, "self_yn")
	s.PcIP = field.NewString(table, "pc_ip")
	s.PcMac = field.NewString(table, "pc_mac")
	s.LockPwd = field.NewString(table, "lock_pwd")
	s.DcuNo = field.NewInt64(table, "dcu_no")
	s.DtcNo = field.NewInt64(table, "dtc_no")
	s.UnitNo = field.NewInt64(table, "unit_no")
	s.SeatType = field.NewString(table, "seat_type")
	s.LockerPwd = field.NewString(table, "locker_pwd")
	s.UseYn = field.NewString(table, "use_yn")

	s.fillFieldMap()

	return s
}

func (s *seatIPSetting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatIPSetting) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["self_yn"] = s.SelfYn
	s.fieldMap["pc_ip"] = s.PcIP
	s.fieldMap["pc_mac"] = s.PcMac
	s.fieldMap["lock_pwd"] = s.LockPwd
	s.fieldMap["dcu_no"] = s.DcuNo
	s.fieldMap["dtc_no"] = s.DtcNo
	s.fieldMap["unit_no"] = s.UnitNo
	s.fieldMap["seat_type"] = s.SeatType
	s.fieldMap["locker_pwd"] = s.LockerPwd
	s.fieldMap["use_yn"] = s.UseYn
}

func (s seatIPSetting) clone(db *gorm.DB) seatIPSetting {
	s.seatIPSettingDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatIPSetting) replaceDB(db *gorm.DB) seatIPSetting {
	s.seatIPSettingDo.ReplaceDB(db)
	return s
}

type seatIPSettingDo struct{ gen.DO }

type ISeatIPSettingDo interface {
	gen.SubQuery
	Debug() ISeatIPSettingDo
	WithContext(ctx context.Context) ISeatIPSettingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatIPSettingDo
	WriteDB() ISeatIPSettingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatIPSettingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatIPSettingDo
	Not(conds ...gen.Condition) ISeatIPSettingDo
	Or(conds ...gen.Condition) ISeatIPSettingDo
	Select(conds ...field.Expr) ISeatIPSettingDo
	Where(conds ...gen.Condition) ISeatIPSettingDo
	Order(conds ...field.Expr) ISeatIPSettingDo
	Distinct(cols ...field.Expr) ISeatIPSettingDo
	Omit(cols ...field.Expr) ISeatIPSettingDo
	Join(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo
	Group(cols ...field.Expr) ISeatIPSettingDo
	Having(conds ...gen.Condition) ISeatIPSettingDo
	Limit(limit int) ISeatIPSettingDo
	Offset(offset int) ISeatIPSettingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatIPSettingDo
	Unscoped() ISeatIPSettingDo
	Create(values ...*model.SeatIPSetting) error
	CreateInBatches(values []*model.SeatIPSetting, batchSize int) error
	Save(values ...*model.SeatIPSetting) error
	First() (*model.SeatIPSetting, error)
	Take() (*model.SeatIPSetting, error)
	Last() (*model.SeatIPSetting, error)
	Find() ([]*model.SeatIPSetting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatIPSetting, err error)
	FindInBatches(result *[]*model.SeatIPSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatIPSetting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatIPSettingDo
	Assign(attrs ...field.AssignExpr) ISeatIPSettingDo
	Joins(fields ...field.RelationField) ISeatIPSettingDo
	Preload(fields ...field.RelationField) ISeatIPSettingDo
	FirstOrInit() (*model.SeatIPSetting, error)
	FirstOrCreate() (*model.SeatIPSetting, error)
	FindByPage(offset int, limit int) (result []*model.SeatIPSetting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatIPSettingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatIPSettingDo) Debug() ISeatIPSettingDo {
	return s.withDO(s.DO.Debug())
}

func (s seatIPSettingDo) WithContext(ctx context.Context) ISeatIPSettingDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatIPSettingDo) ReadDB() ISeatIPSettingDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatIPSettingDo) WriteDB() ISeatIPSettingDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatIPSettingDo) Session(config *gorm.Session) ISeatIPSettingDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatIPSettingDo) Clauses(conds ...clause.Expression) ISeatIPSettingDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatIPSettingDo) Returning(value interface{}, columns ...string) ISeatIPSettingDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatIPSettingDo) Not(conds ...gen.Condition) ISeatIPSettingDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatIPSettingDo) Or(conds ...gen.Condition) ISeatIPSettingDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatIPSettingDo) Select(conds ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatIPSettingDo) Where(conds ...gen.Condition) ISeatIPSettingDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatIPSettingDo) Order(conds ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatIPSettingDo) Distinct(cols ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatIPSettingDo) Omit(cols ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatIPSettingDo) Join(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatIPSettingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatIPSettingDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatIPSettingDo) Group(cols ...field.Expr) ISeatIPSettingDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatIPSettingDo) Having(conds ...gen.Condition) ISeatIPSettingDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatIPSettingDo) Limit(limit int) ISeatIPSettingDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatIPSettingDo) Offset(offset int) ISeatIPSettingDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatIPSettingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatIPSettingDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatIPSettingDo) Unscoped() ISeatIPSettingDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatIPSettingDo) Create(values ...*model.SeatIPSetting) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatIPSettingDo) CreateInBatches(values []*model.SeatIPSetting, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatIPSettingDo) Save(values ...*model.SeatIPSetting) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatIPSettingDo) First() (*model.SeatIPSetting, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatIPSetting), nil
	}
}

func (s seatIPSettingDo) Take() (*model.SeatIPSetting, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatIPSetting), nil
	}
}

func (s seatIPSettingDo) Last() (*model.SeatIPSetting, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatIPSetting), nil
	}
}

func (s seatIPSettingDo) Find() ([]*model.SeatIPSetting, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatIPSetting), err
}

func (s seatIPSettingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatIPSetting, err error) {
	buf := make([]*model.SeatIPSetting, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatIPSettingDo) FindInBatches(result *[]*model.SeatIPSetting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatIPSettingDo) Attrs(attrs ...field.AssignExpr) ISeatIPSettingDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatIPSettingDo) Assign(attrs ...field.AssignExpr) ISeatIPSettingDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatIPSettingDo) Joins(fields ...field.RelationField) ISeatIPSettingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatIPSettingDo) Preload(fields ...field.RelationField) ISeatIPSettingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatIPSettingDo) FirstOrInit() (*model.SeatIPSetting, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatIPSetting), nil
	}
}

func (s seatIPSettingDo) FirstOrCreate() (*model.SeatIPSetting, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatIPSetting), nil
	}
}

func (s seatIPSettingDo) FindByPage(offset int, limit int) (result []*model.SeatIPSetting, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatIPSettingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatIPSettingDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatIPSettingDo) Delete(models ...*model.SeatIPSetting) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatIPSettingDo) withDO(do gen.Dao) *seatIPSettingDo {
	s.DO = *do.(*gen.DO)
	return s
}
