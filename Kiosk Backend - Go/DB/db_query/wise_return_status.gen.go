// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseReturnStatus(db *gorm.DB, opts ...gen.DOOption) wiseReturnStatus {
	_wiseReturnStatus := wiseReturnStatus{}

	_wiseReturnStatus.wiseReturnStatusDo.UseDB(db, opts...)
	_wiseReturnStatus.wiseReturnStatusDo.UseModel(&model.WiseReturnStatus{})

	tableName := _wiseReturnStatus.wiseReturnStatusDo.TableName()
	_wiseReturnStatus.ALL = field.NewAsterisk(tableName)
	_wiseReturnStatus.PcNo = field.NewInt64(tableName, "pc_no")
	_wiseReturnStatus.Gubun = field.NewString(tableName, "gubun")
	_wiseReturnStatus.StatTime = field.NewString(tableName, "stat_time")
	_wiseReturnStatus.StatValue = field.NewString(tableName, "stat_value")

	_wiseReturnStatus.fillFieldMap()

	return _wiseReturnStatus
}

type wiseReturnStatus struct {
	wiseReturnStatusDo

	ALL       field.Asterisk
	PcNo      field.Int64
	Gubun     field.String
	StatTime  field.String
	StatValue field.String

	fieldMap map[string]field.Expr
}

func (w wiseReturnStatus) Table(newTableName string) *wiseReturnStatus {
	w.wiseReturnStatusDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseReturnStatus) As(alias string) *wiseReturnStatus {
	w.wiseReturnStatusDo.DO = *(w.wiseReturnStatusDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseReturnStatus) updateTableName(table string) *wiseReturnStatus {
	w.ALL = field.NewAsterisk(table)
	w.PcNo = field.NewInt64(table, "pc_no")
	w.Gubun = field.NewString(table, "gubun")
	w.StatTime = field.NewString(table, "stat_time")
	w.StatValue = field.NewString(table, "stat_value")

	w.fillFieldMap()

	return w
}

func (w *wiseReturnStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseReturnStatus) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["pc_no"] = w.PcNo
	w.fieldMap["gubun"] = w.Gubun
	w.fieldMap["stat_time"] = w.StatTime
	w.fieldMap["stat_value"] = w.StatValue
}

func (w wiseReturnStatus) clone(db *gorm.DB) wiseReturnStatus {
	w.wiseReturnStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseReturnStatus) replaceDB(db *gorm.DB) wiseReturnStatus {
	w.wiseReturnStatusDo.ReplaceDB(db)
	return w
}

type wiseReturnStatusDo struct{ gen.DO }

type IWiseReturnStatusDo interface {
	gen.SubQuery
	Debug() IWiseReturnStatusDo
	WithContext(ctx context.Context) IWiseReturnStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseReturnStatusDo
	WriteDB() IWiseReturnStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseReturnStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseReturnStatusDo
	Not(conds ...gen.Condition) IWiseReturnStatusDo
	Or(conds ...gen.Condition) IWiseReturnStatusDo
	Select(conds ...field.Expr) IWiseReturnStatusDo
	Where(conds ...gen.Condition) IWiseReturnStatusDo
	Order(conds ...field.Expr) IWiseReturnStatusDo
	Distinct(cols ...field.Expr) IWiseReturnStatusDo
	Omit(cols ...field.Expr) IWiseReturnStatusDo
	Join(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo
	Group(cols ...field.Expr) IWiseReturnStatusDo
	Having(conds ...gen.Condition) IWiseReturnStatusDo
	Limit(limit int) IWiseReturnStatusDo
	Offset(offset int) IWiseReturnStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnStatusDo
	Unscoped() IWiseReturnStatusDo
	Create(values ...*model.WiseReturnStatus) error
	CreateInBatches(values []*model.WiseReturnStatus, batchSize int) error
	Save(values ...*model.WiseReturnStatus) error
	First() (*model.WiseReturnStatus, error)
	Take() (*model.WiseReturnStatus, error)
	Last() (*model.WiseReturnStatus, error)
	Find() ([]*model.WiseReturnStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnStatus, err error)
	FindInBatches(result *[]*model.WiseReturnStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseReturnStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseReturnStatusDo
	Assign(attrs ...field.AssignExpr) IWiseReturnStatusDo
	Joins(fields ...field.RelationField) IWiseReturnStatusDo
	Preload(fields ...field.RelationField) IWiseReturnStatusDo
	FirstOrInit() (*model.WiseReturnStatus, error)
	FirstOrCreate() (*model.WiseReturnStatus, error)
	FindByPage(offset int, limit int) (result []*model.WiseReturnStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseReturnStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseReturnStatusDo) Debug() IWiseReturnStatusDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseReturnStatusDo) WithContext(ctx context.Context) IWiseReturnStatusDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseReturnStatusDo) ReadDB() IWiseReturnStatusDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseReturnStatusDo) WriteDB() IWiseReturnStatusDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseReturnStatusDo) Session(config *gorm.Session) IWiseReturnStatusDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseReturnStatusDo) Clauses(conds ...clause.Expression) IWiseReturnStatusDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseReturnStatusDo) Returning(value interface{}, columns ...string) IWiseReturnStatusDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseReturnStatusDo) Not(conds ...gen.Condition) IWiseReturnStatusDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseReturnStatusDo) Or(conds ...gen.Condition) IWiseReturnStatusDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseReturnStatusDo) Select(conds ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseReturnStatusDo) Where(conds ...gen.Condition) IWiseReturnStatusDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseReturnStatusDo) Order(conds ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseReturnStatusDo) Distinct(cols ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseReturnStatusDo) Omit(cols ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseReturnStatusDo) Join(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseReturnStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseReturnStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseReturnStatusDo) Group(cols ...field.Expr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseReturnStatusDo) Having(conds ...gen.Condition) IWiseReturnStatusDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseReturnStatusDo) Limit(limit int) IWiseReturnStatusDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseReturnStatusDo) Offset(offset int) IWiseReturnStatusDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseReturnStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnStatusDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseReturnStatusDo) Unscoped() IWiseReturnStatusDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseReturnStatusDo) Create(values ...*model.WiseReturnStatus) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseReturnStatusDo) CreateInBatches(values []*model.WiseReturnStatus, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseReturnStatusDo) Save(values ...*model.WiseReturnStatus) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseReturnStatusDo) First() (*model.WiseReturnStatus, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnStatus), nil
	}
}

func (w wiseReturnStatusDo) Take() (*model.WiseReturnStatus, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnStatus), nil
	}
}

func (w wiseReturnStatusDo) Last() (*model.WiseReturnStatus, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnStatus), nil
	}
}

func (w wiseReturnStatusDo) Find() ([]*model.WiseReturnStatus, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseReturnStatus), err
}

func (w wiseReturnStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnStatus, err error) {
	buf := make([]*model.WiseReturnStatus, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseReturnStatusDo) FindInBatches(result *[]*model.WiseReturnStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseReturnStatusDo) Attrs(attrs ...field.AssignExpr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseReturnStatusDo) Assign(attrs ...field.AssignExpr) IWiseReturnStatusDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseReturnStatusDo) Joins(fields ...field.RelationField) IWiseReturnStatusDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseReturnStatusDo) Preload(fields ...field.RelationField) IWiseReturnStatusDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseReturnStatusDo) FirstOrInit() (*model.WiseReturnStatus, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnStatus), nil
	}
}

func (w wiseReturnStatusDo) FirstOrCreate() (*model.WiseReturnStatus, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnStatus), nil
	}
}

func (w wiseReturnStatusDo) FindByPage(offset int, limit int) (result []*model.WiseReturnStatus, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseReturnStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseReturnStatusDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseReturnStatusDo) Delete(models ...*model.WiseReturnStatus) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseReturnStatusDo) withDO(do gen.Dao) *wiseReturnStatusDo {
	w.DO = *do.(*gen.DO)
	return w
}
