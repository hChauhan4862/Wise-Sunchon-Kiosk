// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseSroomReserve(db *gorm.DB, opts ...gen.DOOption) wiseSroomReserve {
	_wiseSroomReserve := wiseSroomReserve{}

	_wiseSroomReserve.wiseSroomReserveDo.UseDB(db, opts...)
	_wiseSroomReserve.wiseSroomReserveDo.UseModel(&model.WiseSroomReserve{})

	tableName := _wiseSroomReserve.wiseSroomReserveDo.TableName()
	_wiseSroomReserve.ALL = field.NewAsterisk(tableName)
	_wiseSroomReserve.ReserveNo = field.NewString(tableName, "reserve_no")
	_wiseSroomReserve.SroomNo = field.NewInt64(tableName, "sroom_no")
	_wiseSroomReserve.SroomName = field.NewString(tableName, "sroom_name")
	_wiseSroomReserve.InputTime = field.NewString(tableName, "input_time")
	_wiseSroomReserve.ReserveDate = field.NewString(tableName, "reserve_date")
	_wiseSroomReserve.StartTime = field.NewString(tableName, "start_time")
	_wiseSroomReserve.EndTime = field.NewString(tableName, "end_time")
	_wiseSroomReserve.UserID = field.NewString(tableName, "user_id")
	_wiseSroomReserve.UserName = field.NewString(tableName, "user_name")
	_wiseSroomReserve.UserComment = field.NewString(tableName, "user_comment")
	_wiseSroomReserve.UseMan = field.NewInt64(tableName, "use_man")
	_wiseSroomReserve.CouserIds = field.NewString(tableName, "couser_ids")
	_wiseSroomReserve.ReserveStat = field.NewInt64(tableName, "reserve_stat")
	_wiseSroomReserve.CanBigo = field.NewString(tableName, "can_bigo")
	_wiseSroomReserve.Bigo = field.NewString(tableName, "bigo")
	_wiseSroomReserve.ReserveSeq = field.NewInt64(tableName, "reserve_seq")

	_wiseSroomReserve.fillFieldMap()

	return _wiseSroomReserve
}

type wiseSroomReserve struct {
	wiseSroomReserveDo

	ALL         field.Asterisk
	ReserveNo   field.String
	SroomNo     field.Int64
	SroomName   field.String
	InputTime   field.String
	ReserveDate field.String
	StartTime   field.String
	EndTime     field.String
	UserID      field.String
	UserName    field.String
	UserComment field.String
	UseMan      field.Int64
	CouserIds   field.String
	ReserveStat field.Int64
	CanBigo     field.String
	Bigo        field.String
	ReserveSeq  field.Int64

	fieldMap map[string]field.Expr
}

func (w wiseSroomReserve) Table(newTableName string) *wiseSroomReserve {
	w.wiseSroomReserveDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseSroomReserve) As(alias string) *wiseSroomReserve {
	w.wiseSroomReserveDo.DO = *(w.wiseSroomReserveDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseSroomReserve) updateTableName(table string) *wiseSroomReserve {
	w.ALL = field.NewAsterisk(table)
	w.ReserveNo = field.NewString(table, "reserve_no")
	w.SroomNo = field.NewInt64(table, "sroom_no")
	w.SroomName = field.NewString(table, "sroom_name")
	w.InputTime = field.NewString(table, "input_time")
	w.ReserveDate = field.NewString(table, "reserve_date")
	w.StartTime = field.NewString(table, "start_time")
	w.EndTime = field.NewString(table, "end_time")
	w.UserID = field.NewString(table, "user_id")
	w.UserName = field.NewString(table, "user_name")
	w.UserComment = field.NewString(table, "user_comment")
	w.UseMan = field.NewInt64(table, "use_man")
	w.CouserIds = field.NewString(table, "couser_ids")
	w.ReserveStat = field.NewInt64(table, "reserve_stat")
	w.CanBigo = field.NewString(table, "can_bigo")
	w.Bigo = field.NewString(table, "bigo")
	w.ReserveSeq = field.NewInt64(table, "reserve_seq")

	w.fillFieldMap()

	return w
}

func (w *wiseSroomReserve) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseSroomReserve) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 16)
	w.fieldMap["reserve_no"] = w.ReserveNo
	w.fieldMap["sroom_no"] = w.SroomNo
	w.fieldMap["sroom_name"] = w.SroomName
	w.fieldMap["input_time"] = w.InputTime
	w.fieldMap["reserve_date"] = w.ReserveDate
	w.fieldMap["start_time"] = w.StartTime
	w.fieldMap["end_time"] = w.EndTime
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["user_name"] = w.UserName
	w.fieldMap["user_comment"] = w.UserComment
	w.fieldMap["use_man"] = w.UseMan
	w.fieldMap["couser_ids"] = w.CouserIds
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["can_bigo"] = w.CanBigo
	w.fieldMap["bigo"] = w.Bigo
	w.fieldMap["reserve_seq"] = w.ReserveSeq
}

func (w wiseSroomReserve) clone(db *gorm.DB) wiseSroomReserve {
	w.wiseSroomReserveDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseSroomReserve) replaceDB(db *gorm.DB) wiseSroomReserve {
	w.wiseSroomReserveDo.ReplaceDB(db)
	return w
}

type wiseSroomReserveDo struct{ gen.DO }

type IWiseSroomReserveDo interface {
	gen.SubQuery
	Debug() IWiseSroomReserveDo
	WithContext(ctx context.Context) IWiseSroomReserveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseSroomReserveDo
	WriteDB() IWiseSroomReserveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseSroomReserveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseSroomReserveDo
	Not(conds ...gen.Condition) IWiseSroomReserveDo
	Or(conds ...gen.Condition) IWiseSroomReserveDo
	Select(conds ...field.Expr) IWiseSroomReserveDo
	Where(conds ...gen.Condition) IWiseSroomReserveDo
	Order(conds ...field.Expr) IWiseSroomReserveDo
	Distinct(cols ...field.Expr) IWiseSroomReserveDo
	Omit(cols ...field.Expr) IWiseSroomReserveDo
	Join(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo
	Group(cols ...field.Expr) IWiseSroomReserveDo
	Having(conds ...gen.Condition) IWiseSroomReserveDo
	Limit(limit int) IWiseSroomReserveDo
	Offset(offset int) IWiseSroomReserveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomReserveDo
	Unscoped() IWiseSroomReserveDo
	Create(values ...*model.WiseSroomReserve) error
	CreateInBatches(values []*model.WiseSroomReserve, batchSize int) error
	Save(values ...*model.WiseSroomReserve) error
	First() (*model.WiseSroomReserve, error)
	Take() (*model.WiseSroomReserve, error)
	Last() (*model.WiseSroomReserve, error)
	Find() ([]*model.WiseSroomReserve, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroomReserve, err error)
	FindInBatches(result *[]*model.WiseSroomReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseSroomReserve) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseSroomReserveDo
	Assign(attrs ...field.AssignExpr) IWiseSroomReserveDo
	Joins(fields ...field.RelationField) IWiseSroomReserveDo
	Preload(fields ...field.RelationField) IWiseSroomReserveDo
	FirstOrInit() (*model.WiseSroomReserve, error)
	FirstOrCreate() (*model.WiseSroomReserve, error)
	FindByPage(offset int, limit int) (result []*model.WiseSroomReserve, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseSroomReserveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseSroomReserveDo) Debug() IWiseSroomReserveDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseSroomReserveDo) WithContext(ctx context.Context) IWiseSroomReserveDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseSroomReserveDo) ReadDB() IWiseSroomReserveDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseSroomReserveDo) WriteDB() IWiseSroomReserveDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseSroomReserveDo) Session(config *gorm.Session) IWiseSroomReserveDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseSroomReserveDo) Clauses(conds ...clause.Expression) IWiseSroomReserveDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseSroomReserveDo) Returning(value interface{}, columns ...string) IWiseSroomReserveDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseSroomReserveDo) Not(conds ...gen.Condition) IWiseSroomReserveDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseSroomReserveDo) Or(conds ...gen.Condition) IWiseSroomReserveDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseSroomReserveDo) Select(conds ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseSroomReserveDo) Where(conds ...gen.Condition) IWiseSroomReserveDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseSroomReserveDo) Order(conds ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseSroomReserveDo) Distinct(cols ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseSroomReserveDo) Omit(cols ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseSroomReserveDo) Join(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseSroomReserveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseSroomReserveDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseSroomReserveDo) Group(cols ...field.Expr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseSroomReserveDo) Having(conds ...gen.Condition) IWiseSroomReserveDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseSroomReserveDo) Limit(limit int) IWiseSroomReserveDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseSroomReserveDo) Offset(offset int) IWiseSroomReserveDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseSroomReserveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomReserveDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseSroomReserveDo) Unscoped() IWiseSroomReserveDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseSroomReserveDo) Create(values ...*model.WiseSroomReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseSroomReserveDo) CreateInBatches(values []*model.WiseSroomReserve, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseSroomReserveDo) Save(values ...*model.WiseSroomReserve) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseSroomReserveDo) First() (*model.WiseSroomReserve, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomReserve), nil
	}
}

func (w wiseSroomReserveDo) Take() (*model.WiseSroomReserve, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomReserve), nil
	}
}

func (w wiseSroomReserveDo) Last() (*model.WiseSroomReserve, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomReserve), nil
	}
}

func (w wiseSroomReserveDo) Find() ([]*model.WiseSroomReserve, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseSroomReserve), err
}

func (w wiseSroomReserveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroomReserve, err error) {
	buf := make([]*model.WiseSroomReserve, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseSroomReserveDo) FindInBatches(result *[]*model.WiseSroomReserve, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseSroomReserveDo) Attrs(attrs ...field.AssignExpr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseSroomReserveDo) Assign(attrs ...field.AssignExpr) IWiseSroomReserveDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseSroomReserveDo) Joins(fields ...field.RelationField) IWiseSroomReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseSroomReserveDo) Preload(fields ...field.RelationField) IWiseSroomReserveDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseSroomReserveDo) FirstOrInit() (*model.WiseSroomReserve, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomReserve), nil
	}
}

func (w wiseSroomReserveDo) FirstOrCreate() (*model.WiseSroomReserve, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomReserve), nil
	}
}

func (w wiseSroomReserveDo) FindByPage(offset int, limit int) (result []*model.WiseSroomReserve, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseSroomReserveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseSroomReserveDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseSroomReserveDo) Delete(models ...*model.WiseSroomReserve) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseSroomReserveDo) withDO(do gen.Dao) *wiseSroomReserveDo {
	w.DO = *do.(*gen.DO)
	return w
}
