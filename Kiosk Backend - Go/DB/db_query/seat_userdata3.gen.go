// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_seat_userdata3(db *gorm.DB, opts ...gen.DOOption) hCV_seat_userdata3 {
	_hCV_seat_userdata3 := hCV_seat_userdata3{}

	_hCV_seat_userdata3.hCV_seat_userdata3Do.UseDB(db, opts...)
	_hCV_seat_userdata3.hCV_seat_userdata3Do.UseModel(&model.HCV_seat_userdata3{})

	tableName := _hCV_seat_userdata3.hCV_seat_userdata3Do.TableName()
	_hCV_seat_userdata3.ALL = field.NewAsterisk(tableName)
	_hCV_seat_userdata3.Pid = field.NewString(tableName, "pid")
	_hCV_seat_userdata3.JuminBunho = field.NewString(tableName, "jumin_bunho")
	_hCV_seat_userdata3.Password = field.NewString(tableName, "password")
	_hCV_seat_userdata3.PatType = field.NewString(tableName, "pat_type")
	_hCV_seat_userdata3.PatTypeDesc = field.NewString(tableName, "pat_type_desc")
	_hCV_seat_userdata3.Name = field.NewString(tableName, "name")
	_hCV_seat_userdata3.DeptCode = field.NewString(tableName, "dept_code")
	_hCV_seat_userdata3.DeptName = field.NewString(tableName, "dept_name")
	_hCV_seat_userdata3.CardIssueCnt = field.NewInt64(tableName, "card_issue_cnt")
	_hCV_seat_userdata3.DateExprd = field.NewString(tableName, "date_exprd")
	_hCV_seat_userdata3.Email = field.NewString(tableName, "email")
	_hCV_seat_userdata3.Phone1 = field.NewString(tableName, "phone1")
	_hCV_seat_userdata3.Status = field.NewString(tableName, "status")
	_hCV_seat_userdata3.StatusName = field.NewString(tableName, "status_name")
	_hCV_seat_userdata3.PhotoURL = field.NewString(tableName, "photo_url")
	_hCV_seat_userdata3.SchoolNo = field.NewString(tableName, "school_no")

	_hCV_seat_userdata3.fillFieldMap()

	return _hCV_seat_userdata3
}

type hCV_seat_userdata3 struct {
	hCV_seat_userdata3Do

	ALL          field.Asterisk
	Pid          field.String
	JuminBunho   field.String
	Password     field.String
	PatType      field.String
	PatTypeDesc  field.String
	Name         field.String
	DeptCode     field.String
	DeptName     field.String
	CardIssueCnt field.Int64
	DateExprd    field.String
	Email        field.String
	Phone1       field.String
	Status       field.String
	StatusName   field.String
	PhotoURL     field.String
	SchoolNo     field.String

	fieldMap map[string]field.Expr
}

func (h hCV_seat_userdata3) Table(newTableName string) *hCV_seat_userdata3 {
	h.hCV_seat_userdata3Do.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_seat_userdata3) As(alias string) *hCV_seat_userdata3 {
	h.hCV_seat_userdata3Do.DO = *(h.hCV_seat_userdata3Do.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_seat_userdata3) updateTableName(table string) *hCV_seat_userdata3 {
	h.ALL = field.NewAsterisk(table)
	h.Pid = field.NewString(table, "pid")
	h.JuminBunho = field.NewString(table, "jumin_bunho")
	h.Password = field.NewString(table, "password")
	h.PatType = field.NewString(table, "pat_type")
	h.PatTypeDesc = field.NewString(table, "pat_type_desc")
	h.Name = field.NewString(table, "name")
	h.DeptCode = field.NewString(table, "dept_code")
	h.DeptName = field.NewString(table, "dept_name")
	h.CardIssueCnt = field.NewInt64(table, "card_issue_cnt")
	h.DateExprd = field.NewString(table, "date_exprd")
	h.Email = field.NewString(table, "email")
	h.Phone1 = field.NewString(table, "phone1")
	h.Status = field.NewString(table, "status")
	h.StatusName = field.NewString(table, "status_name")
	h.PhotoURL = field.NewString(table, "photo_url")
	h.SchoolNo = field.NewString(table, "school_no")

	h.fillFieldMap()

	return h
}

func (h *hCV_seat_userdata3) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_seat_userdata3) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 16)
	h.fieldMap["pid"] = h.Pid
	h.fieldMap["jumin_bunho"] = h.JuminBunho
	h.fieldMap["password"] = h.Password
	h.fieldMap["pat_type"] = h.PatType
	h.fieldMap["pat_type_desc"] = h.PatTypeDesc
	h.fieldMap["name"] = h.Name
	h.fieldMap["dept_code"] = h.DeptCode
	h.fieldMap["dept_name"] = h.DeptName
	h.fieldMap["card_issue_cnt"] = h.CardIssueCnt
	h.fieldMap["date_exprd"] = h.DateExprd
	h.fieldMap["email"] = h.Email
	h.fieldMap["phone1"] = h.Phone1
	h.fieldMap["status"] = h.Status
	h.fieldMap["status_name"] = h.StatusName
	h.fieldMap["photo_url"] = h.PhotoURL
	h.fieldMap["school_no"] = h.SchoolNo
}

func (h hCV_seat_userdata3) clone(db *gorm.DB) hCV_seat_userdata3 {
	h.hCV_seat_userdata3Do.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_seat_userdata3) replaceDB(db *gorm.DB) hCV_seat_userdata3 {
	h.hCV_seat_userdata3Do.ReplaceDB(db)
	return h
}

type hCV_seat_userdata3Do struct{ gen.DO }

type IHCV_seat_userdata3Do interface {
	gen.SubQuery
	Debug() IHCV_seat_userdata3Do
	WithContext(ctx context.Context) IHCV_seat_userdata3Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_seat_userdata3Do
	WriteDB() IHCV_seat_userdata3Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_seat_userdata3Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_seat_userdata3Do
	Not(conds ...gen.Condition) IHCV_seat_userdata3Do
	Or(conds ...gen.Condition) IHCV_seat_userdata3Do
	Select(conds ...field.Expr) IHCV_seat_userdata3Do
	Where(conds ...gen.Condition) IHCV_seat_userdata3Do
	Order(conds ...field.Expr) IHCV_seat_userdata3Do
	Distinct(cols ...field.Expr) IHCV_seat_userdata3Do
	Omit(cols ...field.Expr) IHCV_seat_userdata3Do
	Join(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do
	Group(cols ...field.Expr) IHCV_seat_userdata3Do
	Having(conds ...gen.Condition) IHCV_seat_userdata3Do
	Limit(limit int) IHCV_seat_userdata3Do
	Offset(offset int) IHCV_seat_userdata3Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_seat_userdata3Do
	Unscoped() IHCV_seat_userdata3Do
	Create(values ...*model.HCV_seat_userdata3) error
	CreateInBatches(values []*model.HCV_seat_userdata3, batchSize int) error
	Save(values ...*model.HCV_seat_userdata3) error
	First() (*model.HCV_seat_userdata3, error)
	Take() (*model.HCV_seat_userdata3, error)
	Last() (*model.HCV_seat_userdata3, error)
	Find() ([]*model.HCV_seat_userdata3, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_seat_userdata3, err error)
	FindInBatches(result *[]*model.HCV_seat_userdata3, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_seat_userdata3) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_seat_userdata3Do
	Assign(attrs ...field.AssignExpr) IHCV_seat_userdata3Do
	Joins(fields ...field.RelationField) IHCV_seat_userdata3Do
	Preload(fields ...field.RelationField) IHCV_seat_userdata3Do
	FirstOrInit() (*model.HCV_seat_userdata3, error)
	FirstOrCreate() (*model.HCV_seat_userdata3, error)
	FindByPage(offset int, limit int) (result []*model.HCV_seat_userdata3, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_seat_userdata3Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_seat_userdata3Do) Debug() IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Debug())
}

func (h hCV_seat_userdata3Do) WithContext(ctx context.Context) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_seat_userdata3Do) ReadDB() IHCV_seat_userdata3Do {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_seat_userdata3Do) WriteDB() IHCV_seat_userdata3Do {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_seat_userdata3Do) Session(config *gorm.Session) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_seat_userdata3Do) Clauses(conds ...clause.Expression) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_seat_userdata3Do) Returning(value interface{}, columns ...string) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_seat_userdata3Do) Not(conds ...gen.Condition) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_seat_userdata3Do) Or(conds ...gen.Condition) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_seat_userdata3Do) Select(conds ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_seat_userdata3Do) Where(conds ...gen.Condition) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_seat_userdata3Do) Order(conds ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_seat_userdata3Do) Distinct(cols ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_seat_userdata3Do) Omit(cols ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_seat_userdata3Do) Join(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_seat_userdata3Do) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_seat_userdata3Do) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_seat_userdata3Do) Group(cols ...field.Expr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_seat_userdata3Do) Having(conds ...gen.Condition) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_seat_userdata3Do) Limit(limit int) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_seat_userdata3Do) Offset(offset int) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_seat_userdata3Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_seat_userdata3Do) Unscoped() IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_seat_userdata3Do) Create(values ...*model.HCV_seat_userdata3) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_seat_userdata3Do) CreateInBatches(values []*model.HCV_seat_userdata3, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_seat_userdata3Do) Save(values ...*model.HCV_seat_userdata3) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_seat_userdata3Do) First() (*model.HCV_seat_userdata3, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_seat_userdata3), nil
	}
}

func (h hCV_seat_userdata3Do) Take() (*model.HCV_seat_userdata3, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_seat_userdata3), nil
	}
}

func (h hCV_seat_userdata3Do) Last() (*model.HCV_seat_userdata3, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_seat_userdata3), nil
	}
}

func (h hCV_seat_userdata3Do) Find() ([]*model.HCV_seat_userdata3, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_seat_userdata3), err
}

func (h hCV_seat_userdata3Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_seat_userdata3, err error) {
	buf := make([]*model.HCV_seat_userdata3, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_seat_userdata3Do) FindInBatches(result *[]*model.HCV_seat_userdata3, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_seat_userdata3Do) Attrs(attrs ...field.AssignExpr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_seat_userdata3Do) Assign(attrs ...field.AssignExpr) IHCV_seat_userdata3Do {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_seat_userdata3Do) Joins(fields ...field.RelationField) IHCV_seat_userdata3Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_seat_userdata3Do) Preload(fields ...field.RelationField) IHCV_seat_userdata3Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_seat_userdata3Do) FirstOrInit() (*model.HCV_seat_userdata3, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_seat_userdata3), nil
	}
}

func (h hCV_seat_userdata3Do) FirstOrCreate() (*model.HCV_seat_userdata3, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_seat_userdata3), nil
	}
}

func (h hCV_seat_userdata3Do) FindByPage(offset int, limit int) (result []*model.HCV_seat_userdata3, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_seat_userdata3Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_seat_userdata3Do) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_seat_userdata3Do) Delete(models ...*model.HCV_seat_userdata3) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_seat_userdata3Do) withDO(do gen.Dao) *hCV_seat_userdata3Do {
	h.DO = *do.(*gen.DO)
	return h
}
