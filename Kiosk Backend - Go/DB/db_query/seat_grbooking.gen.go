// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatGrbooking(db *gorm.DB, opts ...gen.DOOption) seatGrbooking {
	_seatGrbooking := seatGrbooking{}

	_seatGrbooking.seatGrbookingDo.UseDB(db, opts...)
	_seatGrbooking.seatGrbookingDo.UseModel(&model.SeatGrbooking{})

	tableName := _seatGrbooking.seatGrbookingDo.TableName()
	_seatGrbooking.ALL = field.NewAsterisk(tableName)
	_seatGrbooking.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_seatGrbooking.MEMBERS = field.NewString(tableName, "MEMBERS")
	_seatGrbooking.PURPOSE = field.NewString(tableName, "PURPOSE")
	_seatGrbooking.MEMBERCNT = field.NewInt64(tableName, "MEMBERCNT")
	_seatGrbooking.EMAIL = field.NewString(tableName, "EMAIL")
	_seatGrbooking.TEL = field.NewString(tableName, "TEL")
	_seatGrbooking.USESTART = field.NewTime(tableName, "USESTART")
	_seatGrbooking.USEEXPIRE = field.NewTime(tableName, "USEEXPIRE")
	_seatGrbooking.KEYSTATUS = field.NewInt64(tableName, "KEY_STATUS")
	_seatGrbooking.PURPOSENO = field.NewInt64(tableName, "PURPOSE_NO")

	_seatGrbooking.fillFieldMap()

	return _seatGrbooking
}

type seatGrbooking struct {
	seatGrbookingDo

	ALL       field.Asterisk
	BSEQNO    field.Int64
	MEMBERS   field.String
	PURPOSE   field.String
	MEMBERCNT field.Int64
	EMAIL     field.String
	TEL       field.String
	USESTART  field.Time
	USEEXPIRE field.Time
	KEYSTATUS field.Int64
	PURPOSENO field.Int64

	fieldMap map[string]field.Expr
}

func (s seatGrbooking) Table(newTableName string) *seatGrbooking {
	s.seatGrbookingDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatGrbooking) As(alias string) *seatGrbooking {
	s.seatGrbookingDo.DO = *(s.seatGrbookingDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatGrbooking) updateTableName(table string) *seatGrbooking {
	s.ALL = field.NewAsterisk(table)
	s.BSEQNO = field.NewInt64(table, "BSEQNO")
	s.MEMBERS = field.NewString(table, "MEMBERS")
	s.PURPOSE = field.NewString(table, "PURPOSE")
	s.MEMBERCNT = field.NewInt64(table, "MEMBERCNT")
	s.EMAIL = field.NewString(table, "EMAIL")
	s.TEL = field.NewString(table, "TEL")
	s.USESTART = field.NewTime(table, "USESTART")
	s.USEEXPIRE = field.NewTime(table, "USEEXPIRE")
	s.KEYSTATUS = field.NewInt64(table, "KEY_STATUS")
	s.PURPOSENO = field.NewInt64(table, "PURPOSE_NO")

	s.fillFieldMap()

	return s
}

func (s *seatGrbooking) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatGrbooking) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["BSEQNO"] = s.BSEQNO
	s.fieldMap["MEMBERS"] = s.MEMBERS
	s.fieldMap["PURPOSE"] = s.PURPOSE
	s.fieldMap["MEMBERCNT"] = s.MEMBERCNT
	s.fieldMap["EMAIL"] = s.EMAIL
	s.fieldMap["TEL"] = s.TEL
	s.fieldMap["USESTART"] = s.USESTART
	s.fieldMap["USEEXPIRE"] = s.USEEXPIRE
	s.fieldMap["KEY_STATUS"] = s.KEYSTATUS
	s.fieldMap["PURPOSE_NO"] = s.PURPOSENO
}

func (s seatGrbooking) clone(db *gorm.DB) seatGrbooking {
	s.seatGrbookingDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatGrbooking) replaceDB(db *gorm.DB) seatGrbooking {
	s.seatGrbookingDo.ReplaceDB(db)
	return s
}

type seatGrbookingDo struct{ gen.DO }

type ISeatGrbookingDo interface {
	gen.SubQuery
	Debug() ISeatGrbookingDo
	WithContext(ctx context.Context) ISeatGrbookingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatGrbookingDo
	WriteDB() ISeatGrbookingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatGrbookingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatGrbookingDo
	Not(conds ...gen.Condition) ISeatGrbookingDo
	Or(conds ...gen.Condition) ISeatGrbookingDo
	Select(conds ...field.Expr) ISeatGrbookingDo
	Where(conds ...gen.Condition) ISeatGrbookingDo
	Order(conds ...field.Expr) ISeatGrbookingDo
	Distinct(cols ...field.Expr) ISeatGrbookingDo
	Omit(cols ...field.Expr) ISeatGrbookingDo
	Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo
	Group(cols ...field.Expr) ISeatGrbookingDo
	Having(conds ...gen.Condition) ISeatGrbookingDo
	Limit(limit int) ISeatGrbookingDo
	Offset(offset int) ISeatGrbookingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingDo
	Unscoped() ISeatGrbookingDo
	Create(values ...*model.SeatGrbooking) error
	CreateInBatches(values []*model.SeatGrbooking, batchSize int) error
	Save(values ...*model.SeatGrbooking) error
	First() (*model.SeatGrbooking, error)
	Take() (*model.SeatGrbooking, error)
	Last() (*model.SeatGrbooking, error)
	Find() ([]*model.SeatGrbooking, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbooking, err error)
	FindInBatches(result *[]*model.SeatGrbooking, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatGrbooking) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatGrbookingDo
	Assign(attrs ...field.AssignExpr) ISeatGrbookingDo
	Joins(fields ...field.RelationField) ISeatGrbookingDo
	Preload(fields ...field.RelationField) ISeatGrbookingDo
	FirstOrInit() (*model.SeatGrbooking, error)
	FirstOrCreate() (*model.SeatGrbooking, error)
	FindByPage(offset int, limit int) (result []*model.SeatGrbooking, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatGrbookingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatGrbookingDo) Debug() ISeatGrbookingDo {
	return s.withDO(s.DO.Debug())
}

func (s seatGrbookingDo) WithContext(ctx context.Context) ISeatGrbookingDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatGrbookingDo) ReadDB() ISeatGrbookingDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatGrbookingDo) WriteDB() ISeatGrbookingDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatGrbookingDo) Session(config *gorm.Session) ISeatGrbookingDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatGrbookingDo) Clauses(conds ...clause.Expression) ISeatGrbookingDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatGrbookingDo) Returning(value interface{}, columns ...string) ISeatGrbookingDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatGrbookingDo) Not(conds ...gen.Condition) ISeatGrbookingDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatGrbookingDo) Or(conds ...gen.Condition) ISeatGrbookingDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatGrbookingDo) Select(conds ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatGrbookingDo) Where(conds ...gen.Condition) ISeatGrbookingDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatGrbookingDo) Order(conds ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatGrbookingDo) Distinct(cols ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatGrbookingDo) Omit(cols ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatGrbookingDo) Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatGrbookingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatGrbookingDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatGrbookingDo) Group(cols ...field.Expr) ISeatGrbookingDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatGrbookingDo) Having(conds ...gen.Condition) ISeatGrbookingDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatGrbookingDo) Limit(limit int) ISeatGrbookingDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatGrbookingDo) Offset(offset int) ISeatGrbookingDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatGrbookingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatGrbookingDo) Unscoped() ISeatGrbookingDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatGrbookingDo) Create(values ...*model.SeatGrbooking) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatGrbookingDo) CreateInBatches(values []*model.SeatGrbooking, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatGrbookingDo) Save(values ...*model.SeatGrbooking) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatGrbookingDo) First() (*model.SeatGrbooking, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbooking), nil
	}
}

func (s seatGrbookingDo) Take() (*model.SeatGrbooking, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbooking), nil
	}
}

func (s seatGrbookingDo) Last() (*model.SeatGrbooking, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbooking), nil
	}
}

func (s seatGrbookingDo) Find() ([]*model.SeatGrbooking, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatGrbooking), err
}

func (s seatGrbookingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbooking, err error) {
	buf := make([]*model.SeatGrbooking, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatGrbookingDo) FindInBatches(result *[]*model.SeatGrbooking, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatGrbookingDo) Attrs(attrs ...field.AssignExpr) ISeatGrbookingDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatGrbookingDo) Assign(attrs ...field.AssignExpr) ISeatGrbookingDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatGrbookingDo) Joins(fields ...field.RelationField) ISeatGrbookingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatGrbookingDo) Preload(fields ...field.RelationField) ISeatGrbookingDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatGrbookingDo) FirstOrInit() (*model.SeatGrbooking, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbooking), nil
	}
}

func (s seatGrbookingDo) FirstOrCreate() (*model.SeatGrbooking, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbooking), nil
	}
}

func (s seatGrbookingDo) FindByPage(offset int, limit int) (result []*model.SeatGrbooking, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatGrbookingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatGrbookingDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatGrbookingDo) Delete(models ...*model.SeatGrbooking) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatGrbookingDo) withDO(do gen.Dao) *seatGrbookingDo {
	s.DO = *do.(*gen.DO)
	return s
}
