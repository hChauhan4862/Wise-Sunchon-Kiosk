// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newLASUSER(db *gorm.DB, opts ...gen.DOOption) lASUSER {
	_lASUSER := lASUSER{}

	_lASUSER.lASUSERDo.UseDB(db, opts...)
	_lASUSER.lASUSERDo.UseModel(&model.LASUSER{})

	tableName := _lASUSER.lASUSERDo.TableName()
	_lASUSER.ALL = field.NewAsterisk(tableName)
	_lASUSER.PID = field.NewString(tableName, "PID")
	_lASUSER.RID = field.NewString(tableName, "RID")
	_lASUSER.NAME = field.NewString(tableName, "NAME")
	_lASUSER.PATCODE = field.NewString(tableName, "PATCODE")
	_lASUSER.PATNAME = field.NewString(tableName, "PATNAME")
	_lASUSER.DEPTCODE = field.NewString(tableName, "DEPTCODE")
	_lASUSER.DEPTNAME = field.NewString(tableName, "DEPTNAME")

	_lASUSER.fillFieldMap()

	return _lASUSER
}

type lASUSER struct {
	lASUSERDo

	ALL      field.Asterisk
	PID      field.String
	RID      field.String
	NAME     field.String
	PATCODE  field.String
	PATNAME  field.String
	DEPTCODE field.String
	DEPTNAME field.String

	fieldMap map[string]field.Expr
}

func (l lASUSER) Table(newTableName string) *lASUSER {
	l.lASUSERDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lASUSER) As(alias string) *lASUSER {
	l.lASUSERDo.DO = *(l.lASUSERDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lASUSER) updateTableName(table string) *lASUSER {
	l.ALL = field.NewAsterisk(table)
	l.PID = field.NewString(table, "PID")
	l.RID = field.NewString(table, "RID")
	l.NAME = field.NewString(table, "NAME")
	l.PATCODE = field.NewString(table, "PATCODE")
	l.PATNAME = field.NewString(table, "PATNAME")
	l.DEPTCODE = field.NewString(table, "DEPTCODE")
	l.DEPTNAME = field.NewString(table, "DEPTNAME")

	l.fillFieldMap()

	return l
}

func (l *lASUSER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lASUSER) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 7)
	l.fieldMap["PID"] = l.PID
	l.fieldMap["RID"] = l.RID
	l.fieldMap["NAME"] = l.NAME
	l.fieldMap["PATCODE"] = l.PATCODE
	l.fieldMap["PATNAME"] = l.PATNAME
	l.fieldMap["DEPTCODE"] = l.DEPTCODE
	l.fieldMap["DEPTNAME"] = l.DEPTNAME
}

func (l lASUSER) clone(db *gorm.DB) lASUSER {
	l.lASUSERDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lASUSER) replaceDB(db *gorm.DB) lASUSER {
	l.lASUSERDo.ReplaceDB(db)
	return l
}

type lASUSERDo struct{ gen.DO }

type ILASUSERDo interface {
	gen.SubQuery
	Debug() ILASUSERDo
	WithContext(ctx context.Context) ILASUSERDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILASUSERDo
	WriteDB() ILASUSERDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILASUSERDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILASUSERDo
	Not(conds ...gen.Condition) ILASUSERDo
	Or(conds ...gen.Condition) ILASUSERDo
	Select(conds ...field.Expr) ILASUSERDo
	Where(conds ...gen.Condition) ILASUSERDo
	Order(conds ...field.Expr) ILASUSERDo
	Distinct(cols ...field.Expr) ILASUSERDo
	Omit(cols ...field.Expr) ILASUSERDo
	Join(table schema.Tabler, on ...field.Expr) ILASUSERDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILASUSERDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILASUSERDo
	Group(cols ...field.Expr) ILASUSERDo
	Having(conds ...gen.Condition) ILASUSERDo
	Limit(limit int) ILASUSERDo
	Offset(offset int) ILASUSERDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILASUSERDo
	Unscoped() ILASUSERDo
	Create(values ...*model.LASUSER) error
	CreateInBatches(values []*model.LASUSER, batchSize int) error
	Save(values ...*model.LASUSER) error
	First() (*model.LASUSER, error)
	Take() (*model.LASUSER, error)
	Last() (*model.LASUSER, error)
	Find() ([]*model.LASUSER, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LASUSER, err error)
	FindInBatches(result *[]*model.LASUSER, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LASUSER) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILASUSERDo
	Assign(attrs ...field.AssignExpr) ILASUSERDo
	Joins(fields ...field.RelationField) ILASUSERDo
	Preload(fields ...field.RelationField) ILASUSERDo
	FirstOrInit() (*model.LASUSER, error)
	FirstOrCreate() (*model.LASUSER, error)
	FindByPage(offset int, limit int) (result []*model.LASUSER, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILASUSERDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lASUSERDo) Debug() ILASUSERDo {
	return l.withDO(l.DO.Debug())
}

func (l lASUSERDo) WithContext(ctx context.Context) ILASUSERDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lASUSERDo) ReadDB() ILASUSERDo {
	return l.Clauses(dbresolver.Read)
}

func (l lASUSERDo) WriteDB() ILASUSERDo {
	return l.Clauses(dbresolver.Write)
}

func (l lASUSERDo) Session(config *gorm.Session) ILASUSERDo {
	return l.withDO(l.DO.Session(config))
}

func (l lASUSERDo) Clauses(conds ...clause.Expression) ILASUSERDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lASUSERDo) Returning(value interface{}, columns ...string) ILASUSERDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lASUSERDo) Not(conds ...gen.Condition) ILASUSERDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lASUSERDo) Or(conds ...gen.Condition) ILASUSERDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lASUSERDo) Select(conds ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lASUSERDo) Where(conds ...gen.Condition) ILASUSERDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lASUSERDo) Order(conds ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lASUSERDo) Distinct(cols ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lASUSERDo) Omit(cols ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lASUSERDo) Join(table schema.Tabler, on ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lASUSERDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lASUSERDo) RightJoin(table schema.Tabler, on ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lASUSERDo) Group(cols ...field.Expr) ILASUSERDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lASUSERDo) Having(conds ...gen.Condition) ILASUSERDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lASUSERDo) Limit(limit int) ILASUSERDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lASUSERDo) Offset(offset int) ILASUSERDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lASUSERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILASUSERDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lASUSERDo) Unscoped() ILASUSERDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lASUSERDo) Create(values ...*model.LASUSER) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lASUSERDo) CreateInBatches(values []*model.LASUSER, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lASUSERDo) Save(values ...*model.LASUSER) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lASUSERDo) First() (*model.LASUSER, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LASUSER), nil
	}
}

func (l lASUSERDo) Take() (*model.LASUSER, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LASUSER), nil
	}
}

func (l lASUSERDo) Last() (*model.LASUSER, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LASUSER), nil
	}
}

func (l lASUSERDo) Find() ([]*model.LASUSER, error) {
	result, err := l.DO.Find()
	return result.([]*model.LASUSER), err
}

func (l lASUSERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LASUSER, err error) {
	buf := make([]*model.LASUSER, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lASUSERDo) FindInBatches(result *[]*model.LASUSER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lASUSERDo) Attrs(attrs ...field.AssignExpr) ILASUSERDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lASUSERDo) Assign(attrs ...field.AssignExpr) ILASUSERDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lASUSERDo) Joins(fields ...field.RelationField) ILASUSERDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lASUSERDo) Preload(fields ...field.RelationField) ILASUSERDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lASUSERDo) FirstOrInit() (*model.LASUSER, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LASUSER), nil
	}
}

func (l lASUSERDo) FirstOrCreate() (*model.LASUSER, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LASUSER), nil
	}
}

func (l lASUSERDo) FindByPage(offset int, limit int) (result []*model.LASUSER, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lASUSERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lASUSERDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lASUSERDo) Delete(models ...*model.LASUSER) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lASUSERDo) withDO(do gen.Dao) *lASUSERDo {
	l.DO = *do.(*gen.DO)
	return l
}
