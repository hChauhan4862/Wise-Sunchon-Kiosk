// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatConf(db *gorm.DB, opts ...gen.DOOption) seatConf {
	_seatConf := seatConf{}

	_seatConf.seatConfDo.UseDB(db, opts...)
	_seatConf.seatConfDo.UseModel(&model.SeatConf{})

	tableName := _seatConf.seatConfDo.TableName()
	_seatConf.ALL = field.NewAsterisk(tableName)
	_seatConf.SeatCode = field.NewString(tableName, "seat_code")
	_seatConf.CodeValue = field.NewString(tableName, "code_value")

	_seatConf.fillFieldMap()

	return _seatConf
}

type seatConf struct {
	seatConfDo

	ALL       field.Asterisk
	SeatCode  field.String
	CodeValue field.String

	fieldMap map[string]field.Expr
}

func (s seatConf) Table(newTableName string) *seatConf {
	s.seatConfDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatConf) As(alias string) *seatConf {
	s.seatConfDo.DO = *(s.seatConfDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatConf) updateTableName(table string) *seatConf {
	s.ALL = field.NewAsterisk(table)
	s.SeatCode = field.NewString(table, "seat_code")
	s.CodeValue = field.NewString(table, "code_value")

	s.fillFieldMap()

	return s
}

func (s *seatConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatConf) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["seat_code"] = s.SeatCode
	s.fieldMap["code_value"] = s.CodeValue
}

func (s seatConf) clone(db *gorm.DB) seatConf {
	s.seatConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatConf) replaceDB(db *gorm.DB) seatConf {
	s.seatConfDo.ReplaceDB(db)
	return s
}

type seatConfDo struct{ gen.DO }

type ISeatConfDo interface {
	gen.SubQuery
	Debug() ISeatConfDo
	WithContext(ctx context.Context) ISeatConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatConfDo
	WriteDB() ISeatConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatConfDo
	Not(conds ...gen.Condition) ISeatConfDo
	Or(conds ...gen.Condition) ISeatConfDo
	Select(conds ...field.Expr) ISeatConfDo
	Where(conds ...gen.Condition) ISeatConfDo
	Order(conds ...field.Expr) ISeatConfDo
	Distinct(cols ...field.Expr) ISeatConfDo
	Omit(cols ...field.Expr) ISeatConfDo
	Join(table schema.Tabler, on ...field.Expr) ISeatConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatConfDo
	Group(cols ...field.Expr) ISeatConfDo
	Having(conds ...gen.Condition) ISeatConfDo
	Limit(limit int) ISeatConfDo
	Offset(offset int) ISeatConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatConfDo
	Unscoped() ISeatConfDo
	Create(values ...*model.SeatConf) error
	CreateInBatches(values []*model.SeatConf, batchSize int) error
	Save(values ...*model.SeatConf) error
	First() (*model.SeatConf, error)
	Take() (*model.SeatConf, error)
	Last() (*model.SeatConf, error)
	Find() ([]*model.SeatConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatConf, err error)
	FindInBatches(result *[]*model.SeatConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatConfDo
	Assign(attrs ...field.AssignExpr) ISeatConfDo
	Joins(fields ...field.RelationField) ISeatConfDo
	Preload(fields ...field.RelationField) ISeatConfDo
	FirstOrInit() (*model.SeatConf, error)
	FirstOrCreate() (*model.SeatConf, error)
	FindByPage(offset int, limit int) (result []*model.SeatConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatConfDo) Debug() ISeatConfDo {
	return s.withDO(s.DO.Debug())
}

func (s seatConfDo) WithContext(ctx context.Context) ISeatConfDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatConfDo) ReadDB() ISeatConfDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatConfDo) WriteDB() ISeatConfDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatConfDo) Session(config *gorm.Session) ISeatConfDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatConfDo) Clauses(conds ...clause.Expression) ISeatConfDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatConfDo) Returning(value interface{}, columns ...string) ISeatConfDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatConfDo) Not(conds ...gen.Condition) ISeatConfDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatConfDo) Or(conds ...gen.Condition) ISeatConfDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatConfDo) Select(conds ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatConfDo) Where(conds ...gen.Condition) ISeatConfDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatConfDo) Order(conds ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatConfDo) Distinct(cols ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatConfDo) Omit(cols ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatConfDo) Join(table schema.Tabler, on ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatConfDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatConfDo) Group(cols ...field.Expr) ISeatConfDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatConfDo) Having(conds ...gen.Condition) ISeatConfDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatConfDo) Limit(limit int) ISeatConfDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatConfDo) Offset(offset int) ISeatConfDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatConfDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatConfDo) Unscoped() ISeatConfDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatConfDo) Create(values ...*model.SeatConf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatConfDo) CreateInBatches(values []*model.SeatConf, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatConfDo) Save(values ...*model.SeatConf) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatConfDo) First() (*model.SeatConf, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConf), nil
	}
}

func (s seatConfDo) Take() (*model.SeatConf, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConf), nil
	}
}

func (s seatConfDo) Last() (*model.SeatConf, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConf), nil
	}
}

func (s seatConfDo) Find() ([]*model.SeatConf, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatConf), err
}

func (s seatConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatConf, err error) {
	buf := make([]*model.SeatConf, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatConfDo) FindInBatches(result *[]*model.SeatConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatConfDo) Attrs(attrs ...field.AssignExpr) ISeatConfDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatConfDo) Assign(attrs ...field.AssignExpr) ISeatConfDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatConfDo) Joins(fields ...field.RelationField) ISeatConfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatConfDo) Preload(fields ...field.RelationField) ISeatConfDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatConfDo) FirstOrInit() (*model.SeatConf, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConf), nil
	}
}

func (s seatConfDo) FirstOrCreate() (*model.SeatConf, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatConf), nil
	}
}

func (s seatConfDo) FindByPage(offset int, limit int) (result []*model.SeatConf, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatConfDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatConfDo) Delete(models ...*model.SeatConf) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatConfDo) withDO(do gen.Dao) *seatConfDo {
	s.DO = *do.(*gen.DO)
	return s
}
