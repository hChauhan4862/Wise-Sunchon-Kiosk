// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatSinbun(db *gorm.DB, opts ...gen.DOOption) seatSinbun {
	_seatSinbun := seatSinbun{}

	_seatSinbun.seatSinbunDo.UseDB(db, opts...)
	_seatSinbun.seatSinbunDo.UseModel(&model.SeatSinbun{})

	tableName := _seatSinbun.seatSinbunDo.TableName()
	_seatSinbun.ALL = field.NewAsterisk(tableName)
	_seatSinbun.PatType = field.NewString(tableName, "pat_type")
	_seatSinbun.PatName = field.NewString(tableName, "pat_name")

	_seatSinbun.fillFieldMap()

	return _seatSinbun
}

type seatSinbun struct {
	seatSinbunDo

	ALL     field.Asterisk
	PatType field.String
	PatName field.String

	fieldMap map[string]field.Expr
}

func (s seatSinbun) Table(newTableName string) *seatSinbun {
	s.seatSinbunDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatSinbun) As(alias string) *seatSinbun {
	s.seatSinbunDo.DO = *(s.seatSinbunDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatSinbun) updateTableName(table string) *seatSinbun {
	s.ALL = field.NewAsterisk(table)
	s.PatType = field.NewString(table, "pat_type")
	s.PatName = field.NewString(table, "pat_name")

	s.fillFieldMap()

	return s
}

func (s *seatSinbun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatSinbun) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["pat_type"] = s.PatType
	s.fieldMap["pat_name"] = s.PatName
}

func (s seatSinbun) clone(db *gorm.DB) seatSinbun {
	s.seatSinbunDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatSinbun) replaceDB(db *gorm.DB) seatSinbun {
	s.seatSinbunDo.ReplaceDB(db)
	return s
}

type seatSinbunDo struct{ gen.DO }

type ISeatSinbunDo interface {
	gen.SubQuery
	Debug() ISeatSinbunDo
	WithContext(ctx context.Context) ISeatSinbunDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatSinbunDo
	WriteDB() ISeatSinbunDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatSinbunDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatSinbunDo
	Not(conds ...gen.Condition) ISeatSinbunDo
	Or(conds ...gen.Condition) ISeatSinbunDo
	Select(conds ...field.Expr) ISeatSinbunDo
	Where(conds ...gen.Condition) ISeatSinbunDo
	Order(conds ...field.Expr) ISeatSinbunDo
	Distinct(cols ...field.Expr) ISeatSinbunDo
	Omit(cols ...field.Expr) ISeatSinbunDo
	Join(table schema.Tabler, on ...field.Expr) ISeatSinbunDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSinbunDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatSinbunDo
	Group(cols ...field.Expr) ISeatSinbunDo
	Having(conds ...gen.Condition) ISeatSinbunDo
	Limit(limit int) ISeatSinbunDo
	Offset(offset int) ISeatSinbunDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSinbunDo
	Unscoped() ISeatSinbunDo
	Create(values ...*model.SeatSinbun) error
	CreateInBatches(values []*model.SeatSinbun, batchSize int) error
	Save(values ...*model.SeatSinbun) error
	First() (*model.SeatSinbun, error)
	Take() (*model.SeatSinbun, error)
	Last() (*model.SeatSinbun, error)
	Find() ([]*model.SeatSinbun, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSinbun, err error)
	FindInBatches(result *[]*model.SeatSinbun, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatSinbun) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatSinbunDo
	Assign(attrs ...field.AssignExpr) ISeatSinbunDo
	Joins(fields ...field.RelationField) ISeatSinbunDo
	Preload(fields ...field.RelationField) ISeatSinbunDo
	FirstOrInit() (*model.SeatSinbun, error)
	FirstOrCreate() (*model.SeatSinbun, error)
	FindByPage(offset int, limit int) (result []*model.SeatSinbun, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatSinbunDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatSinbunDo) Debug() ISeatSinbunDo {
	return s.withDO(s.DO.Debug())
}

func (s seatSinbunDo) WithContext(ctx context.Context) ISeatSinbunDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatSinbunDo) ReadDB() ISeatSinbunDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatSinbunDo) WriteDB() ISeatSinbunDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatSinbunDo) Session(config *gorm.Session) ISeatSinbunDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatSinbunDo) Clauses(conds ...clause.Expression) ISeatSinbunDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatSinbunDo) Returning(value interface{}, columns ...string) ISeatSinbunDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatSinbunDo) Not(conds ...gen.Condition) ISeatSinbunDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatSinbunDo) Or(conds ...gen.Condition) ISeatSinbunDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatSinbunDo) Select(conds ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatSinbunDo) Where(conds ...gen.Condition) ISeatSinbunDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatSinbunDo) Order(conds ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatSinbunDo) Distinct(cols ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatSinbunDo) Omit(cols ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatSinbunDo) Join(table schema.Tabler, on ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatSinbunDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatSinbunDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatSinbunDo) Group(cols ...field.Expr) ISeatSinbunDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatSinbunDo) Having(conds ...gen.Condition) ISeatSinbunDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatSinbunDo) Limit(limit int) ISeatSinbunDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatSinbunDo) Offset(offset int) ISeatSinbunDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatSinbunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSinbunDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatSinbunDo) Unscoped() ISeatSinbunDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatSinbunDo) Create(values ...*model.SeatSinbun) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatSinbunDo) CreateInBatches(values []*model.SeatSinbun, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatSinbunDo) Save(values ...*model.SeatSinbun) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatSinbunDo) First() (*model.SeatSinbun, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSinbun), nil
	}
}

func (s seatSinbunDo) Take() (*model.SeatSinbun, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSinbun), nil
	}
}

func (s seatSinbunDo) Last() (*model.SeatSinbun, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSinbun), nil
	}
}

func (s seatSinbunDo) Find() ([]*model.SeatSinbun, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatSinbun), err
}

func (s seatSinbunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSinbun, err error) {
	buf := make([]*model.SeatSinbun, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatSinbunDo) FindInBatches(result *[]*model.SeatSinbun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatSinbunDo) Attrs(attrs ...field.AssignExpr) ISeatSinbunDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatSinbunDo) Assign(attrs ...field.AssignExpr) ISeatSinbunDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatSinbunDo) Joins(fields ...field.RelationField) ISeatSinbunDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatSinbunDo) Preload(fields ...field.RelationField) ISeatSinbunDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatSinbunDo) FirstOrInit() (*model.SeatSinbun, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSinbun), nil
	}
}

func (s seatSinbunDo) FirstOrCreate() (*model.SeatSinbun, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSinbun), nil
	}
}

func (s seatSinbunDo) FindByPage(offset int, limit int) (result []*model.SeatSinbun, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatSinbunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatSinbunDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatSinbunDo) Delete(models ...*model.SeatSinbun) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatSinbunDo) withDO(do gen.Dao) *seatSinbunDo {
	s.DO = *do.(*gen.DO)
	return s
}
