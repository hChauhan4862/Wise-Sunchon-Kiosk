// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newLIBCLOSEDAY(db *gorm.DB, opts ...gen.DOOption) lIBCLOSEDAY {
	_lIBCLOSEDAY := lIBCLOSEDAY{}

	_lIBCLOSEDAY.lIBCLOSEDAYDo.UseDB(db, opts...)
	_lIBCLOSEDAY.lIBCLOSEDAYDo.UseModel(&model.LIBCLOSEDAY{})

	tableName := _lIBCLOSEDAY.lIBCLOSEDAYDo.TableName()
	_lIBCLOSEDAY.ALL = field.NewAsterisk(tableName)
	_lIBCLOSEDAY.SEQNO = field.NewInt64(tableName, "SEQ_NO")
	_lIBCLOSEDAY.TITLE = field.NewString(tableName, "TITLE")
	_lIBCLOSEDAY.ENTITLE = field.NewString(tableName, "EN_TITLE")
	_lIBCLOSEDAY.LIBNO = field.NewInt64(tableName, "LIBNO")
	_lIBCLOSEDAY.FLOOR = field.NewInt64(tableName, "FLOOR")
	_lIBCLOSEDAY.ROOMNO = field.NewInt64(tableName, "ROOMNO")
	_lIBCLOSEDAY.CLOSEDTFR = field.NewString(tableName, "CLOSE_DT_FR")
	_lIBCLOSEDAY.CLOSETMFR = field.NewString(tableName, "CLOSE_TM_FR")
	_lIBCLOSEDAY.CLOSEDTTO = field.NewString(tableName, "CLOSE_DT_TO")
	_lIBCLOSEDAY.CLOSETMTO = field.NewString(tableName, "CLOSE_TM_TO")
	_lIBCLOSEDAY.REGDT = field.NewTime(tableName, "REG_DT")
	_lIBCLOSEDAY.REGID = field.NewString(tableName, "REG_ID")
	_lIBCLOSEDAY.MODDT = field.NewTime(tableName, "MOD_DT")
	_lIBCLOSEDAY.MODID = field.NewString(tableName, "MOD_ID")
	_lIBCLOSEDAY.REMARK = field.NewString(tableName, "REMARK")
	_lIBCLOSEDAY.ENREMARK = field.NewString(tableName, "EN_REMARK")

	_lIBCLOSEDAY.fillFieldMap()

	return _lIBCLOSEDAY
}

type lIBCLOSEDAY struct {
	lIBCLOSEDAYDo

	ALL       field.Asterisk
	SEQNO     field.Int64
	TITLE     field.String
	ENTITLE   field.String
	LIBNO     field.Int64
	FLOOR     field.Int64
	ROOMNO    field.Int64
	CLOSEDTFR field.String
	CLOSETMFR field.String
	CLOSEDTTO field.String
	CLOSETMTO field.String
	REGDT     field.Time
	REGID     field.String
	MODDT     field.Time
	MODID     field.String
	REMARK    field.String
	ENREMARK  field.String

	fieldMap map[string]field.Expr
}

func (l lIBCLOSEDAY) Table(newTableName string) *lIBCLOSEDAY {
	l.lIBCLOSEDAYDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l lIBCLOSEDAY) As(alias string) *lIBCLOSEDAY {
	l.lIBCLOSEDAYDo.DO = *(l.lIBCLOSEDAYDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *lIBCLOSEDAY) updateTableName(table string) *lIBCLOSEDAY {
	l.ALL = field.NewAsterisk(table)
	l.SEQNO = field.NewInt64(table, "SEQ_NO")
	l.TITLE = field.NewString(table, "TITLE")
	l.ENTITLE = field.NewString(table, "EN_TITLE")
	l.LIBNO = field.NewInt64(table, "LIBNO")
	l.FLOOR = field.NewInt64(table, "FLOOR")
	l.ROOMNO = field.NewInt64(table, "ROOMNO")
	l.CLOSEDTFR = field.NewString(table, "CLOSE_DT_FR")
	l.CLOSETMFR = field.NewString(table, "CLOSE_TM_FR")
	l.CLOSEDTTO = field.NewString(table, "CLOSE_DT_TO")
	l.CLOSETMTO = field.NewString(table, "CLOSE_TM_TO")
	l.REGDT = field.NewTime(table, "REG_DT")
	l.REGID = field.NewString(table, "REG_ID")
	l.MODDT = field.NewTime(table, "MOD_DT")
	l.MODID = field.NewString(table, "MOD_ID")
	l.REMARK = field.NewString(table, "REMARK")
	l.ENREMARK = field.NewString(table, "EN_REMARK")

	l.fillFieldMap()

	return l
}

func (l *lIBCLOSEDAY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *lIBCLOSEDAY) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 16)
	l.fieldMap["SEQ_NO"] = l.SEQNO
	l.fieldMap["TITLE"] = l.TITLE
	l.fieldMap["EN_TITLE"] = l.ENTITLE
	l.fieldMap["LIBNO"] = l.LIBNO
	l.fieldMap["FLOOR"] = l.FLOOR
	l.fieldMap["ROOMNO"] = l.ROOMNO
	l.fieldMap["CLOSE_DT_FR"] = l.CLOSEDTFR
	l.fieldMap["CLOSE_TM_FR"] = l.CLOSETMFR
	l.fieldMap["CLOSE_DT_TO"] = l.CLOSEDTTO
	l.fieldMap["CLOSE_TM_TO"] = l.CLOSETMTO
	l.fieldMap["REG_DT"] = l.REGDT
	l.fieldMap["REG_ID"] = l.REGID
	l.fieldMap["MOD_DT"] = l.MODDT
	l.fieldMap["MOD_ID"] = l.MODID
	l.fieldMap["REMARK"] = l.REMARK
	l.fieldMap["EN_REMARK"] = l.ENREMARK
}

func (l lIBCLOSEDAY) clone(db *gorm.DB) lIBCLOSEDAY {
	l.lIBCLOSEDAYDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l lIBCLOSEDAY) replaceDB(db *gorm.DB) lIBCLOSEDAY {
	l.lIBCLOSEDAYDo.ReplaceDB(db)
	return l
}

type lIBCLOSEDAYDo struct{ gen.DO }

type ILIBCLOSEDAYDo interface {
	gen.SubQuery
	Debug() ILIBCLOSEDAYDo
	WithContext(ctx context.Context) ILIBCLOSEDAYDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILIBCLOSEDAYDo
	WriteDB() ILIBCLOSEDAYDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILIBCLOSEDAYDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILIBCLOSEDAYDo
	Not(conds ...gen.Condition) ILIBCLOSEDAYDo
	Or(conds ...gen.Condition) ILIBCLOSEDAYDo
	Select(conds ...field.Expr) ILIBCLOSEDAYDo
	Where(conds ...gen.Condition) ILIBCLOSEDAYDo
	Order(conds ...field.Expr) ILIBCLOSEDAYDo
	Distinct(cols ...field.Expr) ILIBCLOSEDAYDo
	Omit(cols ...field.Expr) ILIBCLOSEDAYDo
	Join(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo
	Group(cols ...field.Expr) ILIBCLOSEDAYDo
	Having(conds ...gen.Condition) ILIBCLOSEDAYDo
	Limit(limit int) ILIBCLOSEDAYDo
	Offset(offset int) ILIBCLOSEDAYDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILIBCLOSEDAYDo
	Unscoped() ILIBCLOSEDAYDo
	Create(values ...*model.LIBCLOSEDAY) error
	CreateInBatches(values []*model.LIBCLOSEDAY, batchSize int) error
	Save(values ...*model.LIBCLOSEDAY) error
	First() (*model.LIBCLOSEDAY, error)
	Take() (*model.LIBCLOSEDAY, error)
	Last() (*model.LIBCLOSEDAY, error)
	Find() ([]*model.LIBCLOSEDAY, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LIBCLOSEDAY, err error)
	FindInBatches(result *[]*model.LIBCLOSEDAY, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LIBCLOSEDAY) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILIBCLOSEDAYDo
	Assign(attrs ...field.AssignExpr) ILIBCLOSEDAYDo
	Joins(fields ...field.RelationField) ILIBCLOSEDAYDo
	Preload(fields ...field.RelationField) ILIBCLOSEDAYDo
	FirstOrInit() (*model.LIBCLOSEDAY, error)
	FirstOrCreate() (*model.LIBCLOSEDAY, error)
	FindByPage(offset int, limit int) (result []*model.LIBCLOSEDAY, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILIBCLOSEDAYDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l lIBCLOSEDAYDo) Debug() ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Debug())
}

func (l lIBCLOSEDAYDo) WithContext(ctx context.Context) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l lIBCLOSEDAYDo) ReadDB() ILIBCLOSEDAYDo {
	return l.Clauses(dbresolver.Read)
}

func (l lIBCLOSEDAYDo) WriteDB() ILIBCLOSEDAYDo {
	return l.Clauses(dbresolver.Write)
}

func (l lIBCLOSEDAYDo) Session(config *gorm.Session) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Session(config))
}

func (l lIBCLOSEDAYDo) Clauses(conds ...clause.Expression) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l lIBCLOSEDAYDo) Returning(value interface{}, columns ...string) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l lIBCLOSEDAYDo) Not(conds ...gen.Condition) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l lIBCLOSEDAYDo) Or(conds ...gen.Condition) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l lIBCLOSEDAYDo) Select(conds ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l lIBCLOSEDAYDo) Where(conds ...gen.Condition) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l lIBCLOSEDAYDo) Order(conds ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l lIBCLOSEDAYDo) Distinct(cols ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l lIBCLOSEDAYDo) Omit(cols ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l lIBCLOSEDAYDo) Join(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l lIBCLOSEDAYDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l lIBCLOSEDAYDo) RightJoin(table schema.Tabler, on ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l lIBCLOSEDAYDo) Group(cols ...field.Expr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l lIBCLOSEDAYDo) Having(conds ...gen.Condition) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l lIBCLOSEDAYDo) Limit(limit int) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l lIBCLOSEDAYDo) Offset(offset int) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l lIBCLOSEDAYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l lIBCLOSEDAYDo) Unscoped() ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Unscoped())
}

func (l lIBCLOSEDAYDo) Create(values ...*model.LIBCLOSEDAY) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l lIBCLOSEDAYDo) CreateInBatches(values []*model.LIBCLOSEDAY, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l lIBCLOSEDAYDo) Save(values ...*model.LIBCLOSEDAY) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l lIBCLOSEDAYDo) First() (*model.LIBCLOSEDAY, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LIBCLOSEDAY), nil
	}
}

func (l lIBCLOSEDAYDo) Take() (*model.LIBCLOSEDAY, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LIBCLOSEDAY), nil
	}
}

func (l lIBCLOSEDAYDo) Last() (*model.LIBCLOSEDAY, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LIBCLOSEDAY), nil
	}
}

func (l lIBCLOSEDAYDo) Find() ([]*model.LIBCLOSEDAY, error) {
	result, err := l.DO.Find()
	return result.([]*model.LIBCLOSEDAY), err
}

func (l lIBCLOSEDAYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LIBCLOSEDAY, err error) {
	buf := make([]*model.LIBCLOSEDAY, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l lIBCLOSEDAYDo) FindInBatches(result *[]*model.LIBCLOSEDAY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l lIBCLOSEDAYDo) Attrs(attrs ...field.AssignExpr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l lIBCLOSEDAYDo) Assign(attrs ...field.AssignExpr) ILIBCLOSEDAYDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l lIBCLOSEDAYDo) Joins(fields ...field.RelationField) ILIBCLOSEDAYDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l lIBCLOSEDAYDo) Preload(fields ...field.RelationField) ILIBCLOSEDAYDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l lIBCLOSEDAYDo) FirstOrInit() (*model.LIBCLOSEDAY, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LIBCLOSEDAY), nil
	}
}

func (l lIBCLOSEDAYDo) FirstOrCreate() (*model.LIBCLOSEDAY, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LIBCLOSEDAY), nil
	}
}

func (l lIBCLOSEDAYDo) FindByPage(offset int, limit int) (result []*model.LIBCLOSEDAY, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l lIBCLOSEDAYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l lIBCLOSEDAYDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l lIBCLOSEDAYDo) Delete(models ...*model.LIBCLOSEDAY) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *lIBCLOSEDAYDo) withDO(do gen.Dao) *lIBCLOSEDAYDo {
	l.DO = *do.(*gen.DO)
	return l
}
