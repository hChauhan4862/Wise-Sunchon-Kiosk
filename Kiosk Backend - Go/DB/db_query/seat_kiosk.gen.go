// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatKiosk(db *gorm.DB, opts ...gen.DOOption) seatKiosk {
	_seatKiosk := seatKiosk{}

	_seatKiosk.seatKioskDo.UseDB(db, opts...)
	_seatKiosk.seatKioskDo.UseModel(&model.SeatKiosk{})

	tableName := _seatKiosk.seatKioskDo.TableName()
	_seatKiosk.ALL = field.NewAsterisk(tableName)
	_seatKiosk.KioskNo = field.NewInt64(tableName, "kiosk_no")
	_seatKiosk.KioskName = field.NewString(tableName, "kiosk_name")
	_seatKiosk.KioskIP = field.NewString(tableName, "kiosk_ip")
	_seatKiosk.KioskMac = field.NewString(tableName, "kiosk_mac")
	_seatKiosk.KioskSet = field.NewString(tableName, "kiosk_set")
	_seatKiosk.KioskCont = field.NewString(tableName, "kiosk_cont")
	_seatKiosk.KioskReset = field.NewString(tableName, "kiosk_reset")
	_seatKiosk.KioskEndTime = field.NewString(tableName, "kiosk_end_time")
	_seatKiosk.FireResetUse = field.NewString(tableName, "fire_reset_use")
	_seatKiosk.GateUse = field.NewString(tableName, "gate_use")
	_seatKiosk.NoticeUse = field.NewString(tableName, "notice_use")
	_seatKiosk.VkeyUse = field.NewString(tableName, "vkey_use")
	_seatKiosk.PassdbUse = field.NewString(tableName, "passdb_use")
	_seatKiosk.RfUse = field.NewString(tableName, "rf_use")
	_seatKiosk.FingerUse = field.NewString(tableName, "finger_use")
	_seatKiosk.PrinterType = field.NewString(tableName, "printer_type")
	_seatKiosk.UseRoom = field.NewString(tableName, "use_room")
	_seatKiosk.KioskWait = field.NewString(tableName, "kiosk_wait")
	_seatKiosk.KioskSms = field.NewString(tableName, "kiosk_sms")
	_seatKiosk.KioskPdp = field.NewString(tableName, "kiosk_pdp")
	_seatKiosk.UpdateDate = field.NewString(tableName, "update_date")
	_seatKiosk.GateOutchkUse = field.NewString(tableName, "gate_outchk_use")
	_seatKiosk.GateInchkUse = field.NewString(tableName, "gate_inchk_use")
	_seatKiosk.GateInchkMin = field.NewString(tableName, "gate_inchk_min")
	_seatKiosk.GateInchkExptUse = field.NewString(tableName, "gate_inchk_expt_use")
	_seatKiosk.GateInchkExptRoom = field.NewString(tableName, "gate_inchk_expt_room")
	_seatKiosk.GateSyncStime = field.NewString(tableName, "gate_sync_stime")
	_seatKiosk.GateSyncEtime = field.NewString(tableName, "gate_sync_etime")
	_seatKiosk.GateOutchkTime = field.NewString(tableName, "gate_outchk_time")

	_seatKiosk.fillFieldMap()

	return _seatKiosk
}

type seatKiosk struct {
	seatKioskDo

	ALL               field.Asterisk
	KioskNo           field.Int64
	KioskName         field.String
	KioskIP           field.String
	KioskMac          field.String
	KioskSet          field.String
	KioskCont         field.String
	KioskReset        field.String
	KioskEndTime      field.String
	FireResetUse      field.String
	GateUse           field.String
	NoticeUse         field.String
	VkeyUse           field.String
	PassdbUse         field.String
	RfUse             field.String
	FingerUse         field.String
	PrinterType       field.String
	UseRoom           field.String
	KioskWait         field.String
	KioskSms          field.String
	KioskPdp          field.String
	UpdateDate        field.String
	GateOutchkUse     field.String
	GateInchkUse      field.String
	GateInchkMin      field.String
	GateInchkExptUse  field.String
	GateInchkExptRoom field.String
	GateSyncStime     field.String
	GateSyncEtime     field.String
	GateOutchkTime    field.String

	fieldMap map[string]field.Expr
}

func (s seatKiosk) Table(newTableName string) *seatKiosk {
	s.seatKioskDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatKiosk) As(alias string) *seatKiosk {
	s.seatKioskDo.DO = *(s.seatKioskDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatKiosk) updateTableName(table string) *seatKiosk {
	s.ALL = field.NewAsterisk(table)
	s.KioskNo = field.NewInt64(table, "kiosk_no")
	s.KioskName = field.NewString(table, "kiosk_name")
	s.KioskIP = field.NewString(table, "kiosk_ip")
	s.KioskMac = field.NewString(table, "kiosk_mac")
	s.KioskSet = field.NewString(table, "kiosk_set")
	s.KioskCont = field.NewString(table, "kiosk_cont")
	s.KioskReset = field.NewString(table, "kiosk_reset")
	s.KioskEndTime = field.NewString(table, "kiosk_end_time")
	s.FireResetUse = field.NewString(table, "fire_reset_use")
	s.GateUse = field.NewString(table, "gate_use")
	s.NoticeUse = field.NewString(table, "notice_use")
	s.VkeyUse = field.NewString(table, "vkey_use")
	s.PassdbUse = field.NewString(table, "passdb_use")
	s.RfUse = field.NewString(table, "rf_use")
	s.FingerUse = field.NewString(table, "finger_use")
	s.PrinterType = field.NewString(table, "printer_type")
	s.UseRoom = field.NewString(table, "use_room")
	s.KioskWait = field.NewString(table, "kiosk_wait")
	s.KioskSms = field.NewString(table, "kiosk_sms")
	s.KioskPdp = field.NewString(table, "kiosk_pdp")
	s.UpdateDate = field.NewString(table, "update_date")
	s.GateOutchkUse = field.NewString(table, "gate_outchk_use")
	s.GateInchkUse = field.NewString(table, "gate_inchk_use")
	s.GateInchkMin = field.NewString(table, "gate_inchk_min")
	s.GateInchkExptUse = field.NewString(table, "gate_inchk_expt_use")
	s.GateInchkExptRoom = field.NewString(table, "gate_inchk_expt_room")
	s.GateSyncStime = field.NewString(table, "gate_sync_stime")
	s.GateSyncEtime = field.NewString(table, "gate_sync_etime")
	s.GateOutchkTime = field.NewString(table, "gate_outchk_time")

	s.fillFieldMap()

	return s
}

func (s *seatKiosk) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatKiosk) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 29)
	s.fieldMap["kiosk_no"] = s.KioskNo
	s.fieldMap["kiosk_name"] = s.KioskName
	s.fieldMap["kiosk_ip"] = s.KioskIP
	s.fieldMap["kiosk_mac"] = s.KioskMac
	s.fieldMap["kiosk_set"] = s.KioskSet
	s.fieldMap["kiosk_cont"] = s.KioskCont
	s.fieldMap["kiosk_reset"] = s.KioskReset
	s.fieldMap["kiosk_end_time"] = s.KioskEndTime
	s.fieldMap["fire_reset_use"] = s.FireResetUse
	s.fieldMap["gate_use"] = s.GateUse
	s.fieldMap["notice_use"] = s.NoticeUse
	s.fieldMap["vkey_use"] = s.VkeyUse
	s.fieldMap["passdb_use"] = s.PassdbUse
	s.fieldMap["rf_use"] = s.RfUse
	s.fieldMap["finger_use"] = s.FingerUse
	s.fieldMap["printer_type"] = s.PrinterType
	s.fieldMap["use_room"] = s.UseRoom
	s.fieldMap["kiosk_wait"] = s.KioskWait
	s.fieldMap["kiosk_sms"] = s.KioskSms
	s.fieldMap["kiosk_pdp"] = s.KioskPdp
	s.fieldMap["update_date"] = s.UpdateDate
	s.fieldMap["gate_outchk_use"] = s.GateOutchkUse
	s.fieldMap["gate_inchk_use"] = s.GateInchkUse
	s.fieldMap["gate_inchk_min"] = s.GateInchkMin
	s.fieldMap["gate_inchk_expt_use"] = s.GateInchkExptUse
	s.fieldMap["gate_inchk_expt_room"] = s.GateInchkExptRoom
	s.fieldMap["gate_sync_stime"] = s.GateSyncStime
	s.fieldMap["gate_sync_etime"] = s.GateSyncEtime
	s.fieldMap["gate_outchk_time"] = s.GateOutchkTime
}

func (s seatKiosk) clone(db *gorm.DB) seatKiosk {
	s.seatKioskDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatKiosk) replaceDB(db *gorm.DB) seatKiosk {
	s.seatKioskDo.ReplaceDB(db)
	return s
}

type seatKioskDo struct{ gen.DO }

type ISeatKioskDo interface {
	gen.SubQuery
	Debug() ISeatKioskDo
	WithContext(ctx context.Context) ISeatKioskDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatKioskDo
	WriteDB() ISeatKioskDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatKioskDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatKioskDo
	Not(conds ...gen.Condition) ISeatKioskDo
	Or(conds ...gen.Condition) ISeatKioskDo
	Select(conds ...field.Expr) ISeatKioskDo
	Where(conds ...gen.Condition) ISeatKioskDo
	Order(conds ...field.Expr) ISeatKioskDo
	Distinct(cols ...field.Expr) ISeatKioskDo
	Omit(cols ...field.Expr) ISeatKioskDo
	Join(table schema.Tabler, on ...field.Expr) ISeatKioskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatKioskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatKioskDo
	Group(cols ...field.Expr) ISeatKioskDo
	Having(conds ...gen.Condition) ISeatKioskDo
	Limit(limit int) ISeatKioskDo
	Offset(offset int) ISeatKioskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatKioskDo
	Unscoped() ISeatKioskDo
	Create(values ...*model.SeatKiosk) error
	CreateInBatches(values []*model.SeatKiosk, batchSize int) error
	Save(values ...*model.SeatKiosk) error
	First() (*model.SeatKiosk, error)
	Take() (*model.SeatKiosk, error)
	Last() (*model.SeatKiosk, error)
	Find() ([]*model.SeatKiosk, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatKiosk, err error)
	FindInBatches(result *[]*model.SeatKiosk, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatKiosk) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatKioskDo
	Assign(attrs ...field.AssignExpr) ISeatKioskDo
	Joins(fields ...field.RelationField) ISeatKioskDo
	Preload(fields ...field.RelationField) ISeatKioskDo
	FirstOrInit() (*model.SeatKiosk, error)
	FirstOrCreate() (*model.SeatKiosk, error)
	FindByPage(offset int, limit int) (result []*model.SeatKiosk, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatKioskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatKioskDo) Debug() ISeatKioskDo {
	return s.withDO(s.DO.Debug())
}

func (s seatKioskDo) WithContext(ctx context.Context) ISeatKioskDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatKioskDo) ReadDB() ISeatKioskDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatKioskDo) WriteDB() ISeatKioskDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatKioskDo) Session(config *gorm.Session) ISeatKioskDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatKioskDo) Clauses(conds ...clause.Expression) ISeatKioskDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatKioskDo) Returning(value interface{}, columns ...string) ISeatKioskDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatKioskDo) Not(conds ...gen.Condition) ISeatKioskDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatKioskDo) Or(conds ...gen.Condition) ISeatKioskDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatKioskDo) Select(conds ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatKioskDo) Where(conds ...gen.Condition) ISeatKioskDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatKioskDo) Order(conds ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatKioskDo) Distinct(cols ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatKioskDo) Omit(cols ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatKioskDo) Join(table schema.Tabler, on ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatKioskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatKioskDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatKioskDo) Group(cols ...field.Expr) ISeatKioskDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatKioskDo) Having(conds ...gen.Condition) ISeatKioskDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatKioskDo) Limit(limit int) ISeatKioskDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatKioskDo) Offset(offset int) ISeatKioskDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatKioskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatKioskDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatKioskDo) Unscoped() ISeatKioskDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatKioskDo) Create(values ...*model.SeatKiosk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatKioskDo) CreateInBatches(values []*model.SeatKiosk, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatKioskDo) Save(values ...*model.SeatKiosk) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatKioskDo) First() (*model.SeatKiosk, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk), nil
	}
}

func (s seatKioskDo) Take() (*model.SeatKiosk, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk), nil
	}
}

func (s seatKioskDo) Last() (*model.SeatKiosk, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk), nil
	}
}

func (s seatKioskDo) Find() ([]*model.SeatKiosk, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatKiosk), err
}

func (s seatKioskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatKiosk, err error) {
	buf := make([]*model.SeatKiosk, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatKioskDo) FindInBatches(result *[]*model.SeatKiosk, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatKioskDo) Attrs(attrs ...field.AssignExpr) ISeatKioskDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatKioskDo) Assign(attrs ...field.AssignExpr) ISeatKioskDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatKioskDo) Joins(fields ...field.RelationField) ISeatKioskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatKioskDo) Preload(fields ...field.RelationField) ISeatKioskDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatKioskDo) FirstOrInit() (*model.SeatKiosk, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk), nil
	}
}

func (s seatKioskDo) FirstOrCreate() (*model.SeatKiosk, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatKiosk), nil
	}
}

func (s seatKioskDo) FindByPage(offset int, limit int) (result []*model.SeatKiosk, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatKioskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatKioskDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatKioskDo) Delete(models ...*model.SeatKiosk) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatKioskDo) withDO(do gen.Dao) *seatKioskDo {
	s.DO = *do.(*gen.DO)
	return s
}
