// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatLimitLog(db *gorm.DB, opts ...gen.DOOption) seatLimitLog {
	_seatLimitLog := seatLimitLog{}

	_seatLimitLog.seatLimitLogDo.UseDB(db, opts...)
	_seatLimitLog.seatLimitLogDo.UseModel(&model.SeatLimitLog{})

	tableName := _seatLimitLog.seatLimitLogDo.TableName()
	_seatLimitLog.ALL = field.NewAsterisk(tableName)
	_seatLimitLog.UserID = field.NewString(tableName, "user_id")
	_seatLimitLog.MissCnt = field.NewInt64(tableName, "miss_cnt")
	_seatLimitLog.MissTCnt = field.NewInt64(tableName, "miss_t_cnt")
	_seatLimitLog.BlockSetDate = field.NewString(tableName, "block_set_date")
	_seatLimitLog.BlockEndDate = field.NewString(tableName, "block_end_date")
	_seatLimitLog.LimitBigo = field.NewString(tableName, "limit_bigo")
	_seatLimitLog.BlockEndTime = field.NewString(tableName, "block_end_time")
	_seatLimitLog.BlockStartDate = field.NewString(tableName, "block_start_date")
	_seatLimitLog.BlockStartTime = field.NewString(tableName, "block_start_time")
	_seatLimitLog.UpdateDatetime = field.NewString(tableName, "update_datetime")
	_seatLimitLog.KioskNo = field.NewInt64(tableName, "kiosk_no")

	_seatLimitLog.fillFieldMap()

	return _seatLimitLog
}

type seatLimitLog struct {
	seatLimitLogDo

	ALL            field.Asterisk
	UserID         field.String
	MissCnt        field.Int64
	MissTCnt       field.Int64
	BlockSetDate   field.String
	BlockEndDate   field.String
	LimitBigo      field.String
	BlockEndTime   field.String
	BlockStartDate field.String
	BlockStartTime field.String
	UpdateDatetime field.String
	KioskNo        field.Int64

	fieldMap map[string]field.Expr
}

func (s seatLimitLog) Table(newTableName string) *seatLimitLog {
	s.seatLimitLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatLimitLog) As(alias string) *seatLimitLog {
	s.seatLimitLogDo.DO = *(s.seatLimitLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatLimitLog) updateTableName(table string) *seatLimitLog {
	s.ALL = field.NewAsterisk(table)
	s.UserID = field.NewString(table, "user_id")
	s.MissCnt = field.NewInt64(table, "miss_cnt")
	s.MissTCnt = field.NewInt64(table, "miss_t_cnt")
	s.BlockSetDate = field.NewString(table, "block_set_date")
	s.BlockEndDate = field.NewString(table, "block_end_date")
	s.LimitBigo = field.NewString(table, "limit_bigo")
	s.BlockEndTime = field.NewString(table, "block_end_time")
	s.BlockStartDate = field.NewString(table, "block_start_date")
	s.BlockStartTime = field.NewString(table, "block_start_time")
	s.UpdateDatetime = field.NewString(table, "update_datetime")
	s.KioskNo = field.NewInt64(table, "kiosk_no")

	s.fillFieldMap()

	return s
}

func (s *seatLimitLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatLimitLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["miss_cnt"] = s.MissCnt
	s.fieldMap["miss_t_cnt"] = s.MissTCnt
	s.fieldMap["block_set_date"] = s.BlockSetDate
	s.fieldMap["block_end_date"] = s.BlockEndDate
	s.fieldMap["limit_bigo"] = s.LimitBigo
	s.fieldMap["block_end_time"] = s.BlockEndTime
	s.fieldMap["block_start_date"] = s.BlockStartDate
	s.fieldMap["block_start_time"] = s.BlockStartTime
	s.fieldMap["update_datetime"] = s.UpdateDatetime
	s.fieldMap["kiosk_no"] = s.KioskNo
}

func (s seatLimitLog) clone(db *gorm.DB) seatLimitLog {
	s.seatLimitLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatLimitLog) replaceDB(db *gorm.DB) seatLimitLog {
	s.seatLimitLogDo.ReplaceDB(db)
	return s
}

type seatLimitLogDo struct{ gen.DO }

type ISeatLimitLogDo interface {
	gen.SubQuery
	Debug() ISeatLimitLogDo
	WithContext(ctx context.Context) ISeatLimitLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatLimitLogDo
	WriteDB() ISeatLimitLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatLimitLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatLimitLogDo
	Not(conds ...gen.Condition) ISeatLimitLogDo
	Or(conds ...gen.Condition) ISeatLimitLogDo
	Select(conds ...field.Expr) ISeatLimitLogDo
	Where(conds ...gen.Condition) ISeatLimitLogDo
	Order(conds ...field.Expr) ISeatLimitLogDo
	Distinct(cols ...field.Expr) ISeatLimitLogDo
	Omit(cols ...field.Expr) ISeatLimitLogDo
	Join(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo
	Group(cols ...field.Expr) ISeatLimitLogDo
	Having(conds ...gen.Condition) ISeatLimitLogDo
	Limit(limit int) ISeatLimitLogDo
	Offset(offset int) ISeatLimitLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLimitLogDo
	Unscoped() ISeatLimitLogDo
	Create(values ...*model.SeatLimitLog) error
	CreateInBatches(values []*model.SeatLimitLog, batchSize int) error
	Save(values ...*model.SeatLimitLog) error
	First() (*model.SeatLimitLog, error)
	Take() (*model.SeatLimitLog, error)
	Last() (*model.SeatLimitLog, error)
	Find() ([]*model.SeatLimitLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLimitLog, err error)
	FindInBatches(result *[]*model.SeatLimitLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatLimitLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatLimitLogDo
	Assign(attrs ...field.AssignExpr) ISeatLimitLogDo
	Joins(fields ...field.RelationField) ISeatLimitLogDo
	Preload(fields ...field.RelationField) ISeatLimitLogDo
	FirstOrInit() (*model.SeatLimitLog, error)
	FirstOrCreate() (*model.SeatLimitLog, error)
	FindByPage(offset int, limit int) (result []*model.SeatLimitLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatLimitLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatLimitLogDo) Debug() ISeatLimitLogDo {
	return s.withDO(s.DO.Debug())
}

func (s seatLimitLogDo) WithContext(ctx context.Context) ISeatLimitLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatLimitLogDo) ReadDB() ISeatLimitLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatLimitLogDo) WriteDB() ISeatLimitLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatLimitLogDo) Session(config *gorm.Session) ISeatLimitLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatLimitLogDo) Clauses(conds ...clause.Expression) ISeatLimitLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatLimitLogDo) Returning(value interface{}, columns ...string) ISeatLimitLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatLimitLogDo) Not(conds ...gen.Condition) ISeatLimitLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatLimitLogDo) Or(conds ...gen.Condition) ISeatLimitLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatLimitLogDo) Select(conds ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatLimitLogDo) Where(conds ...gen.Condition) ISeatLimitLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatLimitLogDo) Order(conds ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatLimitLogDo) Distinct(cols ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatLimitLogDo) Omit(cols ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatLimitLogDo) Join(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatLimitLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatLimitLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatLimitLogDo) Group(cols ...field.Expr) ISeatLimitLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatLimitLogDo) Having(conds ...gen.Condition) ISeatLimitLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatLimitLogDo) Limit(limit int) ISeatLimitLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatLimitLogDo) Offset(offset int) ISeatLimitLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatLimitLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatLimitLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatLimitLogDo) Unscoped() ISeatLimitLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatLimitLogDo) Create(values ...*model.SeatLimitLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatLimitLogDo) CreateInBatches(values []*model.SeatLimitLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatLimitLogDo) Save(values ...*model.SeatLimitLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatLimitLogDo) First() (*model.SeatLimitLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimitLog), nil
	}
}

func (s seatLimitLogDo) Take() (*model.SeatLimitLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimitLog), nil
	}
}

func (s seatLimitLogDo) Last() (*model.SeatLimitLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimitLog), nil
	}
}

func (s seatLimitLogDo) Find() ([]*model.SeatLimitLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatLimitLog), err
}

func (s seatLimitLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatLimitLog, err error) {
	buf := make([]*model.SeatLimitLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatLimitLogDo) FindInBatches(result *[]*model.SeatLimitLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatLimitLogDo) Attrs(attrs ...field.AssignExpr) ISeatLimitLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatLimitLogDo) Assign(attrs ...field.AssignExpr) ISeatLimitLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatLimitLogDo) Joins(fields ...field.RelationField) ISeatLimitLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatLimitLogDo) Preload(fields ...field.RelationField) ISeatLimitLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatLimitLogDo) FirstOrInit() (*model.SeatLimitLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimitLog), nil
	}
}

func (s seatLimitLogDo) FirstOrCreate() (*model.SeatLimitLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatLimitLog), nil
	}
}

func (s seatLimitLogDo) FindByPage(offset int, limit int) (result []*model.SeatLimitLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatLimitLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatLimitLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatLimitLogDo) Delete(models ...*model.SeatLimitLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatLimitLogDo) withDO(do gen.Dao) *seatLimitLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
