// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseSroomRessub(db *gorm.DB, opts ...gen.DOOption) wiseSroomRessub {
	_wiseSroomRessub := wiseSroomRessub{}

	_wiseSroomRessub.wiseSroomRessubDo.UseDB(db, opts...)
	_wiseSroomRessub.wiseSroomRessubDo.UseModel(&model.WiseSroomRessub{})

	tableName := _wiseSroomRessub.wiseSroomRessubDo.TableName()
	_wiseSroomRessub.ALL = field.NewAsterisk(tableName)
	_wiseSroomRessub.ReserveNo = field.NewString(tableName, "reserve_no")
	_wiseSroomRessub.UserID = field.NewString(tableName, "user_id")
	_wiseSroomRessub.UserName = field.NewString(tableName, "user_name")
	_wiseSroomRessub.CheckYn = field.NewString(tableName, "check_yn")
	_wiseSroomRessub.CheckTime = field.NewString(tableName, "check_time")
	_wiseSroomRessub.ReserveStat = field.NewInt64(tableName, "reserve_stat")
	_wiseSroomRessub.Bigo = field.NewString(tableName, "bigo")

	_wiseSroomRessub.fillFieldMap()

	return _wiseSroomRessub
}

type wiseSroomRessub struct {
	wiseSroomRessubDo

	ALL         field.Asterisk
	ReserveNo   field.String
	UserID      field.String
	UserName    field.String
	CheckYn     field.String
	CheckTime   field.String
	ReserveStat field.Int64
	Bigo        field.String

	fieldMap map[string]field.Expr
}

func (w wiseSroomRessub) Table(newTableName string) *wiseSroomRessub {
	w.wiseSroomRessubDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseSroomRessub) As(alias string) *wiseSroomRessub {
	w.wiseSroomRessubDo.DO = *(w.wiseSroomRessubDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseSroomRessub) updateTableName(table string) *wiseSroomRessub {
	w.ALL = field.NewAsterisk(table)
	w.ReserveNo = field.NewString(table, "reserve_no")
	w.UserID = field.NewString(table, "user_id")
	w.UserName = field.NewString(table, "user_name")
	w.CheckYn = field.NewString(table, "check_yn")
	w.CheckTime = field.NewString(table, "check_time")
	w.ReserveStat = field.NewInt64(table, "reserve_stat")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseSroomRessub) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseSroomRessub) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 7)
	w.fieldMap["reserve_no"] = w.ReserveNo
	w.fieldMap["user_id"] = w.UserID
	w.fieldMap["user_name"] = w.UserName
	w.fieldMap["check_yn"] = w.CheckYn
	w.fieldMap["check_time"] = w.CheckTime
	w.fieldMap["reserve_stat"] = w.ReserveStat
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseSroomRessub) clone(db *gorm.DB) wiseSroomRessub {
	w.wiseSroomRessubDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseSroomRessub) replaceDB(db *gorm.DB) wiseSroomRessub {
	w.wiseSroomRessubDo.ReplaceDB(db)
	return w
}

type wiseSroomRessubDo struct{ gen.DO }

type IWiseSroomRessubDo interface {
	gen.SubQuery
	Debug() IWiseSroomRessubDo
	WithContext(ctx context.Context) IWiseSroomRessubDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseSroomRessubDo
	WriteDB() IWiseSroomRessubDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseSroomRessubDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseSroomRessubDo
	Not(conds ...gen.Condition) IWiseSroomRessubDo
	Or(conds ...gen.Condition) IWiseSroomRessubDo
	Select(conds ...field.Expr) IWiseSroomRessubDo
	Where(conds ...gen.Condition) IWiseSroomRessubDo
	Order(conds ...field.Expr) IWiseSroomRessubDo
	Distinct(cols ...field.Expr) IWiseSroomRessubDo
	Omit(cols ...field.Expr) IWiseSroomRessubDo
	Join(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo
	Group(cols ...field.Expr) IWiseSroomRessubDo
	Having(conds ...gen.Condition) IWiseSroomRessubDo
	Limit(limit int) IWiseSroomRessubDo
	Offset(offset int) IWiseSroomRessubDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomRessubDo
	Unscoped() IWiseSroomRessubDo
	Create(values ...*model.WiseSroomRessub) error
	CreateInBatches(values []*model.WiseSroomRessub, batchSize int) error
	Save(values ...*model.WiseSroomRessub) error
	First() (*model.WiseSroomRessub, error)
	Take() (*model.WiseSroomRessub, error)
	Last() (*model.WiseSroomRessub, error)
	Find() ([]*model.WiseSroomRessub, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroomRessub, err error)
	FindInBatches(result *[]*model.WiseSroomRessub, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseSroomRessub) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseSroomRessubDo
	Assign(attrs ...field.AssignExpr) IWiseSroomRessubDo
	Joins(fields ...field.RelationField) IWiseSroomRessubDo
	Preload(fields ...field.RelationField) IWiseSroomRessubDo
	FirstOrInit() (*model.WiseSroomRessub, error)
	FirstOrCreate() (*model.WiseSroomRessub, error)
	FindByPage(offset int, limit int) (result []*model.WiseSroomRessub, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseSroomRessubDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseSroomRessubDo) Debug() IWiseSroomRessubDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseSroomRessubDo) WithContext(ctx context.Context) IWiseSroomRessubDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseSroomRessubDo) ReadDB() IWiseSroomRessubDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseSroomRessubDo) WriteDB() IWiseSroomRessubDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseSroomRessubDo) Session(config *gorm.Session) IWiseSroomRessubDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseSroomRessubDo) Clauses(conds ...clause.Expression) IWiseSroomRessubDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseSroomRessubDo) Returning(value interface{}, columns ...string) IWiseSroomRessubDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseSroomRessubDo) Not(conds ...gen.Condition) IWiseSroomRessubDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseSroomRessubDo) Or(conds ...gen.Condition) IWiseSroomRessubDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseSroomRessubDo) Select(conds ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseSroomRessubDo) Where(conds ...gen.Condition) IWiseSroomRessubDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseSroomRessubDo) Order(conds ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseSroomRessubDo) Distinct(cols ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseSroomRessubDo) Omit(cols ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseSroomRessubDo) Join(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseSroomRessubDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseSroomRessubDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseSroomRessubDo) Group(cols ...field.Expr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseSroomRessubDo) Having(conds ...gen.Condition) IWiseSroomRessubDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseSroomRessubDo) Limit(limit int) IWiseSroomRessubDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseSroomRessubDo) Offset(offset int) IWiseSroomRessubDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseSroomRessubDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseSroomRessubDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseSroomRessubDo) Unscoped() IWiseSroomRessubDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseSroomRessubDo) Create(values ...*model.WiseSroomRessub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseSroomRessubDo) CreateInBatches(values []*model.WiseSroomRessub, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseSroomRessubDo) Save(values ...*model.WiseSroomRessub) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseSroomRessubDo) First() (*model.WiseSroomRessub, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomRessub), nil
	}
}

func (w wiseSroomRessubDo) Take() (*model.WiseSroomRessub, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomRessub), nil
	}
}

func (w wiseSroomRessubDo) Last() (*model.WiseSroomRessub, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomRessub), nil
	}
}

func (w wiseSroomRessubDo) Find() ([]*model.WiseSroomRessub, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseSroomRessub), err
}

func (w wiseSroomRessubDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseSroomRessub, err error) {
	buf := make([]*model.WiseSroomRessub, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseSroomRessubDo) FindInBatches(result *[]*model.WiseSroomRessub, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseSroomRessubDo) Attrs(attrs ...field.AssignExpr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseSroomRessubDo) Assign(attrs ...field.AssignExpr) IWiseSroomRessubDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseSroomRessubDo) Joins(fields ...field.RelationField) IWiseSroomRessubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseSroomRessubDo) Preload(fields ...field.RelationField) IWiseSroomRessubDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseSroomRessubDo) FirstOrInit() (*model.WiseSroomRessub, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomRessub), nil
	}
}

func (w wiseSroomRessubDo) FirstOrCreate() (*model.WiseSroomRessub, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseSroomRessub), nil
	}
}

func (w wiseSroomRessubDo) FindByPage(offset int, limit int) (result []*model.WiseSroomRessub, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseSroomRessubDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseSroomRessubDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseSroomRessubDo) Delete(models ...*model.WiseSroomRessub) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseSroomRessubDo) withDO(do gen.Dao) *wiseSroomRessubDo {
	w.DO = *do.(*gen.DO)
	return w
}
