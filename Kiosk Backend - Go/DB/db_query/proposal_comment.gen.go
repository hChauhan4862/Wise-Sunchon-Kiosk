// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newProposalComment(db *gorm.DB, opts ...gen.DOOption) proposalComment {
	_proposalComment := proposalComment{}

	_proposalComment.proposalCommentDo.UseDB(db, opts...)
	_proposalComment.proposalCommentDo.UseModel(&model.ProposalComment{})

	tableName := _proposalComment.proposalCommentDo.TableName()
	_proposalComment.ALL = field.NewAsterisk(tableName)
	_proposalComment.PropID = field.NewInt64(tableName, "prop_id")
	_proposalComment.AdminID = field.NewString(tableName, "admin_id")
	_proposalComment.ComContent = field.NewString(tableName, "com_content")
	_proposalComment.RegDt = field.NewString(tableName, "reg_dt")
	_proposalComment.Seq = field.NewInt64(tableName, "seq")
	_proposalComment.COMTITLE = field.NewString(tableName, "COM_TITLE")

	_proposalComment.fillFieldMap()

	return _proposalComment
}

type proposalComment struct {
	proposalCommentDo

	ALL        field.Asterisk
	PropID     field.Int64
	AdminID    field.String
	ComContent field.String
	RegDt      field.String
	Seq        field.Int64
	COMTITLE   field.String

	fieldMap map[string]field.Expr
}

func (p proposalComment) Table(newTableName string) *proposalComment {
	p.proposalCommentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proposalComment) As(alias string) *proposalComment {
	p.proposalCommentDo.DO = *(p.proposalCommentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proposalComment) updateTableName(table string) *proposalComment {
	p.ALL = field.NewAsterisk(table)
	p.PropID = field.NewInt64(table, "prop_id")
	p.AdminID = field.NewString(table, "admin_id")
	p.ComContent = field.NewString(table, "com_content")
	p.RegDt = field.NewString(table, "reg_dt")
	p.Seq = field.NewInt64(table, "seq")
	p.COMTITLE = field.NewString(table, "COM_TITLE")

	p.fillFieldMap()

	return p
}

func (p *proposalComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proposalComment) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["prop_id"] = p.PropID
	p.fieldMap["admin_id"] = p.AdminID
	p.fieldMap["com_content"] = p.ComContent
	p.fieldMap["reg_dt"] = p.RegDt
	p.fieldMap["seq"] = p.Seq
	p.fieldMap["COM_TITLE"] = p.COMTITLE
}

func (p proposalComment) clone(db *gorm.DB) proposalComment {
	p.proposalCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proposalComment) replaceDB(db *gorm.DB) proposalComment {
	p.proposalCommentDo.ReplaceDB(db)
	return p
}

type proposalCommentDo struct{ gen.DO }

type IProposalCommentDo interface {
	gen.SubQuery
	Debug() IProposalCommentDo
	WithContext(ctx context.Context) IProposalCommentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProposalCommentDo
	WriteDB() IProposalCommentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProposalCommentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProposalCommentDo
	Not(conds ...gen.Condition) IProposalCommentDo
	Or(conds ...gen.Condition) IProposalCommentDo
	Select(conds ...field.Expr) IProposalCommentDo
	Where(conds ...gen.Condition) IProposalCommentDo
	Order(conds ...field.Expr) IProposalCommentDo
	Distinct(cols ...field.Expr) IProposalCommentDo
	Omit(cols ...field.Expr) IProposalCommentDo
	Join(table schema.Tabler, on ...field.Expr) IProposalCommentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProposalCommentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProposalCommentDo
	Group(cols ...field.Expr) IProposalCommentDo
	Having(conds ...gen.Condition) IProposalCommentDo
	Limit(limit int) IProposalCommentDo
	Offset(offset int) IProposalCommentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProposalCommentDo
	Unscoped() IProposalCommentDo
	Create(values ...*model.ProposalComment) error
	CreateInBatches(values []*model.ProposalComment, batchSize int) error
	Save(values ...*model.ProposalComment) error
	First() (*model.ProposalComment, error)
	Take() (*model.ProposalComment, error)
	Last() (*model.ProposalComment, error)
	Find() ([]*model.ProposalComment, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProposalComment, err error)
	FindInBatches(result *[]*model.ProposalComment, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProposalComment) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProposalCommentDo
	Assign(attrs ...field.AssignExpr) IProposalCommentDo
	Joins(fields ...field.RelationField) IProposalCommentDo
	Preload(fields ...field.RelationField) IProposalCommentDo
	FirstOrInit() (*model.ProposalComment, error)
	FirstOrCreate() (*model.ProposalComment, error)
	FindByPage(offset int, limit int) (result []*model.ProposalComment, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProposalCommentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p proposalCommentDo) Debug() IProposalCommentDo {
	return p.withDO(p.DO.Debug())
}

func (p proposalCommentDo) WithContext(ctx context.Context) IProposalCommentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proposalCommentDo) ReadDB() IProposalCommentDo {
	return p.Clauses(dbresolver.Read)
}

func (p proposalCommentDo) WriteDB() IProposalCommentDo {
	return p.Clauses(dbresolver.Write)
}

func (p proposalCommentDo) Session(config *gorm.Session) IProposalCommentDo {
	return p.withDO(p.DO.Session(config))
}

func (p proposalCommentDo) Clauses(conds ...clause.Expression) IProposalCommentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proposalCommentDo) Returning(value interface{}, columns ...string) IProposalCommentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proposalCommentDo) Not(conds ...gen.Condition) IProposalCommentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proposalCommentDo) Or(conds ...gen.Condition) IProposalCommentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proposalCommentDo) Select(conds ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proposalCommentDo) Where(conds ...gen.Condition) IProposalCommentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proposalCommentDo) Order(conds ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proposalCommentDo) Distinct(cols ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proposalCommentDo) Omit(cols ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proposalCommentDo) Join(table schema.Tabler, on ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proposalCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proposalCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proposalCommentDo) Group(cols ...field.Expr) IProposalCommentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proposalCommentDo) Having(conds ...gen.Condition) IProposalCommentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proposalCommentDo) Limit(limit int) IProposalCommentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proposalCommentDo) Offset(offset int) IProposalCommentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proposalCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProposalCommentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proposalCommentDo) Unscoped() IProposalCommentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proposalCommentDo) Create(values ...*model.ProposalComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proposalCommentDo) CreateInBatches(values []*model.ProposalComment, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proposalCommentDo) Save(values ...*model.ProposalComment) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proposalCommentDo) First() (*model.ProposalComment, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalComment), nil
	}
}

func (p proposalCommentDo) Take() (*model.ProposalComment, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalComment), nil
	}
}

func (p proposalCommentDo) Last() (*model.ProposalComment, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalComment), nil
	}
}

func (p proposalCommentDo) Find() ([]*model.ProposalComment, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProposalComment), err
}

func (p proposalCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProposalComment, err error) {
	buf := make([]*model.ProposalComment, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proposalCommentDo) FindInBatches(result *[]*model.ProposalComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proposalCommentDo) Attrs(attrs ...field.AssignExpr) IProposalCommentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proposalCommentDo) Assign(attrs ...field.AssignExpr) IProposalCommentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proposalCommentDo) Joins(fields ...field.RelationField) IProposalCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proposalCommentDo) Preload(fields ...field.RelationField) IProposalCommentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proposalCommentDo) FirstOrInit() (*model.ProposalComment, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalComment), nil
	}
}

func (p proposalCommentDo) FirstOrCreate() (*model.ProposalComment, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProposalComment), nil
	}
}

func (p proposalCommentDo) FindByPage(offset int, limit int) (result []*model.ProposalComment, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proposalCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proposalCommentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proposalCommentDo) Delete(models ...*model.ProposalComment) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proposalCommentDo) withDO(do gen.Dao) *proposalCommentDo {
	p.DO = *do.(*gen.DO)
	return p
}
