// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newEVENTUSERINFO(db *gorm.DB, opts ...gen.DOOption) eVENTUSERINFO {
	_eVENTUSERINFO := eVENTUSERINFO{}

	_eVENTUSERINFO.eVENTUSERINFODo.UseDB(db, opts...)
	_eVENTUSERINFO.eVENTUSERINFODo.UseModel(&model.EVENTUSERINFO{})

	tableName := _eVENTUSERINFO.eVENTUSERINFODo.TableName()
	_eVENTUSERINFO.ALL = field.NewAsterisk(tableName)
	_eVENTUSERINFO.EventID = field.NewInt64(tableName, "event_id")
	_eVENTUSERINFO.UserID = field.NewString(tableName, "user_id")
	_eVENTUSERINFO.UserName = field.NewString(tableName, "user_name")
	_eVENTUSERINFO.DeptName = field.NewString(tableName, "dept_name")
	_eVENTUSERINFO.PatName = field.NewString(tableName, "pat_name")
	_eVENTUSERINFO.UserPhoneNo = field.NewString(tableName, "user_phoneNo")
	_eVENTUSERINFO.RegDt = field.NewString(tableName, "reg_dt")

	_eVENTUSERINFO.fillFieldMap()

	return _eVENTUSERINFO
}

type eVENTUSERINFO struct {
	eVENTUSERINFODo

	ALL         field.Asterisk
	EventID     field.Int64
	UserID      field.String
	UserName    field.String
	DeptName    field.String
	PatName     field.String
	UserPhoneNo field.String
	RegDt       field.String

	fieldMap map[string]field.Expr
}

func (e eVENTUSERINFO) Table(newTableName string) *eVENTUSERINFO {
	e.eVENTUSERINFODo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eVENTUSERINFO) As(alias string) *eVENTUSERINFO {
	e.eVENTUSERINFODo.DO = *(e.eVENTUSERINFODo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eVENTUSERINFO) updateTableName(table string) *eVENTUSERINFO {
	e.ALL = field.NewAsterisk(table)
	e.EventID = field.NewInt64(table, "event_id")
	e.UserID = field.NewString(table, "user_id")
	e.UserName = field.NewString(table, "user_name")
	e.DeptName = field.NewString(table, "dept_name")
	e.PatName = field.NewString(table, "pat_name")
	e.UserPhoneNo = field.NewString(table, "user_phoneNo")
	e.RegDt = field.NewString(table, "reg_dt")

	e.fillFieldMap()

	return e
}

func (e *eVENTUSERINFO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eVENTUSERINFO) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 7)
	e.fieldMap["event_id"] = e.EventID
	e.fieldMap["user_id"] = e.UserID
	e.fieldMap["user_name"] = e.UserName
	e.fieldMap["dept_name"] = e.DeptName
	e.fieldMap["pat_name"] = e.PatName
	e.fieldMap["user_phoneNo"] = e.UserPhoneNo
	e.fieldMap["reg_dt"] = e.RegDt
}

func (e eVENTUSERINFO) clone(db *gorm.DB) eVENTUSERINFO {
	e.eVENTUSERINFODo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eVENTUSERINFO) replaceDB(db *gorm.DB) eVENTUSERINFO {
	e.eVENTUSERINFODo.ReplaceDB(db)
	return e
}

type eVENTUSERINFODo struct{ gen.DO }

type IEVENTUSERINFODo interface {
	gen.SubQuery
	Debug() IEVENTUSERINFODo
	WithContext(ctx context.Context) IEVENTUSERINFODo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEVENTUSERINFODo
	WriteDB() IEVENTUSERINFODo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEVENTUSERINFODo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEVENTUSERINFODo
	Not(conds ...gen.Condition) IEVENTUSERINFODo
	Or(conds ...gen.Condition) IEVENTUSERINFODo
	Select(conds ...field.Expr) IEVENTUSERINFODo
	Where(conds ...gen.Condition) IEVENTUSERINFODo
	Order(conds ...field.Expr) IEVENTUSERINFODo
	Distinct(cols ...field.Expr) IEVENTUSERINFODo
	Omit(cols ...field.Expr) IEVENTUSERINFODo
	Join(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo
	RightJoin(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo
	Group(cols ...field.Expr) IEVENTUSERINFODo
	Having(conds ...gen.Condition) IEVENTUSERINFODo
	Limit(limit int) IEVENTUSERINFODo
	Offset(offset int) IEVENTUSERINFODo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEVENTUSERINFODo
	Unscoped() IEVENTUSERINFODo
	Create(values ...*model.EVENTUSERINFO) error
	CreateInBatches(values []*model.EVENTUSERINFO, batchSize int) error
	Save(values ...*model.EVENTUSERINFO) error
	First() (*model.EVENTUSERINFO, error)
	Take() (*model.EVENTUSERINFO, error)
	Last() (*model.EVENTUSERINFO, error)
	Find() ([]*model.EVENTUSERINFO, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EVENTUSERINFO, err error)
	FindInBatches(result *[]*model.EVENTUSERINFO, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EVENTUSERINFO) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEVENTUSERINFODo
	Assign(attrs ...field.AssignExpr) IEVENTUSERINFODo
	Joins(fields ...field.RelationField) IEVENTUSERINFODo
	Preload(fields ...field.RelationField) IEVENTUSERINFODo
	FirstOrInit() (*model.EVENTUSERINFO, error)
	FirstOrCreate() (*model.EVENTUSERINFO, error)
	FindByPage(offset int, limit int) (result []*model.EVENTUSERINFO, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEVENTUSERINFODo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eVENTUSERINFODo) Debug() IEVENTUSERINFODo {
	return e.withDO(e.DO.Debug())
}

func (e eVENTUSERINFODo) WithContext(ctx context.Context) IEVENTUSERINFODo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eVENTUSERINFODo) ReadDB() IEVENTUSERINFODo {
	return e.Clauses(dbresolver.Read)
}

func (e eVENTUSERINFODo) WriteDB() IEVENTUSERINFODo {
	return e.Clauses(dbresolver.Write)
}

func (e eVENTUSERINFODo) Session(config *gorm.Session) IEVENTUSERINFODo {
	return e.withDO(e.DO.Session(config))
}

func (e eVENTUSERINFODo) Clauses(conds ...clause.Expression) IEVENTUSERINFODo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eVENTUSERINFODo) Returning(value interface{}, columns ...string) IEVENTUSERINFODo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eVENTUSERINFODo) Not(conds ...gen.Condition) IEVENTUSERINFODo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eVENTUSERINFODo) Or(conds ...gen.Condition) IEVENTUSERINFODo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eVENTUSERINFODo) Select(conds ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eVENTUSERINFODo) Where(conds ...gen.Condition) IEVENTUSERINFODo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eVENTUSERINFODo) Order(conds ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eVENTUSERINFODo) Distinct(cols ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eVENTUSERINFODo) Omit(cols ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eVENTUSERINFODo) Join(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eVENTUSERINFODo) LeftJoin(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eVENTUSERINFODo) RightJoin(table schema.Tabler, on ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eVENTUSERINFODo) Group(cols ...field.Expr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eVENTUSERINFODo) Having(conds ...gen.Condition) IEVENTUSERINFODo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eVENTUSERINFODo) Limit(limit int) IEVENTUSERINFODo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eVENTUSERINFODo) Offset(offset int) IEVENTUSERINFODo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eVENTUSERINFODo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEVENTUSERINFODo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eVENTUSERINFODo) Unscoped() IEVENTUSERINFODo {
	return e.withDO(e.DO.Unscoped())
}

func (e eVENTUSERINFODo) Create(values ...*model.EVENTUSERINFO) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eVENTUSERINFODo) CreateInBatches(values []*model.EVENTUSERINFO, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eVENTUSERINFODo) Save(values ...*model.EVENTUSERINFO) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eVENTUSERINFODo) First() (*model.EVENTUSERINFO, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVENTUSERINFO), nil
	}
}

func (e eVENTUSERINFODo) Take() (*model.EVENTUSERINFO, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVENTUSERINFO), nil
	}
}

func (e eVENTUSERINFODo) Last() (*model.EVENTUSERINFO, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVENTUSERINFO), nil
	}
}

func (e eVENTUSERINFODo) Find() ([]*model.EVENTUSERINFO, error) {
	result, err := e.DO.Find()
	return result.([]*model.EVENTUSERINFO), err
}

func (e eVENTUSERINFODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EVENTUSERINFO, err error) {
	buf := make([]*model.EVENTUSERINFO, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eVENTUSERINFODo) FindInBatches(result *[]*model.EVENTUSERINFO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eVENTUSERINFODo) Attrs(attrs ...field.AssignExpr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eVENTUSERINFODo) Assign(attrs ...field.AssignExpr) IEVENTUSERINFODo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eVENTUSERINFODo) Joins(fields ...field.RelationField) IEVENTUSERINFODo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eVENTUSERINFODo) Preload(fields ...field.RelationField) IEVENTUSERINFODo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eVENTUSERINFODo) FirstOrInit() (*model.EVENTUSERINFO, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVENTUSERINFO), nil
	}
}

func (e eVENTUSERINFODo) FirstOrCreate() (*model.EVENTUSERINFO, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EVENTUSERINFO), nil
	}
}

func (e eVENTUSERINFODo) FindByPage(offset int, limit int) (result []*model.EVENTUSERINFO, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eVENTUSERINFODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eVENTUSERINFODo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eVENTUSERINFODo) Delete(models ...*model.EVENTUSERINFO) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eVENTUSERINFODo) withDO(do gen.Dao) *eVENTUSERINFODo {
	e.DO = *do.(*gen.DO)
	return e
}
