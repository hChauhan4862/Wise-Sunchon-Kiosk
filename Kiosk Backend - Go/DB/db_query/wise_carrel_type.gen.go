// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseCarrelType(db *gorm.DB, opts ...gen.DOOption) wiseCarrelType {
	_wiseCarrelType := wiseCarrelType{}

	_wiseCarrelType.wiseCarrelTypeDo.UseDB(db, opts...)
	_wiseCarrelType.wiseCarrelTypeDo.UseModel(&model.WiseCarrelType{})

	tableName := _wiseCarrelType.wiseCarrelTypeDo.TableName()
	_wiseCarrelType.ALL = field.NewAsterisk(tableName)
	_wiseCarrelType.CarrelType = field.NewInt64(tableName, "carrel_type")
	_wiseCarrelType.TypeName = field.NewString(tableName, "type_name")
	_wiseCarrelType.UseYn = field.NewString(tableName, "use_yn")
	_wiseCarrelType.UseDay = field.NewInt64(tableName, "use_day")
	_wiseCarrelType.UseTerm = field.NewString(tableName, "use_term")
	_wiseCarrelType.UseCount = field.NewString(tableName, "use_count")
	_wiseCarrelType.PatLimit = field.NewString(tableName, "pat_limit")
	_wiseCarrelType.BlockLimit = field.NewString(tableName, "block_limit")
	_wiseCarrelType.Bigo = field.NewString(tableName, "bigo")

	_wiseCarrelType.fillFieldMap()

	return _wiseCarrelType
}

type wiseCarrelType struct {
	wiseCarrelTypeDo

	ALL        field.Asterisk
	CarrelType field.Int64
	TypeName   field.String
	UseYn      field.String
	UseDay     field.Int64
	UseTerm    field.String
	UseCount   field.String
	PatLimit   field.String
	BlockLimit field.String
	Bigo       field.String

	fieldMap map[string]field.Expr
}

func (w wiseCarrelType) Table(newTableName string) *wiseCarrelType {
	w.wiseCarrelTypeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseCarrelType) As(alias string) *wiseCarrelType {
	w.wiseCarrelTypeDo.DO = *(w.wiseCarrelTypeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseCarrelType) updateTableName(table string) *wiseCarrelType {
	w.ALL = field.NewAsterisk(table)
	w.CarrelType = field.NewInt64(table, "carrel_type")
	w.TypeName = field.NewString(table, "type_name")
	w.UseYn = field.NewString(table, "use_yn")
	w.UseDay = field.NewInt64(table, "use_day")
	w.UseTerm = field.NewString(table, "use_term")
	w.UseCount = field.NewString(table, "use_count")
	w.PatLimit = field.NewString(table, "pat_limit")
	w.BlockLimit = field.NewString(table, "block_limit")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseCarrelType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseCarrelType) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["carrel_type"] = w.CarrelType
	w.fieldMap["type_name"] = w.TypeName
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["use_day"] = w.UseDay
	w.fieldMap["use_term"] = w.UseTerm
	w.fieldMap["use_count"] = w.UseCount
	w.fieldMap["pat_limit"] = w.PatLimit
	w.fieldMap["block_limit"] = w.BlockLimit
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseCarrelType) clone(db *gorm.DB) wiseCarrelType {
	w.wiseCarrelTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseCarrelType) replaceDB(db *gorm.DB) wiseCarrelType {
	w.wiseCarrelTypeDo.ReplaceDB(db)
	return w
}

type wiseCarrelTypeDo struct{ gen.DO }

type IWiseCarrelTypeDo interface {
	gen.SubQuery
	Debug() IWiseCarrelTypeDo
	WithContext(ctx context.Context) IWiseCarrelTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseCarrelTypeDo
	WriteDB() IWiseCarrelTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseCarrelTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseCarrelTypeDo
	Not(conds ...gen.Condition) IWiseCarrelTypeDo
	Or(conds ...gen.Condition) IWiseCarrelTypeDo
	Select(conds ...field.Expr) IWiseCarrelTypeDo
	Where(conds ...gen.Condition) IWiseCarrelTypeDo
	Order(conds ...field.Expr) IWiseCarrelTypeDo
	Distinct(cols ...field.Expr) IWiseCarrelTypeDo
	Omit(cols ...field.Expr) IWiseCarrelTypeDo
	Join(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo
	Group(cols ...field.Expr) IWiseCarrelTypeDo
	Having(conds ...gen.Condition) IWiseCarrelTypeDo
	Limit(limit int) IWiseCarrelTypeDo
	Offset(offset int) IWiseCarrelTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelTypeDo
	Unscoped() IWiseCarrelTypeDo
	Create(values ...*model.WiseCarrelType) error
	CreateInBatches(values []*model.WiseCarrelType, batchSize int) error
	Save(values ...*model.WiseCarrelType) error
	First() (*model.WiseCarrelType, error)
	Take() (*model.WiseCarrelType, error)
	Last() (*model.WiseCarrelType, error)
	Find() ([]*model.WiseCarrelType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelType, err error)
	FindInBatches(result *[]*model.WiseCarrelType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseCarrelType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseCarrelTypeDo
	Assign(attrs ...field.AssignExpr) IWiseCarrelTypeDo
	Joins(fields ...field.RelationField) IWiseCarrelTypeDo
	Preload(fields ...field.RelationField) IWiseCarrelTypeDo
	FirstOrInit() (*model.WiseCarrelType, error)
	FirstOrCreate() (*model.WiseCarrelType, error)
	FindByPage(offset int, limit int) (result []*model.WiseCarrelType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseCarrelTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseCarrelTypeDo) Debug() IWiseCarrelTypeDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseCarrelTypeDo) WithContext(ctx context.Context) IWiseCarrelTypeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseCarrelTypeDo) ReadDB() IWiseCarrelTypeDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseCarrelTypeDo) WriteDB() IWiseCarrelTypeDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseCarrelTypeDo) Session(config *gorm.Session) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseCarrelTypeDo) Clauses(conds ...clause.Expression) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseCarrelTypeDo) Returning(value interface{}, columns ...string) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseCarrelTypeDo) Not(conds ...gen.Condition) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseCarrelTypeDo) Or(conds ...gen.Condition) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseCarrelTypeDo) Select(conds ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseCarrelTypeDo) Where(conds ...gen.Condition) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseCarrelTypeDo) Order(conds ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseCarrelTypeDo) Distinct(cols ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseCarrelTypeDo) Omit(cols ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseCarrelTypeDo) Join(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseCarrelTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseCarrelTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseCarrelTypeDo) Group(cols ...field.Expr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseCarrelTypeDo) Having(conds ...gen.Condition) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseCarrelTypeDo) Limit(limit int) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseCarrelTypeDo) Offset(offset int) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseCarrelTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseCarrelTypeDo) Unscoped() IWiseCarrelTypeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseCarrelTypeDo) Create(values ...*model.WiseCarrelType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseCarrelTypeDo) CreateInBatches(values []*model.WiseCarrelType, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseCarrelTypeDo) Save(values ...*model.WiseCarrelType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseCarrelTypeDo) First() (*model.WiseCarrelType, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelType), nil
	}
}

func (w wiseCarrelTypeDo) Take() (*model.WiseCarrelType, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelType), nil
	}
}

func (w wiseCarrelTypeDo) Last() (*model.WiseCarrelType, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelType), nil
	}
}

func (w wiseCarrelTypeDo) Find() ([]*model.WiseCarrelType, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseCarrelType), err
}

func (w wiseCarrelTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseCarrelType, err error) {
	buf := make([]*model.WiseCarrelType, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseCarrelTypeDo) FindInBatches(result *[]*model.WiseCarrelType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseCarrelTypeDo) Attrs(attrs ...field.AssignExpr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseCarrelTypeDo) Assign(attrs ...field.AssignExpr) IWiseCarrelTypeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseCarrelTypeDo) Joins(fields ...field.RelationField) IWiseCarrelTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseCarrelTypeDo) Preload(fields ...field.RelationField) IWiseCarrelTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseCarrelTypeDo) FirstOrInit() (*model.WiseCarrelType, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelType), nil
	}
}

func (w wiseCarrelTypeDo) FirstOrCreate() (*model.WiseCarrelType, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseCarrelType), nil
	}
}

func (w wiseCarrelTypeDo) FindByPage(offset int, limit int) (result []*model.WiseCarrelType, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseCarrelTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseCarrelTypeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseCarrelTypeDo) Delete(models ...*model.WiseCarrelType) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseCarrelTypeDo) withDO(do gen.Dao) *wiseCarrelTypeDo {
	w.DO = *do.(*gen.DO)
	return w
}
