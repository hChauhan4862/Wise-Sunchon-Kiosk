// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newDEVICEHISTORY(db *gorm.DB, opts ...gen.DOOption) dEVICEHISTORY {
	_dEVICEHISTORY := dEVICEHISTORY{}

	_dEVICEHISTORY.dEVICEHISTORYDo.UseDB(db, opts...)
	_dEVICEHISTORY.dEVICEHISTORYDo.UseModel(&model.DEVICEHISTORY{})

	tableName := _dEVICEHISTORY.dEVICEHISTORYDo.TableName()
	_dEVICEHISTORY.ALL = field.NewAsterisk(tableName)
	_dEVICEHISTORY.SEQ = field.NewInt64(tableName, "SEQ")
	_dEVICEHISTORY.SERIALNO = field.NewString(tableName, "SERIAL_NO")
	_dEVICEHISTORY.DEVNM = field.NewString(tableName, "DEV_NM")
	_dEVICEHISTORY.COMP = field.NewString(tableName, "COMP")
	_dEVICEHISTORY.DEVLOC = field.NewString(tableName, "DEV_LOC")
	_dEVICEHISTORY.SENDDT = field.NewString(tableName, "SEND_DT")
	_dEVICEHISTORY.NAME = field.NewString(tableName, "NAME")
	_dEVICEHISTORY.BIGO = field.NewString(tableName, "BIGO")

	_dEVICEHISTORY.fillFieldMap()

	return _dEVICEHISTORY
}

type dEVICEHISTORY struct {
	dEVICEHISTORYDo

	ALL      field.Asterisk
	SEQ      field.Int64
	SERIALNO field.String
	DEVNM    field.String
	COMP     field.String
	DEVLOC   field.String
	SENDDT   field.String
	NAME     field.String
	BIGO     field.String

	fieldMap map[string]field.Expr
}

func (d dEVICEHISTORY) Table(newTableName string) *dEVICEHISTORY {
	d.dEVICEHISTORYDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dEVICEHISTORY) As(alias string) *dEVICEHISTORY {
	d.dEVICEHISTORYDo.DO = *(d.dEVICEHISTORYDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dEVICEHISTORY) updateTableName(table string) *dEVICEHISTORY {
	d.ALL = field.NewAsterisk(table)
	d.SEQ = field.NewInt64(table, "SEQ")
	d.SERIALNO = field.NewString(table, "SERIAL_NO")
	d.DEVNM = field.NewString(table, "DEV_NM")
	d.COMP = field.NewString(table, "COMP")
	d.DEVLOC = field.NewString(table, "DEV_LOC")
	d.SENDDT = field.NewString(table, "SEND_DT")
	d.NAME = field.NewString(table, "NAME")
	d.BIGO = field.NewString(table, "BIGO")

	d.fillFieldMap()

	return d
}

func (d *dEVICEHISTORY) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dEVICEHISTORY) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["SEQ"] = d.SEQ
	d.fieldMap["SERIAL_NO"] = d.SERIALNO
	d.fieldMap["DEV_NM"] = d.DEVNM
	d.fieldMap["COMP"] = d.COMP
	d.fieldMap["DEV_LOC"] = d.DEVLOC
	d.fieldMap["SEND_DT"] = d.SENDDT
	d.fieldMap["NAME"] = d.NAME
	d.fieldMap["BIGO"] = d.BIGO
}

func (d dEVICEHISTORY) clone(db *gorm.DB) dEVICEHISTORY {
	d.dEVICEHISTORYDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dEVICEHISTORY) replaceDB(db *gorm.DB) dEVICEHISTORY {
	d.dEVICEHISTORYDo.ReplaceDB(db)
	return d
}

type dEVICEHISTORYDo struct{ gen.DO }

type IDEVICEHISTORYDo interface {
	gen.SubQuery
	Debug() IDEVICEHISTORYDo
	WithContext(ctx context.Context) IDEVICEHISTORYDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDEVICEHISTORYDo
	WriteDB() IDEVICEHISTORYDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDEVICEHISTORYDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDEVICEHISTORYDo
	Not(conds ...gen.Condition) IDEVICEHISTORYDo
	Or(conds ...gen.Condition) IDEVICEHISTORYDo
	Select(conds ...field.Expr) IDEVICEHISTORYDo
	Where(conds ...gen.Condition) IDEVICEHISTORYDo
	Order(conds ...field.Expr) IDEVICEHISTORYDo
	Distinct(cols ...field.Expr) IDEVICEHISTORYDo
	Omit(cols ...field.Expr) IDEVICEHISTORYDo
	Join(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo
	Group(cols ...field.Expr) IDEVICEHISTORYDo
	Having(conds ...gen.Condition) IDEVICEHISTORYDo
	Limit(limit int) IDEVICEHISTORYDo
	Offset(offset int) IDEVICEHISTORYDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDEVICEHISTORYDo
	Unscoped() IDEVICEHISTORYDo
	Create(values ...*model.DEVICEHISTORY) error
	CreateInBatches(values []*model.DEVICEHISTORY, batchSize int) error
	Save(values ...*model.DEVICEHISTORY) error
	First() (*model.DEVICEHISTORY, error)
	Take() (*model.DEVICEHISTORY, error)
	Last() (*model.DEVICEHISTORY, error)
	Find() ([]*model.DEVICEHISTORY, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DEVICEHISTORY, err error)
	FindInBatches(result *[]*model.DEVICEHISTORY, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DEVICEHISTORY) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDEVICEHISTORYDo
	Assign(attrs ...field.AssignExpr) IDEVICEHISTORYDo
	Joins(fields ...field.RelationField) IDEVICEHISTORYDo
	Preload(fields ...field.RelationField) IDEVICEHISTORYDo
	FirstOrInit() (*model.DEVICEHISTORY, error)
	FirstOrCreate() (*model.DEVICEHISTORY, error)
	FindByPage(offset int, limit int) (result []*model.DEVICEHISTORY, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDEVICEHISTORYDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dEVICEHISTORYDo) Debug() IDEVICEHISTORYDo {
	return d.withDO(d.DO.Debug())
}

func (d dEVICEHISTORYDo) WithContext(ctx context.Context) IDEVICEHISTORYDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dEVICEHISTORYDo) ReadDB() IDEVICEHISTORYDo {
	return d.Clauses(dbresolver.Read)
}

func (d dEVICEHISTORYDo) WriteDB() IDEVICEHISTORYDo {
	return d.Clauses(dbresolver.Write)
}

func (d dEVICEHISTORYDo) Session(config *gorm.Session) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Session(config))
}

func (d dEVICEHISTORYDo) Clauses(conds ...clause.Expression) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dEVICEHISTORYDo) Returning(value interface{}, columns ...string) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dEVICEHISTORYDo) Not(conds ...gen.Condition) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dEVICEHISTORYDo) Or(conds ...gen.Condition) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dEVICEHISTORYDo) Select(conds ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dEVICEHISTORYDo) Where(conds ...gen.Condition) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dEVICEHISTORYDo) Order(conds ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dEVICEHISTORYDo) Distinct(cols ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dEVICEHISTORYDo) Omit(cols ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dEVICEHISTORYDo) Join(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dEVICEHISTORYDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dEVICEHISTORYDo) RightJoin(table schema.Tabler, on ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dEVICEHISTORYDo) Group(cols ...field.Expr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dEVICEHISTORYDo) Having(conds ...gen.Condition) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dEVICEHISTORYDo) Limit(limit int) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dEVICEHISTORYDo) Offset(offset int) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dEVICEHISTORYDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dEVICEHISTORYDo) Unscoped() IDEVICEHISTORYDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dEVICEHISTORYDo) Create(values ...*model.DEVICEHISTORY) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dEVICEHISTORYDo) CreateInBatches(values []*model.DEVICEHISTORY, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dEVICEHISTORYDo) Save(values ...*model.DEVICEHISTORY) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dEVICEHISTORYDo) First() (*model.DEVICEHISTORY, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DEVICEHISTORY), nil
	}
}

func (d dEVICEHISTORYDo) Take() (*model.DEVICEHISTORY, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DEVICEHISTORY), nil
	}
}

func (d dEVICEHISTORYDo) Last() (*model.DEVICEHISTORY, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DEVICEHISTORY), nil
	}
}

func (d dEVICEHISTORYDo) Find() ([]*model.DEVICEHISTORY, error) {
	result, err := d.DO.Find()
	return result.([]*model.DEVICEHISTORY), err
}

func (d dEVICEHISTORYDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DEVICEHISTORY, err error) {
	buf := make([]*model.DEVICEHISTORY, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dEVICEHISTORYDo) FindInBatches(result *[]*model.DEVICEHISTORY, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dEVICEHISTORYDo) Attrs(attrs ...field.AssignExpr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dEVICEHISTORYDo) Assign(attrs ...field.AssignExpr) IDEVICEHISTORYDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dEVICEHISTORYDo) Joins(fields ...field.RelationField) IDEVICEHISTORYDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dEVICEHISTORYDo) Preload(fields ...field.RelationField) IDEVICEHISTORYDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dEVICEHISTORYDo) FirstOrInit() (*model.DEVICEHISTORY, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DEVICEHISTORY), nil
	}
}

func (d dEVICEHISTORYDo) FirstOrCreate() (*model.DEVICEHISTORY, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DEVICEHISTORY), nil
	}
}

func (d dEVICEHISTORYDo) FindByPage(offset int, limit int) (result []*model.DEVICEHISTORY, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dEVICEHISTORYDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dEVICEHISTORYDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dEVICEHISTORYDo) Delete(models ...*model.DEVICEHISTORY) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dEVICEHISTORYDo) withDO(do gen.Dao) *dEVICEHISTORYDo {
	d.DO = *do.(*gen.DO)
	return d
}
