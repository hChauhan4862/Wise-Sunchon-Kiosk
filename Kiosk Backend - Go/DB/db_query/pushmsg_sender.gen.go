// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newPUSHMSGSENDER(db *gorm.DB, opts ...gen.DOOption) pUSHMSGSENDER {
	_pUSHMSGSENDER := pUSHMSGSENDER{}

	_pUSHMSGSENDER.pUSHMSGSENDERDo.UseDB(db, opts...)
	_pUSHMSGSENDER.pUSHMSGSENDERDo.UseModel(&model.PUSHMSGSENDER{})

	tableName := _pUSHMSGSENDER.pUSHMSGSENDERDo.TableName()
	_pUSHMSGSENDER.ALL = field.NewAsterisk(tableName)
	_pUSHMSGSENDER.ID = field.NewInt64(tableName, "ID")
	_pUSHMSGSENDER.BSEQNO = field.NewInt64(tableName, "BSEQNO")
	_pUSHMSGSENDER.SCHOOLNO = field.NewString(tableName, "SCHOOL_NO")
	_pUSHMSGSENDER.REGTIME = field.NewTime(tableName, "REGTIME")
	_pUSHMSGSENDER.SENDTIME = field.NewTime(tableName, "SENDTIME")
	_pUSHMSGSENDER.REALSENDTIME = field.NewTime(tableName, "REALSENDTIME")
	_pUSHMSGSENDER.STATUS = field.NewInt64(tableName, "STATUS")
	_pUSHMSGSENDER.SMSTXT = field.NewString(tableName, "SMS_TXT")
	_pUSHMSGSENDER.ISSUETYPE = field.NewInt64(tableName, "ISSUE_TYPE")
	_pUSHMSGSENDER.MSGTYPE = field.NewInt64(tableName, "MSG_TYPE")

	_pUSHMSGSENDER.fillFieldMap()

	return _pUSHMSGSENDER
}

type pUSHMSGSENDER struct {
	pUSHMSGSENDERDo

	ALL          field.Asterisk
	ID           field.Int64
	BSEQNO       field.Int64
	SCHOOLNO     field.String
	REGTIME      field.Time
	SENDTIME     field.Time
	REALSENDTIME field.Time
	STATUS       field.Int64
	SMSTXT       field.String
	ISSUETYPE    field.Int64
	MSGTYPE      field.Int64

	fieldMap map[string]field.Expr
}

func (p pUSHMSGSENDER) Table(newTableName string) *pUSHMSGSENDER {
	p.pUSHMSGSENDERDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pUSHMSGSENDER) As(alias string) *pUSHMSGSENDER {
	p.pUSHMSGSENDERDo.DO = *(p.pUSHMSGSENDERDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pUSHMSGSENDER) updateTableName(table string) *pUSHMSGSENDER {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "ID")
	p.BSEQNO = field.NewInt64(table, "BSEQNO")
	p.SCHOOLNO = field.NewString(table, "SCHOOL_NO")
	p.REGTIME = field.NewTime(table, "REGTIME")
	p.SENDTIME = field.NewTime(table, "SENDTIME")
	p.REALSENDTIME = field.NewTime(table, "REALSENDTIME")
	p.STATUS = field.NewInt64(table, "STATUS")
	p.SMSTXT = field.NewString(table, "SMS_TXT")
	p.ISSUETYPE = field.NewInt64(table, "ISSUE_TYPE")
	p.MSGTYPE = field.NewInt64(table, "MSG_TYPE")

	p.fillFieldMap()

	return p
}

func (p *pUSHMSGSENDER) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pUSHMSGSENDER) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["ID"] = p.ID
	p.fieldMap["BSEQNO"] = p.BSEQNO
	p.fieldMap["SCHOOL_NO"] = p.SCHOOLNO
	p.fieldMap["REGTIME"] = p.REGTIME
	p.fieldMap["SENDTIME"] = p.SENDTIME
	p.fieldMap["REALSENDTIME"] = p.REALSENDTIME
	p.fieldMap["STATUS"] = p.STATUS
	p.fieldMap["SMS_TXT"] = p.SMSTXT
	p.fieldMap["ISSUE_TYPE"] = p.ISSUETYPE
	p.fieldMap["MSG_TYPE"] = p.MSGTYPE
}

func (p pUSHMSGSENDER) clone(db *gorm.DB) pUSHMSGSENDER {
	p.pUSHMSGSENDERDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pUSHMSGSENDER) replaceDB(db *gorm.DB) pUSHMSGSENDER {
	p.pUSHMSGSENDERDo.ReplaceDB(db)
	return p
}

type pUSHMSGSENDERDo struct{ gen.DO }

type IPUSHMSGSENDERDo interface {
	gen.SubQuery
	Debug() IPUSHMSGSENDERDo
	WithContext(ctx context.Context) IPUSHMSGSENDERDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPUSHMSGSENDERDo
	WriteDB() IPUSHMSGSENDERDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPUSHMSGSENDERDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPUSHMSGSENDERDo
	Not(conds ...gen.Condition) IPUSHMSGSENDERDo
	Or(conds ...gen.Condition) IPUSHMSGSENDERDo
	Select(conds ...field.Expr) IPUSHMSGSENDERDo
	Where(conds ...gen.Condition) IPUSHMSGSENDERDo
	Order(conds ...field.Expr) IPUSHMSGSENDERDo
	Distinct(cols ...field.Expr) IPUSHMSGSENDERDo
	Omit(cols ...field.Expr) IPUSHMSGSENDERDo
	Join(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo
	Group(cols ...field.Expr) IPUSHMSGSENDERDo
	Having(conds ...gen.Condition) IPUSHMSGSENDERDo
	Limit(limit int) IPUSHMSGSENDERDo
	Offset(offset int) IPUSHMSGSENDERDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPUSHMSGSENDERDo
	Unscoped() IPUSHMSGSENDERDo
	Create(values ...*model.PUSHMSGSENDER) error
	CreateInBatches(values []*model.PUSHMSGSENDER, batchSize int) error
	Save(values ...*model.PUSHMSGSENDER) error
	First() (*model.PUSHMSGSENDER, error)
	Take() (*model.PUSHMSGSENDER, error)
	Last() (*model.PUSHMSGSENDER, error)
	Find() ([]*model.PUSHMSGSENDER, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PUSHMSGSENDER, err error)
	FindInBatches(result *[]*model.PUSHMSGSENDER, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PUSHMSGSENDER) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPUSHMSGSENDERDo
	Assign(attrs ...field.AssignExpr) IPUSHMSGSENDERDo
	Joins(fields ...field.RelationField) IPUSHMSGSENDERDo
	Preload(fields ...field.RelationField) IPUSHMSGSENDERDo
	FirstOrInit() (*model.PUSHMSGSENDER, error)
	FirstOrCreate() (*model.PUSHMSGSENDER, error)
	FindByPage(offset int, limit int) (result []*model.PUSHMSGSENDER, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPUSHMSGSENDERDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pUSHMSGSENDERDo) Debug() IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Debug())
}

func (p pUSHMSGSENDERDo) WithContext(ctx context.Context) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pUSHMSGSENDERDo) ReadDB() IPUSHMSGSENDERDo {
	return p.Clauses(dbresolver.Read)
}

func (p pUSHMSGSENDERDo) WriteDB() IPUSHMSGSENDERDo {
	return p.Clauses(dbresolver.Write)
}

func (p pUSHMSGSENDERDo) Session(config *gorm.Session) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Session(config))
}

func (p pUSHMSGSENDERDo) Clauses(conds ...clause.Expression) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pUSHMSGSENDERDo) Returning(value interface{}, columns ...string) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pUSHMSGSENDERDo) Not(conds ...gen.Condition) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pUSHMSGSENDERDo) Or(conds ...gen.Condition) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pUSHMSGSENDERDo) Select(conds ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pUSHMSGSENDERDo) Where(conds ...gen.Condition) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pUSHMSGSENDERDo) Order(conds ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pUSHMSGSENDERDo) Distinct(cols ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pUSHMSGSENDERDo) Omit(cols ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pUSHMSGSENDERDo) Join(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pUSHMSGSENDERDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pUSHMSGSENDERDo) RightJoin(table schema.Tabler, on ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pUSHMSGSENDERDo) Group(cols ...field.Expr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pUSHMSGSENDERDo) Having(conds ...gen.Condition) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pUSHMSGSENDERDo) Limit(limit int) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pUSHMSGSENDERDo) Offset(offset int) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pUSHMSGSENDERDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pUSHMSGSENDERDo) Unscoped() IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pUSHMSGSENDERDo) Create(values ...*model.PUSHMSGSENDER) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pUSHMSGSENDERDo) CreateInBatches(values []*model.PUSHMSGSENDER, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pUSHMSGSENDERDo) Save(values ...*model.PUSHMSGSENDER) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pUSHMSGSENDERDo) First() (*model.PUSHMSGSENDER, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PUSHMSGSENDER), nil
	}
}

func (p pUSHMSGSENDERDo) Take() (*model.PUSHMSGSENDER, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PUSHMSGSENDER), nil
	}
}

func (p pUSHMSGSENDERDo) Last() (*model.PUSHMSGSENDER, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PUSHMSGSENDER), nil
	}
}

func (p pUSHMSGSENDERDo) Find() ([]*model.PUSHMSGSENDER, error) {
	result, err := p.DO.Find()
	return result.([]*model.PUSHMSGSENDER), err
}

func (p pUSHMSGSENDERDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PUSHMSGSENDER, err error) {
	buf := make([]*model.PUSHMSGSENDER, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pUSHMSGSENDERDo) FindInBatches(result *[]*model.PUSHMSGSENDER, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pUSHMSGSENDERDo) Attrs(attrs ...field.AssignExpr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pUSHMSGSENDERDo) Assign(attrs ...field.AssignExpr) IPUSHMSGSENDERDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pUSHMSGSENDERDo) Joins(fields ...field.RelationField) IPUSHMSGSENDERDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pUSHMSGSENDERDo) Preload(fields ...field.RelationField) IPUSHMSGSENDERDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pUSHMSGSENDERDo) FirstOrInit() (*model.PUSHMSGSENDER, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PUSHMSGSENDER), nil
	}
}

func (p pUSHMSGSENDERDo) FirstOrCreate() (*model.PUSHMSGSENDER, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PUSHMSGSENDER), nil
	}
}

func (p pUSHMSGSENDERDo) FindByPage(offset int, limit int) (result []*model.PUSHMSGSENDER, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pUSHMSGSENDERDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pUSHMSGSENDERDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pUSHMSGSENDERDo) Delete(models ...*model.PUSHMSGSENDER) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pUSHMSGSENDERDo) withDO(do gen.Dao) *pUSHMSGSENDERDo {
	p.DO = *do.(*gen.DO)
	return p
}
