// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseReturnReconf(db *gorm.DB, opts ...gen.DOOption) wiseReturnReconf {
	_wiseReturnReconf := wiseReturnReconf{}

	_wiseReturnReconf.wiseReturnReconfDo.UseDB(db, opts...)
	_wiseReturnReconf.wiseReturnReconfDo.UseModel(&model.WiseReturnReconf{})

	tableName := _wiseReturnReconf.wiseReturnReconfDo.TableName()
	_wiseReturnReconf.ALL = field.NewAsterisk(tableName)
	_wiseReturnReconf.PcNo = field.NewInt64(tableName, "pc_no")
	_wiseReturnReconf.ReconfTime = field.NewString(tableName, "reconf_time")

	_wiseReturnReconf.fillFieldMap()

	return _wiseReturnReconf
}

type wiseReturnReconf struct {
	wiseReturnReconfDo

	ALL        field.Asterisk
	PcNo       field.Int64
	ReconfTime field.String

	fieldMap map[string]field.Expr
}

func (w wiseReturnReconf) Table(newTableName string) *wiseReturnReconf {
	w.wiseReturnReconfDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseReturnReconf) As(alias string) *wiseReturnReconf {
	w.wiseReturnReconfDo.DO = *(w.wiseReturnReconfDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseReturnReconf) updateTableName(table string) *wiseReturnReconf {
	w.ALL = field.NewAsterisk(table)
	w.PcNo = field.NewInt64(table, "pc_no")
	w.ReconfTime = field.NewString(table, "reconf_time")

	w.fillFieldMap()

	return w
}

func (w *wiseReturnReconf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseReturnReconf) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 2)
	w.fieldMap["pc_no"] = w.PcNo
	w.fieldMap["reconf_time"] = w.ReconfTime
}

func (w wiseReturnReconf) clone(db *gorm.DB) wiseReturnReconf {
	w.wiseReturnReconfDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseReturnReconf) replaceDB(db *gorm.DB) wiseReturnReconf {
	w.wiseReturnReconfDo.ReplaceDB(db)
	return w
}

type wiseReturnReconfDo struct{ gen.DO }

type IWiseReturnReconfDo interface {
	gen.SubQuery
	Debug() IWiseReturnReconfDo
	WithContext(ctx context.Context) IWiseReturnReconfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseReturnReconfDo
	WriteDB() IWiseReturnReconfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseReturnReconfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseReturnReconfDo
	Not(conds ...gen.Condition) IWiseReturnReconfDo
	Or(conds ...gen.Condition) IWiseReturnReconfDo
	Select(conds ...field.Expr) IWiseReturnReconfDo
	Where(conds ...gen.Condition) IWiseReturnReconfDo
	Order(conds ...field.Expr) IWiseReturnReconfDo
	Distinct(cols ...field.Expr) IWiseReturnReconfDo
	Omit(cols ...field.Expr) IWiseReturnReconfDo
	Join(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo
	Group(cols ...field.Expr) IWiseReturnReconfDo
	Having(conds ...gen.Condition) IWiseReturnReconfDo
	Limit(limit int) IWiseReturnReconfDo
	Offset(offset int) IWiseReturnReconfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnReconfDo
	Unscoped() IWiseReturnReconfDo
	Create(values ...*model.WiseReturnReconf) error
	CreateInBatches(values []*model.WiseReturnReconf, batchSize int) error
	Save(values ...*model.WiseReturnReconf) error
	First() (*model.WiseReturnReconf, error)
	Take() (*model.WiseReturnReconf, error)
	Last() (*model.WiseReturnReconf, error)
	Find() ([]*model.WiseReturnReconf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnReconf, err error)
	FindInBatches(result *[]*model.WiseReturnReconf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseReturnReconf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseReturnReconfDo
	Assign(attrs ...field.AssignExpr) IWiseReturnReconfDo
	Joins(fields ...field.RelationField) IWiseReturnReconfDo
	Preload(fields ...field.RelationField) IWiseReturnReconfDo
	FirstOrInit() (*model.WiseReturnReconf, error)
	FirstOrCreate() (*model.WiseReturnReconf, error)
	FindByPage(offset int, limit int) (result []*model.WiseReturnReconf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseReturnReconfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseReturnReconfDo) Debug() IWiseReturnReconfDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseReturnReconfDo) WithContext(ctx context.Context) IWiseReturnReconfDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseReturnReconfDo) ReadDB() IWiseReturnReconfDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseReturnReconfDo) WriteDB() IWiseReturnReconfDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseReturnReconfDo) Session(config *gorm.Session) IWiseReturnReconfDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseReturnReconfDo) Clauses(conds ...clause.Expression) IWiseReturnReconfDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseReturnReconfDo) Returning(value interface{}, columns ...string) IWiseReturnReconfDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseReturnReconfDo) Not(conds ...gen.Condition) IWiseReturnReconfDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseReturnReconfDo) Or(conds ...gen.Condition) IWiseReturnReconfDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseReturnReconfDo) Select(conds ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseReturnReconfDo) Where(conds ...gen.Condition) IWiseReturnReconfDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseReturnReconfDo) Order(conds ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseReturnReconfDo) Distinct(cols ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseReturnReconfDo) Omit(cols ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseReturnReconfDo) Join(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseReturnReconfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseReturnReconfDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseReturnReconfDo) Group(cols ...field.Expr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseReturnReconfDo) Having(conds ...gen.Condition) IWiseReturnReconfDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseReturnReconfDo) Limit(limit int) IWiseReturnReconfDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseReturnReconfDo) Offset(offset int) IWiseReturnReconfDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseReturnReconfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseReturnReconfDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseReturnReconfDo) Unscoped() IWiseReturnReconfDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseReturnReconfDo) Create(values ...*model.WiseReturnReconf) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseReturnReconfDo) CreateInBatches(values []*model.WiseReturnReconf, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseReturnReconfDo) Save(values ...*model.WiseReturnReconf) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseReturnReconfDo) First() (*model.WiseReturnReconf, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnReconf), nil
	}
}

func (w wiseReturnReconfDo) Take() (*model.WiseReturnReconf, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnReconf), nil
	}
}

func (w wiseReturnReconfDo) Last() (*model.WiseReturnReconf, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnReconf), nil
	}
}

func (w wiseReturnReconfDo) Find() ([]*model.WiseReturnReconf, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseReturnReconf), err
}

func (w wiseReturnReconfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseReturnReconf, err error) {
	buf := make([]*model.WiseReturnReconf, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseReturnReconfDo) FindInBatches(result *[]*model.WiseReturnReconf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseReturnReconfDo) Attrs(attrs ...field.AssignExpr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseReturnReconfDo) Assign(attrs ...field.AssignExpr) IWiseReturnReconfDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseReturnReconfDo) Joins(fields ...field.RelationField) IWiseReturnReconfDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseReturnReconfDo) Preload(fields ...field.RelationField) IWiseReturnReconfDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseReturnReconfDo) FirstOrInit() (*model.WiseReturnReconf, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnReconf), nil
	}
}

func (w wiseReturnReconfDo) FirstOrCreate() (*model.WiseReturnReconf, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseReturnReconf), nil
	}
}

func (w wiseReturnReconfDo) FindByPage(offset int, limit int) (result []*model.WiseReturnReconf, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseReturnReconfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseReturnReconfDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseReturnReconfDo) Delete(models ...*model.WiseReturnReconf) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseReturnReconfDo) withDO(do gen.Dao) *wiseReturnReconfDo {
	w.DO = *do.(*gen.DO)
	return w
}
