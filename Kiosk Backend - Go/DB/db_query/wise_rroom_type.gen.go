// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newWiseRroomType(db *gorm.DB, opts ...gen.DOOption) wiseRroomType {
	_wiseRroomType := wiseRroomType{}

	_wiseRroomType.wiseRroomTypeDo.UseDB(db, opts...)
	_wiseRroomType.wiseRroomTypeDo.UseModel(&model.WiseRroomType{})

	tableName := _wiseRroomType.wiseRroomTypeDo.TableName()
	_wiseRroomType.ALL = field.NewAsterisk(tableName)
	_wiseRroomType.RroomType = field.NewInt64(tableName, "rroom_type")
	_wiseRroomType.TypeName = field.NewString(tableName, "type_name")
	_wiseRroomType.UseYn = field.NewString(tableName, "use_yn")
	_wiseRroomType.UseDay = field.NewInt64(tableName, "use_day")
	_wiseRroomType.UseTerm = field.NewString(tableName, "use_term")
	_wiseRroomType.UseCount = field.NewString(tableName, "use_count")
	_wiseRroomType.PatLimit = field.NewString(tableName, "pat_limit")
	_wiseRroomType.BlockLimit = field.NewString(tableName, "block_limit")
	_wiseRroomType.Bigo = field.NewString(tableName, "bigo")

	_wiseRroomType.fillFieldMap()

	return _wiseRroomType
}

type wiseRroomType struct {
	wiseRroomTypeDo

	ALL        field.Asterisk
	RroomType  field.Int64
	TypeName   field.String
	UseYn      field.String
	UseDay     field.Int64
	UseTerm    field.String
	UseCount   field.String
	PatLimit   field.String
	BlockLimit field.String
	Bigo       field.String

	fieldMap map[string]field.Expr
}

func (w wiseRroomType) Table(newTableName string) *wiseRroomType {
	w.wiseRroomTypeDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wiseRroomType) As(alias string) *wiseRroomType {
	w.wiseRroomTypeDo.DO = *(w.wiseRroomTypeDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wiseRroomType) updateTableName(table string) *wiseRroomType {
	w.ALL = field.NewAsterisk(table)
	w.RroomType = field.NewInt64(table, "rroom_type")
	w.TypeName = field.NewString(table, "type_name")
	w.UseYn = field.NewString(table, "use_yn")
	w.UseDay = field.NewInt64(table, "use_day")
	w.UseTerm = field.NewString(table, "use_term")
	w.UseCount = field.NewString(table, "use_count")
	w.PatLimit = field.NewString(table, "pat_limit")
	w.BlockLimit = field.NewString(table, "block_limit")
	w.Bigo = field.NewString(table, "bigo")

	w.fillFieldMap()

	return w
}

func (w *wiseRroomType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wiseRroomType) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 9)
	w.fieldMap["rroom_type"] = w.RroomType
	w.fieldMap["type_name"] = w.TypeName
	w.fieldMap["use_yn"] = w.UseYn
	w.fieldMap["use_day"] = w.UseDay
	w.fieldMap["use_term"] = w.UseTerm
	w.fieldMap["use_count"] = w.UseCount
	w.fieldMap["pat_limit"] = w.PatLimit
	w.fieldMap["block_limit"] = w.BlockLimit
	w.fieldMap["bigo"] = w.Bigo
}

func (w wiseRroomType) clone(db *gorm.DB) wiseRroomType {
	w.wiseRroomTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wiseRroomType) replaceDB(db *gorm.DB) wiseRroomType {
	w.wiseRroomTypeDo.ReplaceDB(db)
	return w
}

type wiseRroomTypeDo struct{ gen.DO }

type IWiseRroomTypeDo interface {
	gen.SubQuery
	Debug() IWiseRroomTypeDo
	WithContext(ctx context.Context) IWiseRroomTypeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWiseRroomTypeDo
	WriteDB() IWiseRroomTypeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWiseRroomTypeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWiseRroomTypeDo
	Not(conds ...gen.Condition) IWiseRroomTypeDo
	Or(conds ...gen.Condition) IWiseRroomTypeDo
	Select(conds ...field.Expr) IWiseRroomTypeDo
	Where(conds ...gen.Condition) IWiseRroomTypeDo
	Order(conds ...field.Expr) IWiseRroomTypeDo
	Distinct(cols ...field.Expr) IWiseRroomTypeDo
	Omit(cols ...field.Expr) IWiseRroomTypeDo
	Join(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo
	Group(cols ...field.Expr) IWiseRroomTypeDo
	Having(conds ...gen.Condition) IWiseRroomTypeDo
	Limit(limit int) IWiseRroomTypeDo
	Offset(offset int) IWiseRroomTypeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomTypeDo
	Unscoped() IWiseRroomTypeDo
	Create(values ...*model.WiseRroomType) error
	CreateInBatches(values []*model.WiseRroomType, batchSize int) error
	Save(values ...*model.WiseRroomType) error
	First() (*model.WiseRroomType, error)
	Take() (*model.WiseRroomType, error)
	Last() (*model.WiseRroomType, error)
	Find() ([]*model.WiseRroomType, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroomType, err error)
	FindInBatches(result *[]*model.WiseRroomType, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WiseRroomType) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWiseRroomTypeDo
	Assign(attrs ...field.AssignExpr) IWiseRroomTypeDo
	Joins(fields ...field.RelationField) IWiseRroomTypeDo
	Preload(fields ...field.RelationField) IWiseRroomTypeDo
	FirstOrInit() (*model.WiseRroomType, error)
	FirstOrCreate() (*model.WiseRroomType, error)
	FindByPage(offset int, limit int) (result []*model.WiseRroomType, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWiseRroomTypeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (w wiseRroomTypeDo) Debug() IWiseRroomTypeDo {
	return w.withDO(w.DO.Debug())
}

func (w wiseRroomTypeDo) WithContext(ctx context.Context) IWiseRroomTypeDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wiseRroomTypeDo) ReadDB() IWiseRroomTypeDo {
	return w.Clauses(dbresolver.Read)
}

func (w wiseRroomTypeDo) WriteDB() IWiseRroomTypeDo {
	return w.Clauses(dbresolver.Write)
}

func (w wiseRroomTypeDo) Session(config *gorm.Session) IWiseRroomTypeDo {
	return w.withDO(w.DO.Session(config))
}

func (w wiseRroomTypeDo) Clauses(conds ...clause.Expression) IWiseRroomTypeDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wiseRroomTypeDo) Returning(value interface{}, columns ...string) IWiseRroomTypeDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wiseRroomTypeDo) Not(conds ...gen.Condition) IWiseRroomTypeDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wiseRroomTypeDo) Or(conds ...gen.Condition) IWiseRroomTypeDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wiseRroomTypeDo) Select(conds ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wiseRroomTypeDo) Where(conds ...gen.Condition) IWiseRroomTypeDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wiseRroomTypeDo) Order(conds ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wiseRroomTypeDo) Distinct(cols ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wiseRroomTypeDo) Omit(cols ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wiseRroomTypeDo) Join(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wiseRroomTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wiseRroomTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wiseRroomTypeDo) Group(cols ...field.Expr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wiseRroomTypeDo) Having(conds ...gen.Condition) IWiseRroomTypeDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wiseRroomTypeDo) Limit(limit int) IWiseRroomTypeDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wiseRroomTypeDo) Offset(offset int) IWiseRroomTypeDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wiseRroomTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWiseRroomTypeDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wiseRroomTypeDo) Unscoped() IWiseRroomTypeDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wiseRroomTypeDo) Create(values ...*model.WiseRroomType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wiseRroomTypeDo) CreateInBatches(values []*model.WiseRroomType, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wiseRroomTypeDo) Save(values ...*model.WiseRroomType) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wiseRroomTypeDo) First() (*model.WiseRroomType, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomType), nil
	}
}

func (w wiseRroomTypeDo) Take() (*model.WiseRroomType, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomType), nil
	}
}

func (w wiseRroomTypeDo) Last() (*model.WiseRroomType, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomType), nil
	}
}

func (w wiseRroomTypeDo) Find() ([]*model.WiseRroomType, error) {
	result, err := w.DO.Find()
	return result.([]*model.WiseRroomType), err
}

func (w wiseRroomTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WiseRroomType, err error) {
	buf := make([]*model.WiseRroomType, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wiseRroomTypeDo) FindInBatches(result *[]*model.WiseRroomType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wiseRroomTypeDo) Attrs(attrs ...field.AssignExpr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wiseRroomTypeDo) Assign(attrs ...field.AssignExpr) IWiseRroomTypeDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wiseRroomTypeDo) Joins(fields ...field.RelationField) IWiseRroomTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wiseRroomTypeDo) Preload(fields ...field.RelationField) IWiseRroomTypeDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wiseRroomTypeDo) FirstOrInit() (*model.WiseRroomType, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomType), nil
	}
}

func (w wiseRroomTypeDo) FirstOrCreate() (*model.WiseRroomType, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WiseRroomType), nil
	}
}

func (w wiseRroomTypeDo) FindByPage(offset int, limit int) (result []*model.WiseRroomType, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wiseRroomTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wiseRroomTypeDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wiseRroomTypeDo) Delete(models ...*model.WiseRroomType) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wiseRroomTypeDo) withDO(do gen.Dao) *wiseRroomTypeDo {
	w.DO = *do.(*gen.DO)
	return w
}
