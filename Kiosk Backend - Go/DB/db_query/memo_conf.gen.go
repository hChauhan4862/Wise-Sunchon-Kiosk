// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newMemoConf(db *gorm.DB, opts ...gen.DOOption) memoConf {
	_memoConf := memoConf{}

	_memoConf.memoConfDo.UseDB(db, opts...)
	_memoConf.memoConfDo.UseModel(&model.MemoConf{})

	tableName := _memoConf.memoConfDo.TableName()
	_memoConf.ALL = field.NewAsterisk(tableName)
	_memoConf.IPAddress = field.NewString(tableName, "ip_address")
	_memoConf.Location = field.NewString(tableName, "location")
	_memoConf.TimeInterval = field.NewInt64(tableName, "time_interval")
	_memoConf.AdminCnt = field.NewInt64(tableName, "admin_cnt")
	_memoConf.NoticeOpt = field.NewString(tableName, "notice_opt")

	_memoConf.fillFieldMap()

	return _memoConf
}

type memoConf struct {
	memoConfDo

	ALL          field.Asterisk
	IPAddress    field.String
	Location     field.String
	TimeInterval field.Int64
	AdminCnt     field.Int64
	NoticeOpt    field.String

	fieldMap map[string]field.Expr
}

func (m memoConf) Table(newTableName string) *memoConf {
	m.memoConfDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memoConf) As(alias string) *memoConf {
	m.memoConfDo.DO = *(m.memoConfDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memoConf) updateTableName(table string) *memoConf {
	m.ALL = field.NewAsterisk(table)
	m.IPAddress = field.NewString(table, "ip_address")
	m.Location = field.NewString(table, "location")
	m.TimeInterval = field.NewInt64(table, "time_interval")
	m.AdminCnt = field.NewInt64(table, "admin_cnt")
	m.NoticeOpt = field.NewString(table, "notice_opt")

	m.fillFieldMap()

	return m
}

func (m *memoConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memoConf) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["ip_address"] = m.IPAddress
	m.fieldMap["location"] = m.Location
	m.fieldMap["time_interval"] = m.TimeInterval
	m.fieldMap["admin_cnt"] = m.AdminCnt
	m.fieldMap["notice_opt"] = m.NoticeOpt
}

func (m memoConf) clone(db *gorm.DB) memoConf {
	m.memoConfDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memoConf) replaceDB(db *gorm.DB) memoConf {
	m.memoConfDo.ReplaceDB(db)
	return m
}

type memoConfDo struct{ gen.DO }

type IMemoConfDo interface {
	gen.SubQuery
	Debug() IMemoConfDo
	WithContext(ctx context.Context) IMemoConfDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMemoConfDo
	WriteDB() IMemoConfDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMemoConfDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMemoConfDo
	Not(conds ...gen.Condition) IMemoConfDo
	Or(conds ...gen.Condition) IMemoConfDo
	Select(conds ...field.Expr) IMemoConfDo
	Where(conds ...gen.Condition) IMemoConfDo
	Order(conds ...field.Expr) IMemoConfDo
	Distinct(cols ...field.Expr) IMemoConfDo
	Omit(cols ...field.Expr) IMemoConfDo
	Join(table schema.Tabler, on ...field.Expr) IMemoConfDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMemoConfDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMemoConfDo
	Group(cols ...field.Expr) IMemoConfDo
	Having(conds ...gen.Condition) IMemoConfDo
	Limit(limit int) IMemoConfDo
	Offset(offset int) IMemoConfDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMemoConfDo
	Unscoped() IMemoConfDo
	Create(values ...*model.MemoConf) error
	CreateInBatches(values []*model.MemoConf, batchSize int) error
	Save(values ...*model.MemoConf) error
	First() (*model.MemoConf, error)
	Take() (*model.MemoConf, error)
	Last() (*model.MemoConf, error)
	Find() ([]*model.MemoConf, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemoConf, err error)
	FindInBatches(result *[]*model.MemoConf, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MemoConf) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMemoConfDo
	Assign(attrs ...field.AssignExpr) IMemoConfDo
	Joins(fields ...field.RelationField) IMemoConfDo
	Preload(fields ...field.RelationField) IMemoConfDo
	FirstOrInit() (*model.MemoConf, error)
	FirstOrCreate() (*model.MemoConf, error)
	FindByPage(offset int, limit int) (result []*model.MemoConf, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMemoConfDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m memoConfDo) Debug() IMemoConfDo {
	return m.withDO(m.DO.Debug())
}

func (m memoConfDo) WithContext(ctx context.Context) IMemoConfDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memoConfDo) ReadDB() IMemoConfDo {
	return m.Clauses(dbresolver.Read)
}

func (m memoConfDo) WriteDB() IMemoConfDo {
	return m.Clauses(dbresolver.Write)
}

func (m memoConfDo) Session(config *gorm.Session) IMemoConfDo {
	return m.withDO(m.DO.Session(config))
}

func (m memoConfDo) Clauses(conds ...clause.Expression) IMemoConfDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memoConfDo) Returning(value interface{}, columns ...string) IMemoConfDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memoConfDo) Not(conds ...gen.Condition) IMemoConfDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memoConfDo) Or(conds ...gen.Condition) IMemoConfDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memoConfDo) Select(conds ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memoConfDo) Where(conds ...gen.Condition) IMemoConfDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memoConfDo) Order(conds ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memoConfDo) Distinct(cols ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memoConfDo) Omit(cols ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memoConfDo) Join(table schema.Tabler, on ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memoConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memoConfDo) RightJoin(table schema.Tabler, on ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memoConfDo) Group(cols ...field.Expr) IMemoConfDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memoConfDo) Having(conds ...gen.Condition) IMemoConfDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memoConfDo) Limit(limit int) IMemoConfDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memoConfDo) Offset(offset int) IMemoConfDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memoConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMemoConfDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memoConfDo) Unscoped() IMemoConfDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memoConfDo) Create(values ...*model.MemoConf) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memoConfDo) CreateInBatches(values []*model.MemoConf, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memoConfDo) Save(values ...*model.MemoConf) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memoConfDo) First() (*model.MemoConf, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoConf), nil
	}
}

func (m memoConfDo) Take() (*model.MemoConf, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoConf), nil
	}
}

func (m memoConfDo) Last() (*model.MemoConf, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoConf), nil
	}
}

func (m memoConfDo) Find() ([]*model.MemoConf, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemoConf), err
}

func (m memoConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemoConf, err error) {
	buf := make([]*model.MemoConf, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memoConfDo) FindInBatches(result *[]*model.MemoConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memoConfDo) Attrs(attrs ...field.AssignExpr) IMemoConfDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memoConfDo) Assign(attrs ...field.AssignExpr) IMemoConfDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memoConfDo) Joins(fields ...field.RelationField) IMemoConfDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memoConfDo) Preload(fields ...field.RelationField) IMemoConfDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memoConfDo) FirstOrInit() (*model.MemoConf, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoConf), nil
	}
}

func (m memoConfDo) FirstOrCreate() (*model.MemoConf, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoConf), nil
	}
}

func (m memoConfDo) FindByPage(offset int, limit int) (result []*model.MemoConf, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memoConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memoConfDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memoConfDo) Delete(models ...*model.MemoConf) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memoConfDo) withDO(do gen.Dao) *memoConfDo {
	m.DO = *do.(*gen.DO)
	return m
}
