// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_old_sectorcode(db *gorm.DB, opts ...gen.DOOption) hCV_old_sectorcode {
	_hCV_old_sectorcode := hCV_old_sectorcode{}

	_hCV_old_sectorcode.hCV_old_sectorcodeDo.UseDB(db, opts...)
	_hCV_old_sectorcode.hCV_old_sectorcodeDo.UseModel(&model.HCV_old_sectorcode{})

	tableName := _hCV_old_sectorcode.hCV_old_sectorcodeDo.TableName()
	_hCV_old_sectorcode.ALL = field.NewAsterisk(tableName)
	_hCV_old_sectorcode.Sectorno = field.NewInt64(tableName, "sectorno")
	_hCV_old_sectorcode.Name = field.NewString(tableName, "name")
	_hCV_old_sectorcode.EnName = field.NewString(tableName, "en_name")
	_hCV_old_sectorcode.Typeno = field.NewInt64(tableName, "typeno")
	_hCV_old_sectorcode.Roomno = field.NewInt64(tableName, "roomno")
	_hCV_old_sectorcode.Bookable = field.NewInt64(tableName, "bookable")
	_hCV_old_sectorcode.Mediabookable = field.NewInt64(tableName, "mediabookable")
	_hCV_old_sectorcode.Eqbookable = field.NewInt64(tableName, "eqbookable")
	_hCV_old_sectorcode.BookDayFrom = field.NewInt64(tableName, "book_day_from")
	_hCV_old_sectorcode.BookDayTo = field.NewInt64(tableName, "book_day_to")
	_hCV_old_sectorcode.UseApproval = field.NewInt64(tableName, "use_approval")
	_hCV_old_sectorcode.UserPos = field.NewString(tableName, "user_pos")
	_hCV_old_sectorcode.UserStatus = field.NewString(tableName, "user_status")
	_hCV_old_sectorcode.MobileBookable = field.NewInt64(tableName, "mobile_bookable")
	_hCV_old_sectorcode.MobileAssignable = field.NewInt64(tableName, "mobile_assignable")

	_hCV_old_sectorcode.fillFieldMap()

	return _hCV_old_sectorcode
}

type hCV_old_sectorcode struct {
	hCV_old_sectorcodeDo

	ALL              field.Asterisk
	Sectorno         field.Int64
	Name             field.String
	EnName           field.String
	Typeno           field.Int64
	Roomno           field.Int64
	Bookable         field.Int64
	Mediabookable    field.Int64
	Eqbookable       field.Int64
	BookDayFrom      field.Int64
	BookDayTo        field.Int64
	UseApproval      field.Int64
	UserPos          field.String
	UserStatus       field.String
	MobileBookable   field.Int64
	MobileAssignable field.Int64

	fieldMap map[string]field.Expr
}

func (h hCV_old_sectorcode) Table(newTableName string) *hCV_old_sectorcode {
	h.hCV_old_sectorcodeDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_old_sectorcode) As(alias string) *hCV_old_sectorcode {
	h.hCV_old_sectorcodeDo.DO = *(h.hCV_old_sectorcodeDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_old_sectorcode) updateTableName(table string) *hCV_old_sectorcode {
	h.ALL = field.NewAsterisk(table)
	h.Sectorno = field.NewInt64(table, "sectorno")
	h.Name = field.NewString(table, "name")
	h.EnName = field.NewString(table, "en_name")
	h.Typeno = field.NewInt64(table, "typeno")
	h.Roomno = field.NewInt64(table, "roomno")
	h.Bookable = field.NewInt64(table, "bookable")
	h.Mediabookable = field.NewInt64(table, "mediabookable")
	h.Eqbookable = field.NewInt64(table, "eqbookable")
	h.BookDayFrom = field.NewInt64(table, "book_day_from")
	h.BookDayTo = field.NewInt64(table, "book_day_to")
	h.UseApproval = field.NewInt64(table, "use_approval")
	h.UserPos = field.NewString(table, "user_pos")
	h.UserStatus = field.NewString(table, "user_status")
	h.MobileBookable = field.NewInt64(table, "mobile_bookable")
	h.MobileAssignable = field.NewInt64(table, "mobile_assignable")

	h.fillFieldMap()

	return h
}

func (h *hCV_old_sectorcode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_old_sectorcode) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 15)
	h.fieldMap["sectorno"] = h.Sectorno
	h.fieldMap["name"] = h.Name
	h.fieldMap["en_name"] = h.EnName
	h.fieldMap["typeno"] = h.Typeno
	h.fieldMap["roomno"] = h.Roomno
	h.fieldMap["bookable"] = h.Bookable
	h.fieldMap["mediabookable"] = h.Mediabookable
	h.fieldMap["eqbookable"] = h.Eqbookable
	h.fieldMap["book_day_from"] = h.BookDayFrom
	h.fieldMap["book_day_to"] = h.BookDayTo
	h.fieldMap["use_approval"] = h.UseApproval
	h.fieldMap["user_pos"] = h.UserPos
	h.fieldMap["user_status"] = h.UserStatus
	h.fieldMap["mobile_bookable"] = h.MobileBookable
	h.fieldMap["mobile_assignable"] = h.MobileAssignable
}

func (h hCV_old_sectorcode) clone(db *gorm.DB) hCV_old_sectorcode {
	h.hCV_old_sectorcodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_old_sectorcode) replaceDB(db *gorm.DB) hCV_old_sectorcode {
	h.hCV_old_sectorcodeDo.ReplaceDB(db)
	return h
}

type hCV_old_sectorcodeDo struct{ gen.DO }

type IHCV_old_sectorcodeDo interface {
	gen.SubQuery
	Debug() IHCV_old_sectorcodeDo
	WithContext(ctx context.Context) IHCV_old_sectorcodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_old_sectorcodeDo
	WriteDB() IHCV_old_sectorcodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_old_sectorcodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_old_sectorcodeDo
	Not(conds ...gen.Condition) IHCV_old_sectorcodeDo
	Or(conds ...gen.Condition) IHCV_old_sectorcodeDo
	Select(conds ...field.Expr) IHCV_old_sectorcodeDo
	Where(conds ...gen.Condition) IHCV_old_sectorcodeDo
	Order(conds ...field.Expr) IHCV_old_sectorcodeDo
	Distinct(cols ...field.Expr) IHCV_old_sectorcodeDo
	Omit(cols ...field.Expr) IHCV_old_sectorcodeDo
	Join(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo
	Group(cols ...field.Expr) IHCV_old_sectorcodeDo
	Having(conds ...gen.Condition) IHCV_old_sectorcodeDo
	Limit(limit int) IHCV_old_sectorcodeDo
	Offset(offset int) IHCV_old_sectorcodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_sectorcodeDo
	Unscoped() IHCV_old_sectorcodeDo
	Create(values ...*model.HCV_old_sectorcode) error
	CreateInBatches(values []*model.HCV_old_sectorcode, batchSize int) error
	Save(values ...*model.HCV_old_sectorcode) error
	First() (*model.HCV_old_sectorcode, error)
	Take() (*model.HCV_old_sectorcode, error)
	Last() (*model.HCV_old_sectorcode, error)
	Find() ([]*model.HCV_old_sectorcode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_sectorcode, err error)
	FindInBatches(result *[]*model.HCV_old_sectorcode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_old_sectorcode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_old_sectorcodeDo
	Assign(attrs ...field.AssignExpr) IHCV_old_sectorcodeDo
	Joins(fields ...field.RelationField) IHCV_old_sectorcodeDo
	Preload(fields ...field.RelationField) IHCV_old_sectorcodeDo
	FirstOrInit() (*model.HCV_old_sectorcode, error)
	FirstOrCreate() (*model.HCV_old_sectorcode, error)
	FindByPage(offset int, limit int) (result []*model.HCV_old_sectorcode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_old_sectorcodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_old_sectorcodeDo) Debug() IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Debug())
}

func (h hCV_old_sectorcodeDo) WithContext(ctx context.Context) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_old_sectorcodeDo) ReadDB() IHCV_old_sectorcodeDo {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_old_sectorcodeDo) WriteDB() IHCV_old_sectorcodeDo {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_old_sectorcodeDo) Session(config *gorm.Session) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_old_sectorcodeDo) Clauses(conds ...clause.Expression) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_old_sectorcodeDo) Returning(value interface{}, columns ...string) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_old_sectorcodeDo) Not(conds ...gen.Condition) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_old_sectorcodeDo) Or(conds ...gen.Condition) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_old_sectorcodeDo) Select(conds ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_old_sectorcodeDo) Where(conds ...gen.Condition) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_old_sectorcodeDo) Order(conds ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_old_sectorcodeDo) Distinct(cols ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_old_sectorcodeDo) Omit(cols ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_old_sectorcodeDo) Join(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_old_sectorcodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_old_sectorcodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_old_sectorcodeDo) Group(cols ...field.Expr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_old_sectorcodeDo) Having(conds ...gen.Condition) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_old_sectorcodeDo) Limit(limit int) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_old_sectorcodeDo) Offset(offset int) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_old_sectorcodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_old_sectorcodeDo) Unscoped() IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_old_sectorcodeDo) Create(values ...*model.HCV_old_sectorcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_old_sectorcodeDo) CreateInBatches(values []*model.HCV_old_sectorcode, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_old_sectorcodeDo) Save(values ...*model.HCV_old_sectorcode) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_old_sectorcodeDo) First() (*model.HCV_old_sectorcode, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_sectorcode), nil
	}
}

func (h hCV_old_sectorcodeDo) Take() (*model.HCV_old_sectorcode, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_sectorcode), nil
	}
}

func (h hCV_old_sectorcodeDo) Last() (*model.HCV_old_sectorcode, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_sectorcode), nil
	}
}

func (h hCV_old_sectorcodeDo) Find() ([]*model.HCV_old_sectorcode, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_old_sectorcode), err
}

func (h hCV_old_sectorcodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_old_sectorcode, err error) {
	buf := make([]*model.HCV_old_sectorcode, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_old_sectorcodeDo) FindInBatches(result *[]*model.HCV_old_sectorcode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_old_sectorcodeDo) Attrs(attrs ...field.AssignExpr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_old_sectorcodeDo) Assign(attrs ...field.AssignExpr) IHCV_old_sectorcodeDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_old_sectorcodeDo) Joins(fields ...field.RelationField) IHCV_old_sectorcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_old_sectorcodeDo) Preload(fields ...field.RelationField) IHCV_old_sectorcodeDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_old_sectorcodeDo) FirstOrInit() (*model.HCV_old_sectorcode, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_sectorcode), nil
	}
}

func (h hCV_old_sectorcodeDo) FirstOrCreate() (*model.HCV_old_sectorcode, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_old_sectorcode), nil
	}
}

func (h hCV_old_sectorcodeDo) FindByPage(offset int, limit int) (result []*model.HCV_old_sectorcode, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_old_sectorcodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_old_sectorcodeDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_old_sectorcodeDo) Delete(models ...*model.HCV_old_sectorcode) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_old_sectorcodeDo) withDO(do gen.Dao) *hCV_old_sectorcodeDo {
	h.DO = *do.(*gen.DO)
	return h
}
