// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newHCV_view_seat_sector2(db *gorm.DB, opts ...gen.DOOption) hCV_view_seat_sector2 {
	_hCV_view_seat_sector2 := hCV_view_seat_sector2{}

	_hCV_view_seat_sector2.hCV_view_seat_sector2Do.UseDB(db, opts...)
	_hCV_view_seat_sector2.hCV_view_seat_sector2Do.UseModel(&model.HCV_view_seat_sector2{})

	tableName := _hCV_view_seat_sector2.hCV_view_seat_sector2Do.TableName()
	_hCV_view_seat_sector2.ALL = field.NewAsterisk(tableName)
	_hCV_view_seat_sector2.Sectorno = field.NewInt64(tableName, "sectorno")
	_hCV_view_seat_sector2.Name = field.NewString(tableName, "name")
	_hCV_view_seat_sector2.EnName = field.NewString(tableName, "en_name")
	_hCV_view_seat_sector2.Typeno = field.NewInt64(tableName, "typeno")
	_hCV_view_seat_sector2.Roomno = field.NewInt64(tableName, "roomno")
	_hCV_view_seat_sector2.Floorno = field.NewInt64(tableName, "floorno")
	_hCV_view_seat_sector2.BookingYn = field.NewString(tableName, "booking_yn")
	_hCV_view_seat_sector2.AssignYn = field.NewString(tableName, "assign_yn")
	_hCV_view_seat_sector2.MobileBookingYn = field.NewString(tableName, "mobile_booking_yn")
	_hCV_view_seat_sector2.MobileAssignYn = field.NewString(tableName, "mobile_assign_yn")
	_hCV_view_seat_sector2.DayFrom = field.NewInt64(tableName, "day_from")
	_hCV_view_seat_sector2.DayTo = field.NewInt64(tableName, "day_to")
	_hCV_view_seat_sector2.USEAPPROVAL = field.NewInt64(tableName, "USE_APPROVAL")
	_hCV_view_seat_sector2.MEDIABOOKINGYN = field.NewString(tableName, "MEDIA_BOOKING_YN")
	_hCV_view_seat_sector2.EQUIPBOOKINGYN = field.NewString(tableName, "EQUIP_BOOKING_YN")
	_hCV_view_seat_sector2.SECTORIMAGE = field.NewString(tableName, "SECTOR_IMAGE")
	_hCV_view_seat_sector2.SECTORIMAGE2 = field.NewString(tableName, "SECTOR_IMAGE2")
	_hCV_view_seat_sector2.Opentime = field.NewString(tableName, "opentime")
	_hCV_view_seat_sector2.Closetime = field.NewString(tableName, "closetime")
	_hCV_view_seat_sector2.OperationMin = field.NewInt64(tableName, "operation_min")
	_hCV_view_seat_sector2.Floor = field.NewInt64(tableName, "floor")
	_hCV_view_seat_sector2.RoomName = field.NewString(tableName, "room_name")
	_hCV_view_seat_sector2.RoomEnName = field.NewString(tableName, "room_en_name")
	_hCV_view_seat_sector2.FloorName = field.NewString(tableName, "floor_name")
	_hCV_view_seat_sector2.FloorEnName = field.NewString(tableName, "floor_en_name")
	_hCV_view_seat_sector2.LibName = field.NewString(tableName, "lib_name")
	_hCV_view_seat_sector2.LibEnName = field.NewString(tableName, "lib_en_name")

	_hCV_view_seat_sector2.fillFieldMap()

	return _hCV_view_seat_sector2
}

type hCV_view_seat_sector2 struct {
	hCV_view_seat_sector2Do

	ALL             field.Asterisk
	Sectorno        field.Int64
	Name            field.String
	EnName          field.String
	Typeno          field.Int64
	Roomno          field.Int64
	Floorno         field.Int64
	BookingYn       field.String
	AssignYn        field.String
	MobileBookingYn field.String
	MobileAssignYn  field.String
	DayFrom         field.Int64
	DayTo           field.Int64
	USEAPPROVAL     field.Int64
	MEDIABOOKINGYN  field.String
	EQUIPBOOKINGYN  field.String
	SECTORIMAGE     field.String
	SECTORIMAGE2    field.String
	Opentime        field.String
	Closetime       field.String
	OperationMin    field.Int64
	Floor           field.Int64
	RoomName        field.String
	RoomEnName      field.String
	FloorName       field.String
	FloorEnName     field.String
	LibName         field.String
	LibEnName       field.String

	fieldMap map[string]field.Expr
}

func (h hCV_view_seat_sector2) Table(newTableName string) *hCV_view_seat_sector2 {
	h.hCV_view_seat_sector2Do.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hCV_view_seat_sector2) As(alias string) *hCV_view_seat_sector2 {
	h.hCV_view_seat_sector2Do.DO = *(h.hCV_view_seat_sector2Do.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hCV_view_seat_sector2) updateTableName(table string) *hCV_view_seat_sector2 {
	h.ALL = field.NewAsterisk(table)
	h.Sectorno = field.NewInt64(table, "sectorno")
	h.Name = field.NewString(table, "name")
	h.EnName = field.NewString(table, "en_name")
	h.Typeno = field.NewInt64(table, "typeno")
	h.Roomno = field.NewInt64(table, "roomno")
	h.Floorno = field.NewInt64(table, "floorno")
	h.BookingYn = field.NewString(table, "booking_yn")
	h.AssignYn = field.NewString(table, "assign_yn")
	h.MobileBookingYn = field.NewString(table, "mobile_booking_yn")
	h.MobileAssignYn = field.NewString(table, "mobile_assign_yn")
	h.DayFrom = field.NewInt64(table, "day_from")
	h.DayTo = field.NewInt64(table, "day_to")
	h.USEAPPROVAL = field.NewInt64(table, "USE_APPROVAL")
	h.MEDIABOOKINGYN = field.NewString(table, "MEDIA_BOOKING_YN")
	h.EQUIPBOOKINGYN = field.NewString(table, "EQUIP_BOOKING_YN")
	h.SECTORIMAGE = field.NewString(table, "SECTOR_IMAGE")
	h.SECTORIMAGE2 = field.NewString(table, "SECTOR_IMAGE2")
	h.Opentime = field.NewString(table, "opentime")
	h.Closetime = field.NewString(table, "closetime")
	h.OperationMin = field.NewInt64(table, "operation_min")
	h.Floor = field.NewInt64(table, "floor")
	h.RoomName = field.NewString(table, "room_name")
	h.RoomEnName = field.NewString(table, "room_en_name")
	h.FloorName = field.NewString(table, "floor_name")
	h.FloorEnName = field.NewString(table, "floor_en_name")
	h.LibName = field.NewString(table, "lib_name")
	h.LibEnName = field.NewString(table, "lib_en_name")

	h.fillFieldMap()

	return h
}

func (h *hCV_view_seat_sector2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hCV_view_seat_sector2) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 27)
	h.fieldMap["sectorno"] = h.Sectorno
	h.fieldMap["name"] = h.Name
	h.fieldMap["en_name"] = h.EnName
	h.fieldMap["typeno"] = h.Typeno
	h.fieldMap["roomno"] = h.Roomno
	h.fieldMap["floorno"] = h.Floorno
	h.fieldMap["booking_yn"] = h.BookingYn
	h.fieldMap["assign_yn"] = h.AssignYn
	h.fieldMap["mobile_booking_yn"] = h.MobileBookingYn
	h.fieldMap["mobile_assign_yn"] = h.MobileAssignYn
	h.fieldMap["day_from"] = h.DayFrom
	h.fieldMap["day_to"] = h.DayTo
	h.fieldMap["USE_APPROVAL"] = h.USEAPPROVAL
	h.fieldMap["MEDIA_BOOKING_YN"] = h.MEDIABOOKINGYN
	h.fieldMap["EQUIP_BOOKING_YN"] = h.EQUIPBOOKINGYN
	h.fieldMap["SECTOR_IMAGE"] = h.SECTORIMAGE
	h.fieldMap["SECTOR_IMAGE2"] = h.SECTORIMAGE2
	h.fieldMap["opentime"] = h.Opentime
	h.fieldMap["closetime"] = h.Closetime
	h.fieldMap["operation_min"] = h.OperationMin
	h.fieldMap["floor"] = h.Floor
	h.fieldMap["room_name"] = h.RoomName
	h.fieldMap["room_en_name"] = h.RoomEnName
	h.fieldMap["floor_name"] = h.FloorName
	h.fieldMap["floor_en_name"] = h.FloorEnName
	h.fieldMap["lib_name"] = h.LibName
	h.fieldMap["lib_en_name"] = h.LibEnName
}

func (h hCV_view_seat_sector2) clone(db *gorm.DB) hCV_view_seat_sector2 {
	h.hCV_view_seat_sector2Do.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hCV_view_seat_sector2) replaceDB(db *gorm.DB) hCV_view_seat_sector2 {
	h.hCV_view_seat_sector2Do.ReplaceDB(db)
	return h
}

type hCV_view_seat_sector2Do struct{ gen.DO }

type IHCV_view_seat_sector2Do interface {
	gen.SubQuery
	Debug() IHCV_view_seat_sector2Do
	WithContext(ctx context.Context) IHCV_view_seat_sector2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHCV_view_seat_sector2Do
	WriteDB() IHCV_view_seat_sector2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHCV_view_seat_sector2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHCV_view_seat_sector2Do
	Not(conds ...gen.Condition) IHCV_view_seat_sector2Do
	Or(conds ...gen.Condition) IHCV_view_seat_sector2Do
	Select(conds ...field.Expr) IHCV_view_seat_sector2Do
	Where(conds ...gen.Condition) IHCV_view_seat_sector2Do
	Order(conds ...field.Expr) IHCV_view_seat_sector2Do
	Distinct(cols ...field.Expr) IHCV_view_seat_sector2Do
	Omit(cols ...field.Expr) IHCV_view_seat_sector2Do
	Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do
	RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do
	Group(cols ...field.Expr) IHCV_view_seat_sector2Do
	Having(conds ...gen.Condition) IHCV_view_seat_sector2Do
	Limit(limit int) IHCV_view_seat_sector2Do
	Offset(offset int) IHCV_view_seat_sector2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_sector2Do
	Unscoped() IHCV_view_seat_sector2Do
	Create(values ...*model.HCV_view_seat_sector2) error
	CreateInBatches(values []*model.HCV_view_seat_sector2, batchSize int) error
	Save(values ...*model.HCV_view_seat_sector2) error
	First() (*model.HCV_view_seat_sector2, error)
	Take() (*model.HCV_view_seat_sector2, error)
	Last() (*model.HCV_view_seat_sector2, error)
	Find() ([]*model.HCV_view_seat_sector2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_sector2, err error)
	FindInBatches(result *[]*model.HCV_view_seat_sector2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HCV_view_seat_sector2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHCV_view_seat_sector2Do
	Assign(attrs ...field.AssignExpr) IHCV_view_seat_sector2Do
	Joins(fields ...field.RelationField) IHCV_view_seat_sector2Do
	Preload(fields ...field.RelationField) IHCV_view_seat_sector2Do
	FirstOrInit() (*model.HCV_view_seat_sector2, error)
	FirstOrCreate() (*model.HCV_view_seat_sector2, error)
	FindByPage(offset int, limit int) (result []*model.HCV_view_seat_sector2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHCV_view_seat_sector2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hCV_view_seat_sector2Do) Debug() IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Debug())
}

func (h hCV_view_seat_sector2Do) WithContext(ctx context.Context) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hCV_view_seat_sector2Do) ReadDB() IHCV_view_seat_sector2Do {
	return h.Clauses(dbresolver.Read)
}

func (h hCV_view_seat_sector2Do) WriteDB() IHCV_view_seat_sector2Do {
	return h.Clauses(dbresolver.Write)
}

func (h hCV_view_seat_sector2Do) Session(config *gorm.Session) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Session(config))
}

func (h hCV_view_seat_sector2Do) Clauses(conds ...clause.Expression) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hCV_view_seat_sector2Do) Returning(value interface{}, columns ...string) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hCV_view_seat_sector2Do) Not(conds ...gen.Condition) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Not(conds...))
}

func (h hCV_view_seat_sector2Do) Or(conds ...gen.Condition) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Or(conds...))
}

func (h hCV_view_seat_sector2Do) Select(conds ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Select(conds...))
}

func (h hCV_view_seat_sector2Do) Where(conds ...gen.Condition) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Where(conds...))
}

func (h hCV_view_seat_sector2Do) Order(conds ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Order(conds...))
}

func (h hCV_view_seat_sector2Do) Distinct(cols ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hCV_view_seat_sector2Do) Omit(cols ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hCV_view_seat_sector2Do) Join(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hCV_view_seat_sector2Do) LeftJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hCV_view_seat_sector2Do) RightJoin(table schema.Tabler, on ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hCV_view_seat_sector2Do) Group(cols ...field.Expr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Group(cols...))
}

func (h hCV_view_seat_sector2Do) Having(conds ...gen.Condition) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Having(conds...))
}

func (h hCV_view_seat_sector2Do) Limit(limit int) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Limit(limit))
}

func (h hCV_view_seat_sector2Do) Offset(offset int) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Offset(offset))
}

func (h hCV_view_seat_sector2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hCV_view_seat_sector2Do) Unscoped() IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Unscoped())
}

func (h hCV_view_seat_sector2Do) Create(values ...*model.HCV_view_seat_sector2) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hCV_view_seat_sector2Do) CreateInBatches(values []*model.HCV_view_seat_sector2, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hCV_view_seat_sector2Do) Save(values ...*model.HCV_view_seat_sector2) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hCV_view_seat_sector2Do) First() (*model.HCV_view_seat_sector2, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector2), nil
	}
}

func (h hCV_view_seat_sector2Do) Take() (*model.HCV_view_seat_sector2, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector2), nil
	}
}

func (h hCV_view_seat_sector2Do) Last() (*model.HCV_view_seat_sector2, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector2), nil
	}
}

func (h hCV_view_seat_sector2Do) Find() ([]*model.HCV_view_seat_sector2, error) {
	result, err := h.DO.Find()
	return result.([]*model.HCV_view_seat_sector2), err
}

func (h hCV_view_seat_sector2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HCV_view_seat_sector2, err error) {
	buf := make([]*model.HCV_view_seat_sector2, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hCV_view_seat_sector2Do) FindInBatches(result *[]*model.HCV_view_seat_sector2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hCV_view_seat_sector2Do) Attrs(attrs ...field.AssignExpr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hCV_view_seat_sector2Do) Assign(attrs ...field.AssignExpr) IHCV_view_seat_sector2Do {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hCV_view_seat_sector2Do) Joins(fields ...field.RelationField) IHCV_view_seat_sector2Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hCV_view_seat_sector2Do) Preload(fields ...field.RelationField) IHCV_view_seat_sector2Do {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hCV_view_seat_sector2Do) FirstOrInit() (*model.HCV_view_seat_sector2, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector2), nil
	}
}

func (h hCV_view_seat_sector2Do) FirstOrCreate() (*model.HCV_view_seat_sector2, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HCV_view_seat_sector2), nil
	}
}

func (h hCV_view_seat_sector2Do) FindByPage(offset int, limit int) (result []*model.HCV_view_seat_sector2, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hCV_view_seat_sector2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hCV_view_seat_sector2Do) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hCV_view_seat_sector2Do) Delete(models ...*model.HCV_view_seat_sector2) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hCV_view_seat_sector2Do) withDO(do gen.Dao) *hCV_view_seat_sector2Do {
	h.DO = *do.(*gen.DO)
	return h
}
