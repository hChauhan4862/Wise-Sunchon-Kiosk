// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatRoom(db *gorm.DB, opts ...gen.DOOption) seatRoom {
	_seatRoom := seatRoom{}

	_seatRoom.seatRoomDo.UseDB(db, opts...)
	_seatRoom.seatRoomDo.UseModel(&model.SeatRoom{})

	tableName := _seatRoom.seatRoomDo.TableName()
	_seatRoom.ALL = field.NewAsterisk(tableName)
	_seatRoom.RoomNo = field.NewInt64(tableName, "room_no")
	_seatRoom.RoomName = field.NewString(tableName, "room_name")
	_seatRoom.SeatNoS = field.NewInt64(tableName, "seat_no_s")
	_seatRoom.SeatNoE = field.NewInt64(tableName, "seat_no_e")
	_seatRoom.SeatNoCnt = field.NewInt64(tableName, "seat_no_cnt")
	_seatRoom.ColorUse = field.NewInt64(tableName, "color_use")
	_seatRoom.ColorNuse = field.NewInt64(tableName, "color_nuse")
	_seatRoom.TimeStart = field.NewString(tableName, "time_start")
	_seatRoom.TimeEnd = field.NewString(tableName, "time_end")
	_seatRoom.UseHour = field.NewInt64(tableName, "use_hour")
	_seatRoom.ContMin = field.NewInt64(tableName, "cont_min")
	_seatRoom.ContCnt = field.NewInt64(tableName, "cont_cnt")
	_seatRoom.SeatFix = field.NewString(tableName, "seat_fix")
	_seatRoom.LimitPat = field.NewString(tableName, "limit_pat")
	_seatRoom.LimitPatGu = field.NewString(tableName, "limit_pat_gu")
	_seatRoom.LimitDept = field.NewString(tableName, "limit_dept")
	_seatRoom.LimitDeptGu = field.NewString(tableName, "limit_dept_gu")
	_seatRoom.LimitStat = field.NewString(tableName, "limit_stat")
	_seatRoom.LimitStatGu = field.NewString(tableName, "limit_stat_gu")
	_seatRoom.RoomBigo = field.NewString(tableName, "room_bigo")
	_seatRoom.ColorUsem = field.NewInt64(tableName, "color_usem")
	_seatRoom.ColorUsef = field.NewInt64(tableName, "color_usef")
	_seatRoom.LimitYearS = field.NewInt64(tableName, "limit_year_s")
	_seatRoom.LimitYearE = field.NewInt64(tableName, "limit_year_e")
	_seatRoom.LimitSeatpat = field.NewString(tableName, "limit_seatpat")
	_seatRoom.LimitSeatpatGu = field.NewInt64(tableName, "limit_seatpat_gu")
	_seatRoom.LimitPatcnt = field.NewString(tableName, "limit_patcnt")
	_seatRoom.LimitPatcntGu = field.NewInt64(tableName, "limit_patcnt_gu")
	_seatRoom.LimitGenderm = field.NewString(tableName, "limit_genderm")
	_seatRoom.LimitGendermGu = field.NewInt64(tableName, "limit_genderm_gu")
	_seatRoom.LimitGenderf = field.NewString(tableName, "limit_genderf")
	_seatRoom.LimitGenderfGu = field.NewInt64(tableName, "limit_genderf_gu")

	_seatRoom.fillFieldMap()

	return _seatRoom
}

type seatRoom struct {
	seatRoomDo

	ALL            field.Asterisk
	RoomNo         field.Int64
	RoomName       field.String
	SeatNoS        field.Int64
	SeatNoE        field.Int64
	SeatNoCnt      field.Int64
	ColorUse       field.Int64
	ColorNuse      field.Int64
	TimeStart      field.String
	TimeEnd        field.String
	UseHour        field.Int64
	ContMin        field.Int64
	ContCnt        field.Int64
	SeatFix        field.String
	LimitPat       field.String
	LimitPatGu     field.String
	LimitDept      field.String
	LimitDeptGu    field.String
	LimitStat      field.String
	LimitStatGu    field.String
	RoomBigo       field.String
	ColorUsem      field.Int64
	ColorUsef      field.Int64
	LimitYearS     field.Int64
	LimitYearE     field.Int64
	LimitSeatpat   field.String
	LimitSeatpatGu field.Int64
	LimitPatcnt    field.String
	LimitPatcntGu  field.Int64
	LimitGenderm   field.String
	LimitGendermGu field.Int64
	LimitGenderf   field.String
	LimitGenderfGu field.Int64

	fieldMap map[string]field.Expr
}

func (s seatRoom) Table(newTableName string) *seatRoom {
	s.seatRoomDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatRoom) As(alias string) *seatRoom {
	s.seatRoomDo.DO = *(s.seatRoomDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatRoom) updateTableName(table string) *seatRoom {
	s.ALL = field.NewAsterisk(table)
	s.RoomNo = field.NewInt64(table, "room_no")
	s.RoomName = field.NewString(table, "room_name")
	s.SeatNoS = field.NewInt64(table, "seat_no_s")
	s.SeatNoE = field.NewInt64(table, "seat_no_e")
	s.SeatNoCnt = field.NewInt64(table, "seat_no_cnt")
	s.ColorUse = field.NewInt64(table, "color_use")
	s.ColorNuse = field.NewInt64(table, "color_nuse")
	s.TimeStart = field.NewString(table, "time_start")
	s.TimeEnd = field.NewString(table, "time_end")
	s.UseHour = field.NewInt64(table, "use_hour")
	s.ContMin = field.NewInt64(table, "cont_min")
	s.ContCnt = field.NewInt64(table, "cont_cnt")
	s.SeatFix = field.NewString(table, "seat_fix")
	s.LimitPat = field.NewString(table, "limit_pat")
	s.LimitPatGu = field.NewString(table, "limit_pat_gu")
	s.LimitDept = field.NewString(table, "limit_dept")
	s.LimitDeptGu = field.NewString(table, "limit_dept_gu")
	s.LimitStat = field.NewString(table, "limit_stat")
	s.LimitStatGu = field.NewString(table, "limit_stat_gu")
	s.RoomBigo = field.NewString(table, "room_bigo")
	s.ColorUsem = field.NewInt64(table, "color_usem")
	s.ColorUsef = field.NewInt64(table, "color_usef")
	s.LimitYearS = field.NewInt64(table, "limit_year_s")
	s.LimitYearE = field.NewInt64(table, "limit_year_e")
	s.LimitSeatpat = field.NewString(table, "limit_seatpat")
	s.LimitSeatpatGu = field.NewInt64(table, "limit_seatpat_gu")
	s.LimitPatcnt = field.NewString(table, "limit_patcnt")
	s.LimitPatcntGu = field.NewInt64(table, "limit_patcnt_gu")
	s.LimitGenderm = field.NewString(table, "limit_genderm")
	s.LimitGendermGu = field.NewInt64(table, "limit_genderm_gu")
	s.LimitGenderf = field.NewString(table, "limit_genderf")
	s.LimitGenderfGu = field.NewInt64(table, "limit_genderf_gu")

	s.fillFieldMap()

	return s
}

func (s *seatRoom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatRoom) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 32)
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["room_name"] = s.RoomName
	s.fieldMap["seat_no_s"] = s.SeatNoS
	s.fieldMap["seat_no_e"] = s.SeatNoE
	s.fieldMap["seat_no_cnt"] = s.SeatNoCnt
	s.fieldMap["color_use"] = s.ColorUse
	s.fieldMap["color_nuse"] = s.ColorNuse
	s.fieldMap["time_start"] = s.TimeStart
	s.fieldMap["time_end"] = s.TimeEnd
	s.fieldMap["use_hour"] = s.UseHour
	s.fieldMap["cont_min"] = s.ContMin
	s.fieldMap["cont_cnt"] = s.ContCnt
	s.fieldMap["seat_fix"] = s.SeatFix
	s.fieldMap["limit_pat"] = s.LimitPat
	s.fieldMap["limit_pat_gu"] = s.LimitPatGu
	s.fieldMap["limit_dept"] = s.LimitDept
	s.fieldMap["limit_dept_gu"] = s.LimitDeptGu
	s.fieldMap["limit_stat"] = s.LimitStat
	s.fieldMap["limit_stat_gu"] = s.LimitStatGu
	s.fieldMap["room_bigo"] = s.RoomBigo
	s.fieldMap["color_usem"] = s.ColorUsem
	s.fieldMap["color_usef"] = s.ColorUsef
	s.fieldMap["limit_year_s"] = s.LimitYearS
	s.fieldMap["limit_year_e"] = s.LimitYearE
	s.fieldMap["limit_seatpat"] = s.LimitSeatpat
	s.fieldMap["limit_seatpat_gu"] = s.LimitSeatpatGu
	s.fieldMap["limit_patcnt"] = s.LimitPatcnt
	s.fieldMap["limit_patcnt_gu"] = s.LimitPatcntGu
	s.fieldMap["limit_genderm"] = s.LimitGenderm
	s.fieldMap["limit_genderm_gu"] = s.LimitGendermGu
	s.fieldMap["limit_genderf"] = s.LimitGenderf
	s.fieldMap["limit_genderf_gu"] = s.LimitGenderfGu
}

func (s seatRoom) clone(db *gorm.DB) seatRoom {
	s.seatRoomDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatRoom) replaceDB(db *gorm.DB) seatRoom {
	s.seatRoomDo.ReplaceDB(db)
	return s
}

type seatRoomDo struct{ gen.DO }

type ISeatRoomDo interface {
	gen.SubQuery
	Debug() ISeatRoomDo
	WithContext(ctx context.Context) ISeatRoomDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatRoomDo
	WriteDB() ISeatRoomDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatRoomDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatRoomDo
	Not(conds ...gen.Condition) ISeatRoomDo
	Or(conds ...gen.Condition) ISeatRoomDo
	Select(conds ...field.Expr) ISeatRoomDo
	Where(conds ...gen.Condition) ISeatRoomDo
	Order(conds ...field.Expr) ISeatRoomDo
	Distinct(cols ...field.Expr) ISeatRoomDo
	Omit(cols ...field.Expr) ISeatRoomDo
	Join(table schema.Tabler, on ...field.Expr) ISeatRoomDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatRoomDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatRoomDo
	Group(cols ...field.Expr) ISeatRoomDo
	Having(conds ...gen.Condition) ISeatRoomDo
	Limit(limit int) ISeatRoomDo
	Offset(offset int) ISeatRoomDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatRoomDo
	Unscoped() ISeatRoomDo
	Create(values ...*model.SeatRoom) error
	CreateInBatches(values []*model.SeatRoom, batchSize int) error
	Save(values ...*model.SeatRoom) error
	First() (*model.SeatRoom, error)
	Take() (*model.SeatRoom, error)
	Last() (*model.SeatRoom, error)
	Find() ([]*model.SeatRoom, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatRoom, err error)
	FindInBatches(result *[]*model.SeatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatRoom) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatRoomDo
	Assign(attrs ...field.AssignExpr) ISeatRoomDo
	Joins(fields ...field.RelationField) ISeatRoomDo
	Preload(fields ...field.RelationField) ISeatRoomDo
	FirstOrInit() (*model.SeatRoom, error)
	FirstOrCreate() (*model.SeatRoom, error)
	FindByPage(offset int, limit int) (result []*model.SeatRoom, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatRoomDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatRoomDo) Debug() ISeatRoomDo {
	return s.withDO(s.DO.Debug())
}

func (s seatRoomDo) WithContext(ctx context.Context) ISeatRoomDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatRoomDo) ReadDB() ISeatRoomDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatRoomDo) WriteDB() ISeatRoomDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatRoomDo) Session(config *gorm.Session) ISeatRoomDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatRoomDo) Clauses(conds ...clause.Expression) ISeatRoomDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatRoomDo) Returning(value interface{}, columns ...string) ISeatRoomDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatRoomDo) Not(conds ...gen.Condition) ISeatRoomDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatRoomDo) Or(conds ...gen.Condition) ISeatRoomDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatRoomDo) Select(conds ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatRoomDo) Where(conds ...gen.Condition) ISeatRoomDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatRoomDo) Order(conds ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatRoomDo) Distinct(cols ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatRoomDo) Omit(cols ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatRoomDo) Join(table schema.Tabler, on ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatRoomDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatRoomDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatRoomDo) Group(cols ...field.Expr) ISeatRoomDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatRoomDo) Having(conds ...gen.Condition) ISeatRoomDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatRoomDo) Limit(limit int) ISeatRoomDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatRoomDo) Offset(offset int) ISeatRoomDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatRoomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatRoomDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatRoomDo) Unscoped() ISeatRoomDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatRoomDo) Create(values ...*model.SeatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatRoomDo) CreateInBatches(values []*model.SeatRoom, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatRoomDo) Save(values ...*model.SeatRoom) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatRoomDo) First() (*model.SeatRoom, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatRoom), nil
	}
}

func (s seatRoomDo) Take() (*model.SeatRoom, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatRoom), nil
	}
}

func (s seatRoomDo) Last() (*model.SeatRoom, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatRoom), nil
	}
}

func (s seatRoomDo) Find() ([]*model.SeatRoom, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatRoom), err
}

func (s seatRoomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatRoom, err error) {
	buf := make([]*model.SeatRoom, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatRoomDo) FindInBatches(result *[]*model.SeatRoom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatRoomDo) Attrs(attrs ...field.AssignExpr) ISeatRoomDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatRoomDo) Assign(attrs ...field.AssignExpr) ISeatRoomDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatRoomDo) Joins(fields ...field.RelationField) ISeatRoomDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatRoomDo) Preload(fields ...field.RelationField) ISeatRoomDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatRoomDo) FirstOrInit() (*model.SeatRoom, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatRoom), nil
	}
}

func (s seatRoomDo) FirstOrCreate() (*model.SeatRoom, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatRoom), nil
	}
}

func (s seatRoomDo) FindByPage(offset int, limit int) (result []*model.SeatRoom, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatRoomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatRoomDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatRoomDo) Delete(models ...*model.SeatRoom) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatRoomDo) withDO(do gen.Dao) *seatRoomDo {
	s.DO = *do.(*gen.DO)
	return s
}
