// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatGrbookingPurpose(db *gorm.DB, opts ...gen.DOOption) seatGrbookingPurpose {
	_seatGrbookingPurpose := seatGrbookingPurpose{}

	_seatGrbookingPurpose.seatGrbookingPurposeDo.UseDB(db, opts...)
	_seatGrbookingPurpose.seatGrbookingPurposeDo.UseModel(&model.SeatGrbookingPurpose{})

	tableName := _seatGrbookingPurpose.seatGrbookingPurposeDo.TableName()
	_seatGrbookingPurpose.ALL = field.NewAsterisk(tableName)
	_seatGrbookingPurpose.ID = field.NewInt64(tableName, "ID")
	_seatGrbookingPurpose.CAUSE = field.NewString(tableName, "CAUSE")
	_seatGrbookingPurpose.ENCAUSE = field.NewString(tableName, "EN_CAUSE")
	_seatGrbookingPurpose.ISDELETE = field.NewInt64(tableName, "ISDELETE")

	_seatGrbookingPurpose.fillFieldMap()

	return _seatGrbookingPurpose
}

type seatGrbookingPurpose struct {
	seatGrbookingPurposeDo

	ALL      field.Asterisk
	ID       field.Int64
	CAUSE    field.String
	ENCAUSE  field.String
	ISDELETE field.Int64

	fieldMap map[string]field.Expr
}

func (s seatGrbookingPurpose) Table(newTableName string) *seatGrbookingPurpose {
	s.seatGrbookingPurposeDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatGrbookingPurpose) As(alias string) *seatGrbookingPurpose {
	s.seatGrbookingPurposeDo.DO = *(s.seatGrbookingPurposeDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatGrbookingPurpose) updateTableName(table string) *seatGrbookingPurpose {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "ID")
	s.CAUSE = field.NewString(table, "CAUSE")
	s.ENCAUSE = field.NewString(table, "EN_CAUSE")
	s.ISDELETE = field.NewInt64(table, "ISDELETE")

	s.fillFieldMap()

	return s
}

func (s *seatGrbookingPurpose) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatGrbookingPurpose) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["ID"] = s.ID
	s.fieldMap["CAUSE"] = s.CAUSE
	s.fieldMap["EN_CAUSE"] = s.ENCAUSE
	s.fieldMap["ISDELETE"] = s.ISDELETE
}

func (s seatGrbookingPurpose) clone(db *gorm.DB) seatGrbookingPurpose {
	s.seatGrbookingPurposeDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatGrbookingPurpose) replaceDB(db *gorm.DB) seatGrbookingPurpose {
	s.seatGrbookingPurposeDo.ReplaceDB(db)
	return s
}

type seatGrbookingPurposeDo struct{ gen.DO }

type ISeatGrbookingPurposeDo interface {
	gen.SubQuery
	Debug() ISeatGrbookingPurposeDo
	WithContext(ctx context.Context) ISeatGrbookingPurposeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatGrbookingPurposeDo
	WriteDB() ISeatGrbookingPurposeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatGrbookingPurposeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatGrbookingPurposeDo
	Not(conds ...gen.Condition) ISeatGrbookingPurposeDo
	Or(conds ...gen.Condition) ISeatGrbookingPurposeDo
	Select(conds ...field.Expr) ISeatGrbookingPurposeDo
	Where(conds ...gen.Condition) ISeatGrbookingPurposeDo
	Order(conds ...field.Expr) ISeatGrbookingPurposeDo
	Distinct(cols ...field.Expr) ISeatGrbookingPurposeDo
	Omit(cols ...field.Expr) ISeatGrbookingPurposeDo
	Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo
	Group(cols ...field.Expr) ISeatGrbookingPurposeDo
	Having(conds ...gen.Condition) ISeatGrbookingPurposeDo
	Limit(limit int) ISeatGrbookingPurposeDo
	Offset(offset int) ISeatGrbookingPurposeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingPurposeDo
	Unscoped() ISeatGrbookingPurposeDo
	Create(values ...*model.SeatGrbookingPurpose) error
	CreateInBatches(values []*model.SeatGrbookingPurpose, batchSize int) error
	Save(values ...*model.SeatGrbookingPurpose) error
	First() (*model.SeatGrbookingPurpose, error)
	Take() (*model.SeatGrbookingPurpose, error)
	Last() (*model.SeatGrbookingPurpose, error)
	Find() ([]*model.SeatGrbookingPurpose, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbookingPurpose, err error)
	FindInBatches(result *[]*model.SeatGrbookingPurpose, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatGrbookingPurpose) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatGrbookingPurposeDo
	Assign(attrs ...field.AssignExpr) ISeatGrbookingPurposeDo
	Joins(fields ...field.RelationField) ISeatGrbookingPurposeDo
	Preload(fields ...field.RelationField) ISeatGrbookingPurposeDo
	FirstOrInit() (*model.SeatGrbookingPurpose, error)
	FirstOrCreate() (*model.SeatGrbookingPurpose, error)
	FindByPage(offset int, limit int) (result []*model.SeatGrbookingPurpose, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatGrbookingPurposeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatGrbookingPurposeDo) Debug() ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Debug())
}

func (s seatGrbookingPurposeDo) WithContext(ctx context.Context) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatGrbookingPurposeDo) ReadDB() ISeatGrbookingPurposeDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatGrbookingPurposeDo) WriteDB() ISeatGrbookingPurposeDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatGrbookingPurposeDo) Session(config *gorm.Session) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatGrbookingPurposeDo) Clauses(conds ...clause.Expression) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatGrbookingPurposeDo) Returning(value interface{}, columns ...string) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatGrbookingPurposeDo) Not(conds ...gen.Condition) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatGrbookingPurposeDo) Or(conds ...gen.Condition) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatGrbookingPurposeDo) Select(conds ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatGrbookingPurposeDo) Where(conds ...gen.Condition) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatGrbookingPurposeDo) Order(conds ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatGrbookingPurposeDo) Distinct(cols ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatGrbookingPurposeDo) Omit(cols ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatGrbookingPurposeDo) Join(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatGrbookingPurposeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatGrbookingPurposeDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatGrbookingPurposeDo) Group(cols ...field.Expr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatGrbookingPurposeDo) Having(conds ...gen.Condition) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatGrbookingPurposeDo) Limit(limit int) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatGrbookingPurposeDo) Offset(offset int) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatGrbookingPurposeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatGrbookingPurposeDo) Unscoped() ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatGrbookingPurposeDo) Create(values ...*model.SeatGrbookingPurpose) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatGrbookingPurposeDo) CreateInBatches(values []*model.SeatGrbookingPurpose, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatGrbookingPurposeDo) Save(values ...*model.SeatGrbookingPurpose) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatGrbookingPurposeDo) First() (*model.SeatGrbookingPurpose, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingPurpose), nil
	}
}

func (s seatGrbookingPurposeDo) Take() (*model.SeatGrbookingPurpose, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingPurpose), nil
	}
}

func (s seatGrbookingPurposeDo) Last() (*model.SeatGrbookingPurpose, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingPurpose), nil
	}
}

func (s seatGrbookingPurposeDo) Find() ([]*model.SeatGrbookingPurpose, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatGrbookingPurpose), err
}

func (s seatGrbookingPurposeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatGrbookingPurpose, err error) {
	buf := make([]*model.SeatGrbookingPurpose, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatGrbookingPurposeDo) FindInBatches(result *[]*model.SeatGrbookingPurpose, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatGrbookingPurposeDo) Attrs(attrs ...field.AssignExpr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatGrbookingPurposeDo) Assign(attrs ...field.AssignExpr) ISeatGrbookingPurposeDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatGrbookingPurposeDo) Joins(fields ...field.RelationField) ISeatGrbookingPurposeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatGrbookingPurposeDo) Preload(fields ...field.RelationField) ISeatGrbookingPurposeDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatGrbookingPurposeDo) FirstOrInit() (*model.SeatGrbookingPurpose, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingPurpose), nil
	}
}

func (s seatGrbookingPurposeDo) FirstOrCreate() (*model.SeatGrbookingPurpose, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatGrbookingPurpose), nil
	}
}

func (s seatGrbookingPurposeDo) FindByPage(offset int, limit int) (result []*model.SeatGrbookingPurpose, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatGrbookingPurposeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatGrbookingPurposeDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatGrbookingPurposeDo) Delete(models ...*model.SeatGrbookingPurpose) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatGrbookingPurposeDo) withDO(do gen.Dao) *seatGrbookingPurposeDo {
	s.DO = *do.(*gen.DO)
	return s
}
