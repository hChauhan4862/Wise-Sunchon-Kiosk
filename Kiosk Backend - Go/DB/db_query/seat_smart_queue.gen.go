// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db_query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"WISE_SOFTWARE/DB/model"
)

func newSeatSmartQueue(db *gorm.DB, opts ...gen.DOOption) seatSmartQueue {
	_seatSmartQueue := seatSmartQueue{}

	_seatSmartQueue.seatSmartQueueDo.UseDB(db, opts...)
	_seatSmartQueue.seatSmartQueueDo.UseModel(&model.SeatSmartQueue{})

	tableName := _seatSmartQueue.seatSmartQueueDo.TableName()
	_seatSmartQueue.ALL = field.NewAsterisk(tableName)
	_seatSmartQueue.InsDate = field.NewString(tableName, "ins_date")
	_seatSmartQueue.RoomNo = field.NewInt64(tableName, "room_no")
	_seatSmartQueue.SeatNo = field.NewInt64(tableName, "seat_no")
	_seatSmartQueue.CmdType = field.NewString(tableName, "cmd_type")
	_seatSmartQueue.SetCmd = field.NewString(tableName, "set_cmd")
	_seatSmartQueue.SetDate = field.NewString(tableName, "set_date")
	_seatSmartQueue.CheckDate = field.NewString(tableName, "check_date")

	_seatSmartQueue.fillFieldMap()

	return _seatSmartQueue
}

type seatSmartQueue struct {
	seatSmartQueueDo

	ALL       field.Asterisk
	InsDate   field.String
	RoomNo    field.Int64
	SeatNo    field.Int64
	CmdType   field.String
	SetCmd    field.String
	SetDate   field.String
	CheckDate field.String

	fieldMap map[string]field.Expr
}

func (s seatSmartQueue) Table(newTableName string) *seatSmartQueue {
	s.seatSmartQueueDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seatSmartQueue) As(alias string) *seatSmartQueue {
	s.seatSmartQueueDo.DO = *(s.seatSmartQueueDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seatSmartQueue) updateTableName(table string) *seatSmartQueue {
	s.ALL = field.NewAsterisk(table)
	s.InsDate = field.NewString(table, "ins_date")
	s.RoomNo = field.NewInt64(table, "room_no")
	s.SeatNo = field.NewInt64(table, "seat_no")
	s.CmdType = field.NewString(table, "cmd_type")
	s.SetCmd = field.NewString(table, "set_cmd")
	s.SetDate = field.NewString(table, "set_date")
	s.CheckDate = field.NewString(table, "check_date")

	s.fillFieldMap()

	return s
}

func (s *seatSmartQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seatSmartQueue) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["ins_date"] = s.InsDate
	s.fieldMap["room_no"] = s.RoomNo
	s.fieldMap["seat_no"] = s.SeatNo
	s.fieldMap["cmd_type"] = s.CmdType
	s.fieldMap["set_cmd"] = s.SetCmd
	s.fieldMap["set_date"] = s.SetDate
	s.fieldMap["check_date"] = s.CheckDate
}

func (s seatSmartQueue) clone(db *gorm.DB) seatSmartQueue {
	s.seatSmartQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seatSmartQueue) replaceDB(db *gorm.DB) seatSmartQueue {
	s.seatSmartQueueDo.ReplaceDB(db)
	return s
}

type seatSmartQueueDo struct{ gen.DO }

type ISeatSmartQueueDo interface {
	gen.SubQuery
	Debug() ISeatSmartQueueDo
	WithContext(ctx context.Context) ISeatSmartQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeatSmartQueueDo
	WriteDB() ISeatSmartQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeatSmartQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeatSmartQueueDo
	Not(conds ...gen.Condition) ISeatSmartQueueDo
	Or(conds ...gen.Condition) ISeatSmartQueueDo
	Select(conds ...field.Expr) ISeatSmartQueueDo
	Where(conds ...gen.Condition) ISeatSmartQueueDo
	Order(conds ...field.Expr) ISeatSmartQueueDo
	Distinct(cols ...field.Expr) ISeatSmartQueueDo
	Omit(cols ...field.Expr) ISeatSmartQueueDo
	Join(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo
	Group(cols ...field.Expr) ISeatSmartQueueDo
	Having(conds ...gen.Condition) ISeatSmartQueueDo
	Limit(limit int) ISeatSmartQueueDo
	Offset(offset int) ISeatSmartQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSmartQueueDo
	Unscoped() ISeatSmartQueueDo
	Create(values ...*model.SeatSmartQueue) error
	CreateInBatches(values []*model.SeatSmartQueue, batchSize int) error
	Save(values ...*model.SeatSmartQueue) error
	First() (*model.SeatSmartQueue, error)
	Take() (*model.SeatSmartQueue, error)
	Last() (*model.SeatSmartQueue, error)
	Find() ([]*model.SeatSmartQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSmartQueue, err error)
	FindInBatches(result *[]*model.SeatSmartQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeatSmartQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeatSmartQueueDo
	Assign(attrs ...field.AssignExpr) ISeatSmartQueueDo
	Joins(fields ...field.RelationField) ISeatSmartQueueDo
	Preload(fields ...field.RelationField) ISeatSmartQueueDo
	FirstOrInit() (*model.SeatSmartQueue, error)
	FirstOrCreate() (*model.SeatSmartQueue, error)
	FindByPage(offset int, limit int) (result []*model.SeatSmartQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeatSmartQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seatSmartQueueDo) Debug() ISeatSmartQueueDo {
	return s.withDO(s.DO.Debug())
}

func (s seatSmartQueueDo) WithContext(ctx context.Context) ISeatSmartQueueDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seatSmartQueueDo) ReadDB() ISeatSmartQueueDo {
	return s.Clauses(dbresolver.Read)
}

func (s seatSmartQueueDo) WriteDB() ISeatSmartQueueDo {
	return s.Clauses(dbresolver.Write)
}

func (s seatSmartQueueDo) Session(config *gorm.Session) ISeatSmartQueueDo {
	return s.withDO(s.DO.Session(config))
}

func (s seatSmartQueueDo) Clauses(conds ...clause.Expression) ISeatSmartQueueDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seatSmartQueueDo) Returning(value interface{}, columns ...string) ISeatSmartQueueDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seatSmartQueueDo) Not(conds ...gen.Condition) ISeatSmartQueueDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seatSmartQueueDo) Or(conds ...gen.Condition) ISeatSmartQueueDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seatSmartQueueDo) Select(conds ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seatSmartQueueDo) Where(conds ...gen.Condition) ISeatSmartQueueDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seatSmartQueueDo) Order(conds ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seatSmartQueueDo) Distinct(cols ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seatSmartQueueDo) Omit(cols ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seatSmartQueueDo) Join(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seatSmartQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seatSmartQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seatSmartQueueDo) Group(cols ...field.Expr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seatSmartQueueDo) Having(conds ...gen.Condition) ISeatSmartQueueDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seatSmartQueueDo) Limit(limit int) ISeatSmartQueueDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seatSmartQueueDo) Offset(offset int) ISeatSmartQueueDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seatSmartQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeatSmartQueueDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seatSmartQueueDo) Unscoped() ISeatSmartQueueDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seatSmartQueueDo) Create(values ...*model.SeatSmartQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seatSmartQueueDo) CreateInBatches(values []*model.SeatSmartQueue, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seatSmartQueueDo) Save(values ...*model.SeatSmartQueue) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seatSmartQueueDo) First() (*model.SeatSmartQueue, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartQueue), nil
	}
}

func (s seatSmartQueueDo) Take() (*model.SeatSmartQueue, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartQueue), nil
	}
}

func (s seatSmartQueueDo) Last() (*model.SeatSmartQueue, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartQueue), nil
	}
}

func (s seatSmartQueueDo) Find() ([]*model.SeatSmartQueue, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeatSmartQueue), err
}

func (s seatSmartQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeatSmartQueue, err error) {
	buf := make([]*model.SeatSmartQueue, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seatSmartQueueDo) FindInBatches(result *[]*model.SeatSmartQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seatSmartQueueDo) Attrs(attrs ...field.AssignExpr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seatSmartQueueDo) Assign(attrs ...field.AssignExpr) ISeatSmartQueueDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seatSmartQueueDo) Joins(fields ...field.RelationField) ISeatSmartQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seatSmartQueueDo) Preload(fields ...field.RelationField) ISeatSmartQueueDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seatSmartQueueDo) FirstOrInit() (*model.SeatSmartQueue, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartQueue), nil
	}
}

func (s seatSmartQueueDo) FirstOrCreate() (*model.SeatSmartQueue, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeatSmartQueue), nil
	}
}

func (s seatSmartQueueDo) FindByPage(offset int, limit int) (result []*model.SeatSmartQueue, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seatSmartQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seatSmartQueueDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seatSmartQueueDo) Delete(models ...*model.SeatSmartQueue) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seatSmartQueueDo) withDO(do gen.Dao) *seatSmartQueueDo {
	s.DO = *do.(*gen.DO)
	return s
}
